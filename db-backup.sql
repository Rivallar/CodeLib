-- MySQL dump 10.13  Distrib 8.0.25, for Linux (x86_64)
--
-- Host: Rivallar.mysql.pythonanywhere-services.com    Database: Rivallar$codelib
-- ------------------------------------------------------
-- Server version	5.7.44-rds.20240808-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_group_permissions` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_group_permissions_group_id_permission_id_0cd325b0_uniq` (`group_id`,`permission_id`),
  KEY `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_permission_content_type_id_codename_01ab375a_uniq` (`content_type_id`,`codename`),
  CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add general content',1,'add_generalcontent'),(2,'Can change general content',1,'change_generalcontent'),(3,'Can delete general content',1,'delete_generalcontent'),(4,'Can view general content',1,'view_generalcontent'),(5,'Can add page',2,'add_page'),(6,'Can change page',2,'change_page'),(7,'Can delete page',2,'delete_page'),(8,'Can view page',2,'view_page'),(9,'Can add theme',3,'add_theme'),(10,'Can change theme',3,'change_theme'),(11,'Can delete theme',3,'delete_theme'),(12,'Can view theme',3,'view_theme'),(13,'Can add discipline',4,'add_discipline'),(14,'Can change discipline',4,'change_discipline'),(15,'Can delete discipline',4,'delete_discipline'),(16,'Can view discipline',4,'view_discipline'),(17,'Can add log entry',5,'add_logentry'),(18,'Can change log entry',5,'change_logentry'),(19,'Can delete log entry',5,'delete_logentry'),(20,'Can view log entry',5,'view_logentry'),(21,'Can add permission',6,'add_permission'),(22,'Can change permission',6,'change_permission'),(23,'Can delete permission',6,'delete_permission'),(24,'Can view permission',6,'view_permission'),(25,'Can add group',7,'add_group'),(26,'Can change group',7,'change_group'),(27,'Can delete group',7,'delete_group'),(28,'Can view group',7,'view_group'),(29,'Can add user',8,'add_user'),(30,'Can change user',8,'change_user'),(31,'Can delete user',8,'delete_user'),(32,'Can view user',8,'view_user'),(33,'Can add content type',9,'add_contenttype'),(34,'Can change content type',9,'change_contenttype'),(35,'Can delete content type',9,'delete_contenttype'),(36,'Can view content type',9,'view_contenttype'),(37,'Can add session',10,'add_session'),(38,'Can change session',10,'change_session'),(39,'Can delete session',10,'delete_session'),(40,'Can view session',10,'view_session');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) NOT NULL,
  `last_login` datetime(6) DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(150) NOT NULL,
  `first_name` varchar(150) NOT NULL,
  `last_name` varchar(150) NOT NULL,
  `email` varchar(254) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (1,'pbkdf2_sha256$260000$KJHaDlT3oOT9jjvo6DzQmB$2xWv+MtKOZd8GJZOzrW3TYphvbSHrCGM7/UwBb8GZRg=','2025-05-05 11:59:42.294603',1,'admin','','','rrusanovich.dev@gmail.com',1,1,'2022-07-28 08:14:44.247433');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_user_groups` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_groups_user_id_group_id_94350c0c_uniq` (`user_id`,`group_id`),
  KEY `auth_user_groups_group_id_97559544_fk_auth_group_id` (`group_id`),
  CONSTRAINT `auth_user_groups_group_id_97559544_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `auth_user_groups_user_id_6a12ed8b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_user_permissions_user_id_permission_id_14a6b632_uniq` (`user_id`,`permission_id`),
  KEY `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin_log_content_type_id_c4bce8eb_fk_django_co` (`content_type_id`),
  KEY `django_admin_log_user_id_c564eba6_fk_auth_user_id` (`user_id`),
  CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `django_admin_log_user_id_c564eba6_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_admin_log`
--

LOCK TABLES `django_admin_log` WRITE;
/*!40000 ALTER TABLE `django_admin_log` DISABLE KEYS */;
INSERT INTO `django_admin_log` VALUES (1,'2022-08-10 11:32:36.034643','8','Miscellaneous',2,'[{\"changed\": {\"fields\": [\"Path\", \"Title\", \"Slug\"]}}]',4,1),(2,'2022-08-10 12:27:03.614424','4','Интеграция markdown в django',2,'[{\"changed\": {\"fields\": [\"Content type\", \"Object id\"]}}]',2,1),(3,'2022-08-10 12:27:37.827513','3','Синтаксис markdown',2,'[{\"changed\": {\"fields\": [\"Content type\", \"Object id\"]}}]',2,1),(4,'2022-08-10 12:34:17.355908','15','f-строка/string interpolation',2,'[{\"changed\": {\"fields\": [\"Content type\", \"Object id\"]}}]',2,1),(5,'2022-08-10 12:34:33.424207','11','Кортежи/Tuples',2,'[{\"changed\": {\"fields\": [\"Content type\", \"Object id\"]}}]',2,1),(6,'2022-08-10 12:34:45.790078','12','Множества/Sets',2,'[{\"changed\": {\"fields\": [\"Content type\", \"Object id\"]}}]',2,1),(7,'2022-08-10 12:34:59.709088','13','Словари/Dictionaries',2,'[{\"changed\": {\"fields\": [\"Content type\", \"Object id\"]}}]',2,1),(8,'2022-08-10 12:35:19.970321','10','Списки/Lists',2,'[{\"changed\": {\"fields\": [\"Content type\", \"Object id\"]}}]',2,1),(9,'2022-08-10 12:35:32.937988','14','Строки/Strings',2,'[{\"changed\": {\"fields\": [\"Content type\", \"Object id\"]}}]',2,1);
/*!40000 ALTER TABLE `django_admin_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `django_content_type_app_label_model_76bd3d3b_uniq` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (5,'admin','logentry'),(7,'auth','group'),(6,'auth','permission'),(8,'auth','user'),(9,'contenttypes','contenttype'),(4,'pages','discipline'),(1,'pages','generalcontent'),(2,'pages','page'),(3,'pages','theme'),(10,'sessions','session');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_migrations`
--

DROP TABLE IF EXISTS `django_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `django_migrations` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `applied` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_migrations`
--

LOCK TABLES `django_migrations` WRITE;
/*!40000 ALTER TABLE `django_migrations` DISABLE KEYS */;
INSERT INTO `django_migrations` VALUES (1,'contenttypes','0001_initial','2022-07-28 08:04:32.827547'),(2,'auth','0001_initial','2022-07-28 08:05:41.506544'),(3,'admin','0001_initial','2022-07-28 08:06:00.444466'),(4,'admin','0002_logentry_remove_auto_add','2022-07-28 08:06:00.459453'),(5,'admin','0003_logentry_add_action_flag_choices','2022-07-28 08:06:00.475745'),(6,'contenttypes','0002_remove_content_type_name','2022-07-28 08:06:00.612844'),(7,'auth','0002_alter_permission_name_max_length','2022-07-28 08:06:00.685592'),(8,'auth','0003_alter_user_email_max_length','2022-07-28 08:06:00.768073'),(9,'auth','0004_alter_user_username_opts','2022-07-28 08:06:00.782417'),(10,'auth','0005_alter_user_last_login_null','2022-07-28 08:06:00.847969'),(11,'auth','0006_require_contenttypes_0002','2022-07-28 08:06:00.856626'),(12,'auth','0007_alter_validators_add_error_messages','2022-07-28 08:06:00.871274'),(13,'auth','0008_alter_user_username_max_length','2022-07-28 08:06:00.941418'),(14,'auth','0009_alter_user_last_name_max_length','2022-07-28 08:06:01.021519'),(15,'auth','0010_alter_group_name_max_length','2022-07-28 08:06:01.102480'),(16,'auth','0011_update_proxy_permissions','2022-07-28 08:06:01.123341'),(17,'auth','0012_alter_user_first_name_max_length','2022-07-28 08:06:01.201043'),(18,'sessions','0001_initial','2022-07-28 08:06:05.293065'),(19,'pages','0001_initial','2022-07-28 08:09:50.712304');
/*!40000 ALTER TABLE `django_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime(6) NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_expire_date_a5c62663` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_session`
--

LOCK TABLES `django_session` WRITE;
/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
INSERT INTO `django_session` VALUES ('04wz7zfk40kirgy4cy5cysimot45os7k','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1phTS3:MUTM3YFgMfCHngxIV-6V4qzSqYbBxk2uaSieRK5xti0','2023-04-12 10:54:47.929028'),('0avxgcrultkkd4rpq31m97g5cmqkwqpj','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pV6RD:wWmxoVXLVCq8RGVHDmFdHHddCSmaKpZL63LsfvRrwdw','2023-03-09 07:54:47.202617'),('1fz9is35coz1gpdhbrtvrzlzre8b6a6u','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1rlD21:uUb6u4wV6AmN5uwnAwIrcPzKYz7UVlwPdWPOuXH-qK0','2024-03-29 19:15:53.406813'),('1l8d411utqbg46c61xs0xj9n1qwzvdaq','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pFAjW:wLwuDhcS8pQ7jMpdAtmhKU40LlNEtZt5PAUq4t5O6CM','2023-01-24 09:15:50.316929'),('1vf8l12534i19jodxqltj2vnx0hb9o9l','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oThHn:LoELqTCrl3PM4aDkyuyAlTy-N9FbiFwpO12Vy1SztcQ','2022-09-15 10:18:59.945591'),('1vndwg6w2ihpoqnm2cdqnbpuiy6q4yys','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oVXjf:L7kyKIVVbuimRZ5S-cqXphzk1gpv2kJaQUd_C2KbsA4','2022-09-20 12:31:23.793051'),('218r480p5l30bqqbmbwbi661u30cy1yv','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oLjoQ:zY6hojHH-TuVe-e0anyu1luK5001_RyBR_IxO_MdiQc','2022-08-24 11:23:46.953880'),('24cq5mi6624x6lkzouhqr4eqab8r0srh','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1p7XWB:SIm4KQHmTd0kSIushLCip87or1nXVWCHfYfbXVGOqpk','2023-01-03 07:58:31.916978'),('2gvgcv53i0nh1ptd6wzk13nj582shok6','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1u1hHk:GD4udZ0G6pNsW48-AgsoYN-bp707v40MQvyK5v1CQxQ','2025-04-21 07:52:48.159091'),('2icvkk80szjci9unmoo4xtmg72r09xxr','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1u2r2B:ypMg8fxAv5WhAY8dMmiWGNHsoL-xQpQgcql-za51fKs','2025-04-24 12:29:31.265149'),('2xssa43ud7i0q0chsdq4zrf3d12fthe4','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qDkq0:jszi89zYbbxBoB3Y2In6u78dxiBh_srjAYZu36SBGAk','2023-07-10 11:56:56.183893'),('3nogthpzhv7sbnczysmae6f2usifxkgf','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oHJoV:cn6uXHTAVo2JsdB1KDEGmNn6Etypw_hHQUYaOAzYPmU','2022-08-12 06:49:35.782105'),('4hwmo77toz4bvayuw0ibpy29ykepfe74','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pp1by:WB9N8wx_CTdB2RJZV8R3m4BPrbAR2XdXBzsCf0VB6Vw','2023-05-03 06:48:14.092205'),('4rvf5pn8hxwx8cat5wdr1ym2ciufcv51','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pgSjT:J9hMdSmGIiSzCIyGRi3seLS4gYm1BZkc43130ub6LAY','2023-04-09 15:56:35.635851'),('56yecio0vl0cjzrchc7nukb3xp5484o1','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oqwM6:azTpOoVpQk-SxCJY84z_fiucyRU2Lxkz_CLz49UyeBY','2022-11-18 13:03:30.067825'),('5umkoyi8lucndrrw3ghfvviph78pu669','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oprJA:1EUthVecBpGTwypzl3QY2Jfln4FI87d5ztG8JtZhy1Q','2022-11-15 13:28:00.396209'),('6j33ln5sm10ggxjuu2v1dxqpev6yu4jm','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oGyfm:_qxXCASJ8gpWGN3TBawAbUV1qzpCdWO21L_9BzeVVEs','2022-08-11 08:15:10.858555'),('6zo5hutw4coaf6r1wq4w8vbevr1t7wzd','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qvvfg:CDGchhbQjNg3vF6LoswybZnLNItqQqIdLUHJmoDMXME','2023-11-09 08:24:52.092252'),('7rgm374gkaa9yc8dzs1y5ls5g7ia2n1u','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oGyzB:UigvVNqwghCaPND1W_LfD3Z965bF85oP0ptJ-JfpSmI','2022-08-11 08:35:13.742518'),('7s4g534buzbwo8kmzjxx8x6pmo3gjfyj','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pZ5PT:GKqypKhxwvvMzP7B4moA_xoPlN9D9MPjq7ZGf71EHFg','2023-03-20 07:37:27.279707'),('7yj2qh3smxqci9e57h9ws64qgy7z0zci','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ouUil:-tp_nBfiYdrFMzsS1iQp19Re3cvZCFnHvjb9emAgsDo','2022-11-28 08:21:35.406171'),('88xabrfyk0issj92iwhugs479hi0v1wy','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ogQ2v:s-roqSX6ipn1OfbC4xdAV2p87AyV-9FGFKtbuCD00mY','2022-10-20 12:32:13.653497'),('977sw5j9hityd8wnnoqfxfr2ge2dcvo4','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oH3WN:mxxIKlizdzBLur7H5fhWjjw1uUsnfhItmJAVWddDwkE','2022-08-11 13:25:47.901381'),('9qnbtf010k8log6jgo5lcxp99a65tpbl','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pP6F9:ZfjINlhiAmL8tXfdF8fPnyRTMEDj_fyIOo_aNbahnec','2023-02-20 18:29:31.156108'),('9smxmx5nt8lekrlsg6zexgjg5ut08lyi','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pOMJY:7-L6tsBB5t_5dLv_Q7dtRT5M8I8v9ZtI2DQL4RLD_pY','2023-02-18 17:27:00.145228'),('a1lksx4f2ehthxg5tor2i4odmdfstu1f','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1u4xGz:7vpRrPpS_nsMEUzWOUnQ2sbwcc5tnGpAX4lhmc0PMjw','2025-04-30 07:33:29.085117'),('aftwo8vszh8ugsw44zzx4o0qx8lgyeb0','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pMpnL:jdj0fDyqODCQLBCB2eSn9yes9Gbwo9zXpNk50gfNIbg','2023-02-14 12:31:27.990277'),('bmf3dpahpkvf9i1y33bwgh2p8xa717ed','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qTL91:sit8rehYTINZl7YVRqqYc1-D3McezKzL8k7ZORg_VsM','2023-08-22 11:44:59.060849'),('c5482tzu08ti7t801tyj0kklnzarel73','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1obKrv:wteK5aa1P-qq2lRc6SXZS-zyz8IgEu7AYbEhWdSvqDc','2022-10-06 11:59:51.831641'),('c6lbdtghfwm92pybodhlkpvq1ml7413i','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qJugO:n6VTQ7VRuXgUpmU3krjVym-X-lqCjaBSISxpcbk8a34','2023-07-27 11:40:28.596830'),('cjo1cg6dl34eycm2iiz1enxe61rqr3f5','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oV7hx:0-DuwXUutFYE6rE6eUj0AsXuFy_d-I_WDsTU4rWT6Do','2022-09-19 08:43:53.771596'),('dwsm3v0j5yvamupsbaz16i09fam7wca0','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qJ7yF:-rfUGJOvXPSkzR2OYaExUPQePYHGxmy7HQWhZ6LALww','2023-07-25 07:39:39.295829'),('ejfal82rrufy24yyv4p6tbxifciyvacp','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pgT13:9FVC_TbzrvVK6xpawaa9iW9bow8xd4AJcvJAssXPkDg','2023-04-09 16:14:45.520856'),('ex8jy2w4rypjacqgna6rfydh46phgt9p','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1sis98:4R_b8W3gHYHa0XMuNd4B6VK1sV8jMBYleO1W77HhB-I','2024-09-10 09:05:50.770291'),('ezrc963oobtdh7uqhx9vp5t4h5uzw12q','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ofgL7:LKesS2Zt1s2_RGm0cmZFuMvUbPOrVi28uI-f_vAVovA','2022-10-18 11:43:57.927806'),('ggzp8r7bkdxiapf6gebidcgi4mmtsb5r','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pSI2T:zlAS70xUB0SNVacVsT8VUap8UU-It7uVegp2aGxJ_4Y','2023-03-01 13:41:37.365536'),('gyhse85ma0qihldjum9eacv0ovzeqg17','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1p7y82:UxcQRCHoASMa-T8z6x4qtGLfR5ZpZaH2omkMDrc-hMk','2023-01-04 12:23:22.536512'),('gyxw91yxssi4j0t5yjft5qyk863ex3h7','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1od81e:_PZfnZXkzHrD-99c_sfAPYl3u7dCFrJhHtv9kZ2V-ro','2022-10-11 10:41:18.506127'),('haknun15celj02s6uc9t0ybw8y2dnn78','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ogMFX:tibI5YLqGDcXPHjTWd95gEACR37dRXNG026K1d23X8w','2022-10-20 08:28:59.943664'),('hffuqvlq3u5hlr9ovbd5bmngpbq66dno','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qLJ3e:bC3Xn797NmzdkTOb94Enj7HScj9_Kgm1GYYCXux7r2M','2023-07-31 07:54:14.337128'),('hfhsf5oqau7bvy1dzd8krpvdl30egk8a','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ofH1g:29afpcje8mv-2Ir3rHOKceaJGXKdpuOOMJVbWh8l2iU','2022-10-17 08:42:12.432656'),('hlu68t2tamlqs73d3kxi0v6vavwb5lmo','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pp1ij:lU52LOORZ8w7H_uNDuWLiv5u__36u10jbd5Dm6ZGBso','2023-05-03 06:55:13.619351'),('hq9dytk0tr3hk1pqpcukloin2tiv8r5k','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ogPAq:1HFQ_SvhgixWUZE9-DKQUXnq4bZHklyPNHMnipu1Qrk','2022-10-20 11:36:20.994947'),('is1gjtgqwmeq9hynle4lwstxxuaosb9i','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oySyI:eSI900qGYcszn57TIb6QNXijnZzU5v-0ej8Kilxa1_c','2022-12-09 07:18:02.820359'),('itlmy51ium9zbg9btj56ubon4463x3ic','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qF91W:1WoCNPmHTPy41zvkrhIv0ie4OeE3t25bdD-ZmMM81VQ','2023-07-14 07:58:34.417690'),('iu32r6javzy03vy597orj2lrssq23crt','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pc5Nw:ApI0F-esVs-F9cjMajez80lMgxF85HTRNJy6N7HqU5I','2023-03-28 14:12:16.302106'),('iuohw2euwvk5cd1o5h7izxptermmz45h','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pEonp:cQUI4NB_fG7O6eNoi7yeyZ2JFiLjdhCi3zeEhth-S00','2023-01-23 09:50:49.236688'),('ixywma6uakiphxaug3hdfzm3dsxyj893','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1p2dpu:e50aDHNtjE6stEj5r9hx5vPQHLlcFeH9xuHP2VajTbE','2022-12-20 19:42:38.590838'),('j1pilkldcy95smcfnsm0lvsj5azzv4dr','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1p9lF2:Hph9h9uoO-f2vyKdQB4PpBnGVPGCfoiJ8J7eXVjiuXM','2023-01-09 11:02:00.477403'),('j3qfeyw75ekiq3ykx79cqmb7bjx3jlgg','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oaxQd:-Vg0KaqrN8IyoCjJU9hvALDwidf_GTQ5ggkY-UZAdYE','2022-10-05 10:58:07.419471'),('j6w59k1odm0egnj87r1xt8gap6as97z3','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1u6oYE:bgGY0IjUAt5YODXos0F2UskVEOm2wFKTCnmxKW_XXS8','2025-05-05 10:38:58.725163'),('jc4au9dl5qwvesnksfij5k5ngve4il77','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pAqRZ:zlwGpBdI6CtAd_1JtgLsQJo1NLJcWI4BrgKVpo4dfjM','2023-01-12 10:47:25.272902'),('jvs7vnhixgch5vlwmkp8ms2htq317471','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oshgX:MhKQHCrpWfQyAchqWkoyn8qZqTnMLB2ZiGK5cwgTTuY','2022-11-23 09:47:53.879381'),('k5sp1422wu7fo1jmzm68m6u9i1mc7rax','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ogPt0:WAxKFgx2OvHcQ-VySYOEzb4Mbi04xEz_xxOVMj2Rlao','2022-10-20 12:21:58.364674'),('khrfsouyo87rjrae88tico97zhu0dbl0','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pISKR:_fOZxMLuUrd9SWnXq35jtSDWZmW45l4UntJIVM01lQk','2023-02-02 10:39:31.027346'),('kn5ygcxjstmlptk9bcvyc12uavl68zfh','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ot73p:PdahcvuOUbzsaeh6t_wXG0XJK2J1i0G1nuG7hsSpYto','2022-11-24 12:53:37.304158'),('ks7i3c7hac5j8x02uagqzerrjga1mnqa','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1q5pPW:qyFg5m7NJxqIDV_Nh5P_cbLga82Z3KS_TWUW3qBfQz4','2023-06-18 15:12:50.079341'),('ksehpiw7ldtpf3v2knk607pzpgg9svvc','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qSyry:KTK65U0iSbnyWxlIKVzEFzHtIauycNFJ5gwqLQMHogE','2023-08-21 11:57:54.473560'),('lke7dxbcmbur66lwxgp54n5v6u3jrj5h','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ox2BW:nPw9MLDlUDY4NLLMkwZ9NvS4QzdMWLza37bDtPPORY4','2022-12-05 08:29:46.243653'),('lt3qhq9k9brfdikuxfl5ib2keocjt26l','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1tuViD:f4_Pg5QPQ1kAiNH7Q64BOqIcYBk0BFBVIxZ0-bk-1bs','2025-04-01 12:06:25.782553'),('m2qzm1dbtqu1nv60wam7382cvgnlp85g','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1p3cTV:j99L0pr1oMmuNBM1iKF1hGikuHMLV17PqHxUEmTi44w','2022-12-23 12:27:33.863052'),('mahda55zpm2uwhabst0cjoy2lkg0ykr8','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1rkpdM:3D0H3xcQuCn0d4Rn9ZFYVQtJyJEPT1D0AN8msfnJZtQ','2024-03-28 18:16:52.279011'),('mey8mcihq6pg5clqw8tqis3ozfhm3ptw','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oSuRF:Omphexu9wya9qYodCOnXwhuu658qw1yyF95ekSAHBk0','2022-09-13 06:09:29.356034'),('mlr8n109as6b8hpmv64e6jaeaewdo7xg','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oqBic:clw5TWwBa3fhn4GPTbnnkhXqXV3xb2qLp3JtfzZTLyo','2022-11-16 11:15:38.443160'),('n8f0nptwxmbdyx71m0qtt6ljzazx0yzo','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oaFEV:3N9IspadhhVZZQvCbxPJm9Gddh9B9Hzj6AGjpG87qGw','2022-10-03 11:46:39.561915'),('n8lihahf8p16f801epvepgqdmsrfnkws','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qZAHi:NeZEV4gXzaIwL1i90wDtsReXy-OMbsZUNiSUy8WrHrA','2023-09-07 13:22:02.901695'),('ncjwim6sdt8le945h024hpibabsr4bdr','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pbkWJ:vvUigqROgDLqPo5wE9-4jq3UA10QJ8WUWvKapzo_trE','2023-03-27 15:55:31.147394'),('nsporys0rc9gjgcchz5aa71ti07x3avm','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qklFS:DsuxYAL_iXr5ZhM9ymj7OyPdBqR2BWRQR4oN2qju2Nk','2023-10-09 13:03:38.054683'),('o9d5392f2rrf1o42xt0gl97kis9f51c6','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ox4ZH:Upkh1-MFC9bog5Uha3GtbQDyeFMRHPAlqgVyx6EvSI4','2022-12-05 11:02:27.165875'),('od8h48tknche68wg93yahu2wei9nycym','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ozYnZ:luGEwz7gIVItv2aMPXfEjwXXbs5d2EIpm1RtSd741Ss','2022-12-12 07:43:29.645740'),('om2wmtc3oxs1k8yy303q12b5bzv3eqjz','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oI7Im:dgMtwobba2k4uz3nS48D2deAwv3nGKXFX-_d_CWxllE','2022-08-14 11:40:08.468745'),('oxbjfwdcafbtt623kp6vong5d08rmufa','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pDOPZ:9w_bteiWrp-Z2HqBHFJlrvECIoyF-dTc_yFItZbccJ0','2023-01-19 11:27:53.969959'),('pzm854eio3auwlttct1fk2mzfbiwkou7','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1odRSw:fFTg9SapyfnOeOpXQ7BU7K7KhLzzDU5eL0HOWlLFGdM','2022-10-12 07:26:46.246778'),('quxi5wf3sc86evi9ph36k1ppgjepsi7j','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pXjV8:QjTM3beT4reJoiCJVA1bxU6i1wI8IUtCL3z8m-aVPcU','2023-03-16 14:01:42.358449'),('qx4cgl5bxtm5umcrgrd3tm6z6gqv54dy','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oInJY:Wk3UzRCh72jRT30XkI5QX9xy-cT_XiIOoI6xY-G1Imc','2022-08-16 08:31:44.207722'),('raaot1jfjwysw937t5t9g4q5s714bisf','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qupJs:W3Tk4H1lvwFkVIbffbXm7vcR3rqjUL5OdFhDKqUGofI','2023-11-06 07:25:48.421154'),('rg6j0vki3tmzmiyjc8jt2f6m3a77bfmh','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ocnaI:ZgdiOFe7uY5VlW58bY7xE_7S6uZXQXvTObBRAibOIq4','2022-10-10 12:51:42.711740'),('rgeqgocc4v0h76pqpxhauqfj8s64yc46','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1obJin:c84B_8QqAK80c2OT3sjNUgEsE4L6SJ-TW85cYGM4CYw','2022-10-06 10:46:21.329615'),('rp8643tqt49nyxfm22hf356pd07cx5vo','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1uBuU2:bPCmY8O0DhHyUzw6zhycaPLUU5ofdGsBuNnU4EtnCx4','2025-05-19 11:59:42.323966'),('rpi6at5potpxzpnnijl05dkih0d4ki7f','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1u1h7D:P9h2W8yAt0vIf4wWnrIoxfT9Q2bLxD0kOr9SdvCOnnI','2025-04-21 07:41:55.818226'),('rvvwcsv8nyjftncgsoe0pezi7tl4gjzp','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1txj43:2Xn1nMbZ7CFzK6YSwuTeyUBGipjjKPWoUY1LsL-opyA','2025-04-10 08:58:15.806851'),('rz1q6g97cbi27oz4yvsl5mtlkglnt5bw','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1p7C14:OyziTolww_9L1rmuu8_9XzPRHX_V6UsxHTUwvpYULlk','2023-01-02 09:00:58.168423'),('s4t1jrsiku126t185vwxgfbe5k0m375p','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pTo3S:kShpagb3p6i4ARo_4bfgdEs5Kslfh_HifRL75FCSxJg','2023-03-05 18:04:54.341364'),('sn5jfp9136q5iajrwrjea5ppxf47wjhp','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1od5O6:fJ3OBMAW-4YB9w3jjYanlbOkodaCo1RjBU7e2cB7V7Q','2022-10-11 07:52:18.830495'),('srbf8mzzc5iougtwx1bug5i7unz7z9rz','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1r4zG9:9a61kmkQwzZosc2uwyqM2RmWbgxuyiH7kA_rstScCLU','2023-12-04 08:03:57.257165'),('teq4ygl8c18fmqxrbdwd3zdhamiau2l3','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ogPEO:zLABTEAy8n7bu8uvCtkP9wLWBbvPSV_6Lzbq8tAmeTk','2022-10-20 11:40:00.549415'),('uv1ko2mvm8wlheit2pz2zs3un8dt8tfw','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pTQDH:7hujMEFvfHEfcrrTLf2ZBB6-qkHUoi4NgfG5TClHr8o','2023-03-04 16:37:27.246358'),('v1hiuocv6l7801xkbenrc36a88z691sz','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1qeEyP:DvK9Zsk1VOYqSdJLd522cxMXL82hOL0VmOk-WcxW5JE','2023-09-21 13:23:05.378372'),('vdfdjsgmil6q3mn14hq1pw86n1kgosrw','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oSat8:x5q13KJzT6ToA1Aru-e9s6Age7RZMSv7SY_Xb2VRWBI','2022-09-12 09:16:58.102206'),('vfp0839egqtic4a0ih3oses6vh8osqib','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oYO3v:cuD7AV4NIzZsurVCDQo-dk47HHIlolsvC7u6F_yc_84','2022-09-28 08:48:03.304017'),('w7cvjcv4ntora77iqn6lsr4eyoki7bbi','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pVuGM:xW64VKoVWASlbN9iRjAD7AzKZrwNR3esTf_XNZLNeoQ','2023-03-11 13:06:54.870433'),('x561tfem6u9ajgsgtmurh4pprnbv3wmz','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1uARMT:sJEz3EI-uiA1npK9UDND1amsdbx4iMzaEuPbXuujYEE','2025-05-15 10:41:49.330185'),('xf1tk4ivkl6vtqao5fvwb8j0kjtgseri','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1og3rQ:SP16IMdapN0WNuo9A9ouKtP4K6cNnlp-XG75Lotl5HA','2022-10-19 12:50:52.031900'),('xhprwhu4l2kqk4f6tuwexhgbgqd96u87','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pI71T:6RUNsO5Tjxw5ipyhL5BMmJRm50NjesBmAYxml2MfbVU','2023-02-01 11:54:31.278734'),('yhlq4ibqh1erqkh5xnqo6h8w4gcsdc9o','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1ozwZq:Tnw7yClnXh3RXO_b7Zxg2MJMeO2YAWqKgcoyyFBeyFk','2022-12-13 09:06:54.732756'),('yncxlqj09gjeynqdf4sv33vkyykm7he9','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pL0M1:eZekELThDx2rt1fS6YKkF-MPoDGzL943sOleE4E5oHo','2023-02-09 11:23:41.768340'),('yy3m3t4eo7m0e15y3i7cm7nxucqsc81k','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1oOaKR:4phhhrWJlA02eBvqgxttf6lcoUs2_QuOiOUJ8NGiqEs','2022-09-01 07:52:35.117971'),('yz51av1l96fr1gasnt0r2suwctjhi9q5','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1tRTXk:HAEsQWrlaoEHCAYF8mEQN9kZSu28guVR3mLzH1kmzp8','2025-01-11 09:55:36.600319'),('zgyoiltl08xqqr5n6b24z2xu6w9nhjp6','.eJxVjMEOwiAQRP-FsyEsFAIevfsNZNkFqRqalPbU-O-2SQ96nHlvZhMR16XGtec5jiyuAsTlt0tIr9wOwE9sj0nS1JZ5TPJQ5Em7vE-c37fT_Tuo2Ou-LsEwO8yKSnDaaDYAbIxzSWlbEjCYIZMe2O_J-eA8QQYkslaRIhSfL-hAOB0:1pDiXl:WT4tyDFR3xxD5004MRHKUGujL7rJ6kJ9nzaYKZd8XMo','2023-01-20 08:57:41.976892');
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages_discipline`
--

DROP TABLE IF EXISTS `pages_discipline`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `pages_discipline` (
  `generalcontent_ptr_id` bigint(20) NOT NULL,
  `title` varchar(250) NOT NULL,
  `slug` varchar(250) NOT NULL,
  `description` longtext NOT NULL,
  `image` varchar(100) NOT NULL,
  PRIMARY KEY (`generalcontent_ptr_id`),
  UNIQUE KEY `title` (`title`),
  KEY `pages_discipline_slug_4cc51c4a` (`slug`),
  CONSTRAINT `pages_discipline_generalcontent_ptr_i_a1babf2d_fk_pages_gen` FOREIGN KEY (`generalcontent_ptr_id`) REFERENCES `pages_generalcontent` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages_discipline`
--

LOCK TABLES `pages_discipline` WRITE;
/*!40000 ALTER TABLE `pages_discipline` DISABLE KEYS */;
INSERT INTO `pages_discipline` VALUES (4,'Django','django','В разделе описывается всё, что связано с разработкой сайтов на django','pages/2022/07/28/django.png'),(7,'Python','python','Библиотека знаний по python.','pages/2022/08/02/Python-logo.png'),(8,'Miscellaneous','miscellaneous','Тут собрана информация по полезным инструментам разработчика, которые не требуют большого объёма знаний для повседневного использования.','pages/2022/08/10/miscellaneous.jpg'),(13,'Databases','databases','Всё про базы данных.','pages/2022/08/29/database.png'),(18,'Django REST','django-rest','Всё о api и djangorest фреймворке','pages/2022/09/21/djangorest_logo.jpg'),(21,'FrontEnd','frontend','Всё то, что нунжно знать по HTML, CSS, Javascript и пр.','pages/2022/11/15/front-removebg-preview.png'),(33,'Linux','linux','Всё что касается работы в ОС Linux','pages/2023/03/13/linux_logo_6epTyo2.jpg'),(35,'FastAPI','fastapi','Асинхронный фреймворк для быстрого создания web-приложений.','pages/2023/08/24/fastapi.png'),(43,'Artificial Intelligence','artificial-intelligence','Всё, что касается использования ИИ: инструменты, фреймворки, prompt-engineering, подсказки по настройке и пр.','pages/2025/03/18/artificial_general_intelligence.png'),(45,'DevOps','devops','Инструменты для работы с инфраструктурой.','pages/2025/03/27/devops_logo2.jpg');
/*!40000 ALTER TABLE `pages_discipline` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages_generalcontent`
--

DROP TABLE IF EXISTS `pages_generalcontent`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `pages_generalcontent` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `path` varchar(250) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages_generalcontent`
--

LOCK TABLES `pages_generalcontent` WRITE;
/*!40000 ALTER TABLE `pages_generalcontent` DISABLE KEYS */;
INSERT INTO `pages_generalcontent` VALUES (4,'DJANGO'),(5,'DJANGO/интеграция сторонних приложений'),(6,'DJANGO/templates'),(7,'PYTHON'),(8,'MISCELLANEOUS'),(9,'MISCELLANEOUS/markdown'),(10,'PYTHON/типы данных'),(11,'PYTHON/работа с директориями, файлами и путями к ним'),(13,'DATABASES'),(14,'DATABASES/sql language'),(15,'DJANGO/orm и базы данных'),(16,'DJANGO/формы'),(17,'DJANGO/admin-site'),(18,'DJANGO REST'),(19,'DJANGO/тесты'),(20,'DJANGO/orm и базы данных/postgres'),(21,'FRONTEND'),(22,'DJANGO/orm и базы данных/models'),(23,'DJANGO/authentification & registration'),(24,'DJANGO/разные крутые фишки'),(25,'DJANGO/views'),(26,'FRONTEND/javascript'),(27,'PYTHON/полезные модули'),(28,'PYTHON/ооп'),(29,'PYTHON/боты'),(30,'DATABASES/redis'),(31,'PYTHON/полезные модули/pytest'),(32,'DJANGO/celery'),(33,'LINUX'),(34,'DJANGO/orm и базы данных/queries'),(35,'FASTAPI'),(36,'PYTHON/полезные модули/selenium'),(37,'PYTHON/полезные модули/selenium/pom'),(38,'FASTAPI/работа с базами данных'),(39,'FASTAPI/безопасность'),(40,'FASTAPI/безопасность/jwt & oauth2'),(41,'DATABASES/sqlalchemy'),(42,'FASTAPI/интеграция с graphql'),(43,'ARTIFICIAL INTELLIGENCE'),(44,'ARTIFICIAL INTELLIGENCE/crew ai'),(45,'DEVOPS'),(46,'DEVOPS/aws'),(47,'DEVOPS/terraform'),(48,'DEVOPS/ansible'),(49,'DEVOPS/ansible/playbook examples'),(50,'DEVOPS/terraform/полезные примеры'),(51,'DEVOPS/kubernetes'),(52,'DEVOPS/kubernetes/manifest examples'),(53,'DEVOPS/ci-cd pipelines');
/*!40000 ALTER TABLE `pages_generalcontent` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages_page`
--

DROP TABLE IF EXISTS `pages_page`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `pages_page` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `discipline_parent` varchar(250) NOT NULL,
  `title` varchar(250) NOT NULL,
  `slug` varchar(250) NOT NULL,
  `content` longtext NOT NULL,
  `created` date NOT NULL,
  `path` varchar(250) NOT NULL,
  `object_id` int(10) unsigned DEFAULT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `pages_page_content_type_id_fe4261ae_fk_django_content_type_id` (`content_type_id`),
  KEY `pages_page_slug_770723b9` (`slug`),
  CONSTRAINT `pages_page_content_type_id_fe4261ae_fk_django_content_type_id` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=174 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages_page`
--

LOCK TABLES `pages_page` WRITE;
/*!40000 ALTER TABLE `pages_page` DISABLE KEYS */;
INSERT INTO `pages_page` VALUES (3,'Miscellaneous','Синтаксис markdown','sintaksis-markdown','## Заголовки/headers\r\n\r\nЗаголовки обозначаются некоторым количеством символов <strong>#</strong>. Чем больше символов, тем меньше заголовок.  \r\nДля совместимости до и после заголовка желательно оставлять по пустой строке, а также пробел после **\\#**: **\\# Заголовок**.\r\n\r\n**Альтернативный способ для <h1\\> и <h2\\>:** написать текст заголовка, а на следующей строке напечатать любое количество символов == (для **<h1\\>**) или -- (для **<h2\\>**).\r\n\r\n## Абзац/paragraph\r\n\r\nДля отделения одного абзаца от другого просто **используй пустую строку** между ними.\r\n\r\n## Перенос строки/linebreak\r\n\r\nКлассический способ: **оставить 2 пробела в конце строки**.<br>\r\nСовместим со всеми приложениями, но плохо читается при редактировании, можно ошибиться.<br>\r\nАльтернатива: классический html-tag **<br\\>**.<br>\r\nЕщё один вариант, совместимый не во всех приложениях - использование бэкслэша **\\\\**.\r\n\r\n## Жирный текст/bold\r\n\r\nДля выделения используй \\*\\* **жирный текст** \\*\\*.<br>\r\nМожно, но не рекомендуется использовать 2 нижних подчёркивания *_*_.<br>\r\n\r\n## Курсив/itallic\r\n\r\nАналогично bold, но используется по одному символу * или _: \\* *текст курсивом* \\*.\r\n\r\n## Жирный курсив\r\n\r\nИспользуется 3 символа * или _: \\*\\*\\* ***жирный курсив*** \\*\\*\\*\r\n\r\n## Блочные цитаты/blockquotes\r\n\r\nПеред цитатой добавить пустую строку и символ \\>:\r\n> Очень умная цитата очень умного человека.\r\n\r\n**Большие цитаты** в несколько параграфов: вместо пустой строки между параграфами используй строку с единственным символом \\>:\r\n\r\n>\\> Первый абзац<br>\r\n>\\><br>\r\n>\\> Второй абзац<br>\r\n\r\n**Вложенные цитаты**: используют 2 символа \\>:\r\n\r\n>\\> Первый уровень цитаты<br>\r\n>\\>\r\n>> \\>\\> Второй уровень цитаты\r\n\r\nМожно легко использовать **другие элементы форматирования в цитате** по обычным правилам:\r\n\r\n>**Цитата** с *использованием* других ***тэгов форматирования***.\r\n\r\n## Списки/lists\r\n\r\n### Упорядоченный список/ordered list:<br>\r\n\r\nДобавь <любая цифра>.:\r\n\r\n1. Элемент упорядоченного списка\r\n    1. Список в списке - нужно на новой строке добавить 4 пробела или 1 tab\r\n\r\n        Между элементами списка можно вставлять другие элементы, не нарушая список - они также отделяются 4-мя пробелами/tab-ом (это абзац)\r\n\r\n    1. Следующий элемент списка\r\n\r\n### Неупорядоченный список/unordered list:\r\n\r\nДобавь \\- или \\+:\r\n\r\n- Первый элемент неупорядоченного списка\r\n- 1880\\. Чтобы начать элемент неупорядоченного списка с цифр, делай так: \\- 1880\\\\.\r\n    + Вложенные неупорядоченные списки формируются также как и упорядоченные\r\n\r\n        > и между ними также можно вставлять другие элементы, не нарушая порядок списка (это цитата)\r\n\r\n    + Второй элемент вложенного списка\r\n- Блоки кода обычно выделяются 4-мя пробелами, поэтому если нужен код в списке - делай 8 пробелов\r\n\r\n## Блок кода/code\r\n\r\nДля кода используются **обратные кавычки** \\`: \\` `офигенно крутой кусок кода` \\`<br>\r\nЕсли в коде нужно использовать кавычки, оборачивай всю секцию кода в двойные обратные кавычки, а внутри пользуйся одинарными: \\`\\` ``твой код с `кавычками` прекрасен`` \\`\\`<br>\r\n**Блок кода больших размеров** использует табуляцию: для каждой строчки 4 пробела или один tab:\r\n\r\n    <html>\r\n      <head>\r\n        <title>Hello world</title>\r\n      </head>\r\n\r\n## Горизонтальные линии для подчёркивания\r\n\r\nДля лучшей совместимости лучше всего **использовать 3 дефиса** отделённых пустой строкой сверху и снизу. Также подходят 3 нижних подчёркивания или 3 астериска:\r\n\r\n---\r\n\r\n## Ссылки/Links\r\n\r\nДля создания ссылки используй квадратные скобки для названия и сразу же за ними ссылку в круглых скобках:<br>\r\nСсылка на \\[Гугл\\](https://google.com \\\"Подсказка через пробел\\\") - Ссылка на [Гугл](https://google.com \"Подсказка\")\r\n\r\nОбычные URL и почтовые адреса можно просто брать в угловые скобки: <example@gmail.com\\>, <https://google.com\\> - <example@gmail.com>, <https://google.com><br>\r\n**Ссылки можно форматировать** по общим правилам: \\*\\[Гугл\\](https://google.com \\\"Подсказка через пробел\\\")\\* - Ссылка на *[Гугл](https://google.com \"Подсказка\")*\r\n\r\n### Ссылка на другую часть документа\r\n\r\nРазный синтаксис для разных интерпертаторов markdown. Надёжнёё сделать через обычный html:\r\n\r\n- нужному тэгу присваиваем уникальный id: `<h1 id=\"ssylka>...`\r\n- в нужном месте делаем ссылку: `<a href=\"#ssylka\">...`\r\n\r\n### Ссылки на изображение\r\n\r\nТакие же как и обычные, но перед квадратными скобками знак !: `![Альтернативный необязательный текст](/static/images/Logos/logo_blue.PNG)`\r\n\r\n![Альтернативный необязательный текст](/static/images/Logos/logo_blue.PNG)\r\n\r\n**Кликабельная ссылка-рисунок** дополнительно заключается в квадратные скобки:<br>\r\n`[![An old rock in the desert](/assets/images/shiprock.jpg \"Shiprock, New Mexico by Beau Rogers\")](https://www.flickr.com/photos/beaurogers/31833779864/in/photolist-Qv3rFw-34mt9F-a9Cmfy-5Ha3Zi-9msKdv-o3hgjr-hWpUte-4WMsJ1-KUQ8N-deshUb-vssBD-6CQci6-8AFCiD-zsJWT-nNfsgB-dPDwZJ-bn9JGn-5HtSXY-6CUhAL-a4UTXB-ugPum-KUPSo-fBLNm-6CUmpy-4WMsc9-8a7D3T-83KJev-6CQ2bK-nNusHJ-a78rQH-nw3NvT-7aq2qf-8wwBso-3nNceh-ugSKP-4mh4kh-bbeeqH-a7biME-q3PtTf-brFpgb-cg38zw-bXMZc-nJPELD-f58Lmo-bXMYG-bz8AAi-bxNtNT-bXMYi-bXMY6-bXMYv)`\r\n\r\n[![Не загрузит из-за ограничений хостинга](/assets/images/shiprock.jpg \"Shiprock, New Mexico by Beau Rogers\")](https://www.flickr.com/photos/beaurogers/31833779864/in/photolist-Qv3rFw-34mt9F-a9Cmfy-5Ha3Zi-9msKdv-o3hgjr-hWpUte-4WMsJ1-KUQ8N-deshUb-vssBD-6CQci6-8AFCiD-zsJWT-nNfsgB-dPDwZJ-bn9JGn-5HtSXY-6CUhAL-a4UTXB-ugPum-KUPSo-fBLNm-6CUmpy-4WMsc9-8a7D3T-83KJev-6CQ2bK-nNusHJ-a78rQH-nw3NvT-7aq2qf-8wwBso-3nNceh-ugSKP-4mh4kh-bbeeqH-a7biME-q3PtTf-brFpgb-cg38zw-bXMZc-nJPELD-f58Lmo-bXMYG-bz8AAi-bxNtNT-bXMYi-bXMY6-bXMYv)\r\n\r\n## Экранирование/escape characters\r\n\r\nЕсли в тексте нужны символы, которые используются в markdown для разметки, их можно **экранировать с помощью backslash \\**.<br>\r\nСписок символов, которые можно экранировать: ``*, \\, `, _, (), [], {}, <>, #, +, -, ., !, |``\r\n\r\n## Также во многих приложениях markdown можно напрямую использовать html-тэги.\r\n\r\nЭто удобно, когда нужно выбрать специфический тэг или применить уникальное форматирование, но не поддерживается повсеместно из-за соображений безопасности.\r\n\r\n## Пробелы\r\n\r\nHTML \"съедает\" лишние пробелы. Чтобы явно указать один пробел используй символ неразрывного пробела: `&nbsp;`<br>\r\nДля большой секции текста с разметкой пробелами удобнее всего использовать html-тэг `<pre>...<\\pre>`\r\n\r\n#### Материал для статьи был взять отсюда: [сайт markdown](https://www.markdownguide.org/basic-syntax)','2022-07-28','MISCELLANEOUS/markdown/синтаксис markdown',9,3),(4,'Miscellaneous','Интеграция markdown в django','markdown-django','1. Устанавливаем отдельное приложение в виртуальной среде проекта: `pip install markdown`\r\n\r\n2. Реализуем функционал как **[templatetag](https://rivallar.pythonanywhere.com/theme/6/)** нашего приложения.<br>\r\nДля этого в папке приложения создаём каталог *templatetags* с двумя файлами: *\\_\\_init.py\\_\\_* и *appname\\_tags.py*.<br>\r\nВ *appname\\_tags.py* регистрируем тэг для marcdown:\r\n\r\n        import mardown\r\n        from django.utils.safestring import marksafe        # По умолчанию Django игнорирует html-код из соображений безопасности. Эта функция пометит текст как безопасный и django его учтёт\r\n        from django import template\r\n\r\n        register = template.Library()\r\n\r\n        @register.filter(name=\'markdown\')                   # Регистрируем как фильтр\r\n        def markdown_format(text):\r\n            return mark_safe(markdown.markdown(text))\r\n\r\n3. В нужном html-темплэйте загружаем тэги приложения и применяем наш фильтр:\r\n\r\n        {% load app_tags %}\r\n        ...\r\n        {{ text_var_to_format|markdown|truncatewords_html:30 }}    # !Для html-формата нужен свой фильтр truncatewords','2022-07-28','MISCELLANEOUS/markdown/интеграция markdown в django',9,3),(5,'Django','Markdown django','markdown-django','1. Устанавливаем отдельное приложение в виртуальной среде проекта: `pip install markdown`\r\n\r\n2. Реализуем функционал как **templatetag** нашего приложения.<br>\r\nДля этого в папке приложения создаём каталог *templatetags* с двумя файлами: *\\_\\_init.py\\_\\_* и *appname\\_tags.py*.<br>\r\nВ *appname\\_tags.py* регистрируем тэг для marcdown:\r\n\r\n        import mardown\r\n        from django.utils.safestring import marksafe        # По умолчанию Django игнорирует html-код из соображений безопасности.\r\n                                                            Эта функция пометит текст как безопасный и django его учтёт\r\n        from django import template\r\n\r\n        register = template.Library()\r\n\r\n        @register.filter(name=\'markdown\')                   # Регистрируем как фильтр\r\n        def markdown_format(text):\r\n            return mark_safe(markdown.markdown(text))\r\n\r\n3. В нужном html-темплэйте загружаем тэги приложения и применяем наш фильтр:\r\n\r\n        {% load app_tags %}\r\n        ...\r\n        {{ text_var_to_format|markdown|truncatewords_html:30 }}    # !Для html-формата нужен свой фильтр truncatewords','2022-07-28','DJANGO/интеграция сторонних приложений./markdown django',5,3),(6,'Django','Список встроенных templates','spisok-vstroennykh-templates','## Все темплэйты делятся на:\r\n\r\n- тэги, контролирующие рендеринг странички `{% tag %}` - это циклы, условия, операторы присваивания, функции над переменными и пр.\r\n- фильтры и тэги переменных `{{ var }}, {{ var|filter }}` - форматирование текста, изменение/обогащение исходной информации\r\n\r\n### Фильтры и переменные:\r\n\r\n<table>\r\n<tr><td>{{ module.order|add:1 }}</td><td>- изменяем полученные числа. Корректируем порядковый номер</td></tr>\r\n<tr><td>{{ var|count }}</td><td>- посчитать количество объектов в переменной-списке</td></tr>\r\n<tr><td>{{ forloop.counter }}</td><td>- счётчик, выдаст число текущей итерации цикла</td></tr>\r\n<tr><td>{{ order.created|date:\"M d, Y\" }}</td><td>- управляем форматом времени/даты</td></tr>\r\n<tr><td>{{ forloop.first }}<br>{{ forloop.last }}</td><td>- проверка на первую/последнюю итерацию цикла. Вернёт boolean True/False.<br>  Используется чтобы что-то (не)сделать на нужной итерации цикла.</td></tr>\r\n<tr><td>{{ price|floatformat:\"2\" }}</td><td>- управление форматом чисел. Покажет 2 цифры после запятой</td></tr>\r\n<tr><td>{{ post.tags.all|join:\', \' }}</td><td>- соединить элементы списка в строку через указанный разделитель. Аналогично join в python</td></tr>\r\n<tr><td>{{ comment|linebreaks }}</td><td>- разобьёт длинный текст на строки</td></tr>\r\n<tr><td>comment{{ total_comments|pluralize }}</td><td>- Автоматически подставит нужное окончание для множественного числа</td></tr>\r\n<tr><td>{{ action.created|timesince }}</td><td>- покажет сколько времени прошло после события. Например \"3 минуты назад\"</td></tr>\r\n<tr><td>{{ post.body|truncatewords:30 }}</td><td>- отобразить только первые 30 символов</td></tr>\r\n\r\n\r\n\r\n\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n### Тэги:\r\n\r\n<table>\r\n<tr><td>{% custom_template_result as result %}</td><td>- вызвать какой-то template и результат работы записать в переменную</td></tr>\r\n<tr><td>{% empy %}</td><td>- проверка на пустой массив. Дальше пишут код, что делать, если пусто.</td></tr>\r\n<tr><td>{% if comments %}{% else %}{% endif %}</td><td>- стандартный блок условий</td></tr>\r\n<tr><td>{% for item in list%}{% endfor %}</td><td>- обычный цикл</td></tr>\r\n<tr><td>{% with c.count as total %}...code...{% endwith %}</td><td>- создаст переменную {{ total }}, к которой можно обращаться внутри блока</td></tr>\r\n<tr><td>a href=\"{% url \'blog:share\' id %}\"></td><td>- сформирует ссылку на нужную страницу</td></tr>\r\n<tr><td>{% now \"Y M\" %}</td><td>- текущее время со строкой формата даты</td></tr>\r\n\r\n\r\n\r\n\r\n</table>','2022-07-28','DJANGO/templates/список встроенных templates',6,3),(7,'Django','Создание своего templatetag','templatetag','1. В директории нужного приложения создать папку *templatetags* и в ней 2 файла: *\\_\\_init.py\\_\\_* и *appname_tags.py*\r\n2. Создать свои темплэйты в *appname_tags.py*:\r\n\r\n        from django import template\r\n        from ..models import Post\r\n\r\n        register = template.Library()          # обязательная переменная для регистрации своих тэгов\r\n\r\n    \\# Регистрация ПРОСТОГО тэга, который в результате работы выдаст какое-то значение.\r\n\r\n        @register.simple_tag(name=\'my_tag\')    # Параметр name необязателен. По этому имени будет вызываться тэг в html-template ({% my_tag %})\r\n        def total_posts():                     # Если name не указан, тэг вызывается именем функции\r\n            return Post.published.count()\r\n\r\n    \\# Регистрация INCLUSION tag, который в результате работы выдаст кусок html-кода, который будет вставлен на страницу.\r\n\r\n        @register.inclusion_tag(\'blog/post/latest_posts.html\')             # Нужно создать отдельный html-template, с которым будет работать тэг\r\n        def latest_posts(count=5):                                         # Если функции нужно передавать аргументы. В html-шаблоне будет так: {% latest_posts 5 %}\r\n            latest_posts = Post.published.order_by(\'-publish\')[:count]\r\n            return {\'latest_posts\': latest_posts}                          # Функция должна возвращать контекст, который будет использован в html-template этого тэга\r\n\r\n    \\# Регистрация фильтра\r\n\r\n        @register.filter\r\n        def model_name(obj):\r\n            try:\r\n                return obj._meta.model_name\r\n            except AttributeError:\r\n                return None\r\n\r\n3. В **конкретный** html-тэг нужно загрузить наши тэги в начале файла (не только в base.html!) и вызвать их в нужном месте:\r\n\r\n        {% load blog_app_tags %}\r\n        ....\r\n        {% total_posts %}\r\n        <div id=\'latest_posts>{% latest_posts 10 %}</div>\r\n        {{ post|model_name }}','2022-07-28','DJANGO/templates/создание своего templatetag',6,3),(8,'Django','Примеры полезных templatetags','templatetags','### Фильтр для получения имени класса передаваемого объекта\r\n\r\nИмя можно получить из Meta-класса модели объекта. Но напрямую это сделать в html-template невозможно. Поэтому часто создают специальный фильтр.\r\n\r\n    @register.filter\r\n    def model_name(obj):\r\n        try:\r\n            return obj._meta.model_name\r\n        except AttributeError:\r\n            return None\r\n\r\nВ html-шаблоне просто используем тэг-фильтр: `{{ any_object|model_name }}`\r\n\r\n### Inclusion-tag для поиска\r\n\r\nМинимально компактный search-bar в одно поле, который можно быстро добавить в любое место любой html-странички\r\n\r\n    from ..forms import SearchForm                                        # Не забудь создать отдельную форму в forms.py и импортировать её сюда\r\n\r\n    @register.inclusion_tag(\'pages/additional/search.html\')               # Нужен отдельный html-шаблон, в котором будет размечена форма поиска\r\n    def search_field():\r\n        form = SearchForm()\r\n        return {\'form\': form }\r\n\r\nHtml-шаблон и форма примитивные, описывать их не вижу смысла.<br>\r\nНа нужной странице просто используем тэг: `{% search_field %}`\r\n\r\n### Inclusion-tag для навигации\r\n\r\nВставит на страницу полоску путевых ссылок вроде: *Main / catalog / subcatalog / page*, чтобы можно было быстро возвращаться к родительским страницам.\r\nПринцип такой: найти все родительские элементы до самого первого и передать их в отдельный html-шаблон. Он уже из объектов сформирует панель навигации из ссылок на них.\r\n\r\n    @register.inclusion_tag(\'pages/additional/navigation.html\')\r\n    def navigation(curr_object):\r\n        nav_list = [curr_object]\r\n        while curr_object._meta.model_name != \'discipline\':\r\n            curr_object = curr_object.content_object                        # переходим от текущего объекта к его родителю пока не наткнёмся на объект модели \'discipline\'\r\n            nav_list.insert(0, curr_object)\r\n        return {\'nav_list\': nav_list}\r\n\r\nРазметка в navigation.html:\r\n\r\n    <div id=\"navigation\">\r\n        <a href=\"{% url \'pages:main\' %}\">Main</a>/\r\n        {% for item in nav_list %}\r\n            <a href=\"{{ item.get_absolute_url }}\">{{ item }}</a>\r\n            {% if not forloop.last %}/{% endif %}\r\n        {% endfor %}\r\n    </div>\r\n\r\nНа нужной странице просто используем тэг c передачей в качестве параметра текущий объект: `{% navigation object %}`','2022-07-29','DJANGO/templates/примеры полезных templatetags',6,3),(10,'Python','Списки|Lists','spiskilists','### Создание списков\r\n\r\n***Плохо работают таблицы в начале страниц. Нужно добавлять описание чтобы они не попадали в ограничение длины символов в плитке***\r\n\r\n<table>\r\n<tr><td>x = [1, 2, 3]</td><td>- Так обычно задаётся список</td></tr>\r\n<tr><td>z = x + [4, 5, 6]</td><td>- создание нового списка (новый id) слиянием старых. Старые списки останутся без изменений и никак не связаны с новым</td></tr>\r\n<tr><td>z = [3, 1] * 3</td><td>- генерация нового списка, получим [3, 1, 3, 1, 3, 1]</td></tr>\r\n<tr><td>z = x[:]</td><td>- создаёт независимую копию списка х</td></tr>\r\n</table>\r\n\r\n\r\n### Глубокое копирование\r\n\r\n<table>\r\n<tr><td>import copy</td></tr>\r\n<tr><td>z = copy.deepcopy(x)</td><td>- Создаст глубокую копию: новый независимый список с независимыми подсписками.</td></tr>\r\n</table>\r\n\r\n### Распаковка\r\n\r\n<table>\r\n<tr><td>a, b, c, d, *e = [1, 2, 3, 4, 5, 6, 7, 8]</td><td>- каждая переменная возьмёт по одному значению кроме *e - возьмёт список [5, 6, 7, 8].</td></tr>\r\n</table>\r\n\r\n### Срезы\r\n\r\n<table>\r\n<tr><td>x[i]</td><td>- i-ый элемент списка</td></tr>\r\n<tr><td>y = x[1:6]</td><td>- срез с первого по пятый элементы (6-й не включается)</td></tr>\r\n<tr><td>list_a[index1:index2] = list_b</td><td>- сегментное присваивание, list_a может менять свою длину в зависимости от длины list_b.</td></tr>\r\n<tr><td>x[len(x):] = [4,5]</td><td>- добавить к концу списка</td></tr>\r\n<tr><td>x[:0] = [-1, 0]</td><td>- добавить к началу списка</td></tr>\r\n<tr><td>x[1:-1] = []</td><td>- удалить элементы списка (все кроме первого и последнего)</td></tr>\r\n<tr><td>y = x[::-1]</td><td>- быстро и просто перевернуть список</td></tr>\r\n<tr><td>y = x[1:8:2]</td><td>- третий параметр задаёт шаг, т.е. каждый второй элемент</td></tr>\r\n<tr><td>y = x[1:8:-2]</td><td>- можно идти с конца списка в начало</td></tr>\r\n\r\n</table>\r\n\r\n### Методы\r\n\r\n<table>\r\n<tr><td><b>list</b>(\'hello\')</td><td>- преобразует любую последовательность в список (в нашем случае [\'h\', \'e\', \'l\', \'l\', \'o\']</td></tr>\r\n<tr><td><b>len</b>(x)</td><td>- длина списка</td></tr>\r\n<tr><td>y = x.<b>copy()</b>(x)</td><td>- <i>поверхностное копирование</i>, т.е. верхний список новый и независимый, а вложенные элементы те же.</td></tr>\r\n<tr><td>x.<b>append</b>(4)</td><td>- присоединить ОДИН элемент в КОНЕЦ списка (массив присоединится одним элементом - массивом)</td></tr>\r\n<tr><td>x.<b>extend</b>([4, 5])</td><td>- дополнить массив элементами другого массива</td></tr>\r\n<tr><td>x.<b>insert</b>(2, 1.5)</td><td>- вставить в х элемент 1.5 перед вторым (порядковый номер) элементом</td></tr>\r\n<tr><td><b>del</b> x[3]</td><td>- удалить из х элемент №3. Можно срезами <b>del x[1:3]</b></td></tr>\r\n<tr><td>x.<b>remove</b>(\'abc\')</td><td>- удалить первый нашедшийся элемент \'abc\' из списка. !!!Если таких элементов неск-ко удалит только первый !!! Выдаст ошибку, если такого элемента нет</td></tr>\r\n<tr><td>y = x.<b>pop</b>(index)</td><td>- передаёт в y элемент массива х. Из х этот элемент стирается. Можно без индекса - удалит крайний</td></tr>\r\n<tr><td>y.<b>clear</b>()</td><td>- удалить все элементы массива. Останется пустой лист</td></tr>\r\n<tr><td>\'abc\' <b>in</b> x</td><td>- проверка на вхождение элемента в список</td></tr>\r\n<tr><td>x.<b>reverse</b>()</td><td>- переставит элементы в обратном порядке \"на месте\". <i>!!Только для списков</i></td></tr>\r\n<tr><td><b>min</b>(x)/<b>max</b>(x, key=custom_function)</td><td>- находит минимальное/максимальное значение в массиве</td></tr>\r\n<tr><td><b>sum</b>(x)</td><td>- сумма элементов массива</td></tr>\r\n<tr><td>x.<b>index</b>(\'element\')</td><td>- найти порядковый номер искомого элемента !!!Если такого нет - выдаст ошибку!!! Вторым и третьим параметром можно указать срез, в котором искать.</td></tr>\r\n<tr><td>x.<b>count</b>(\'element\')</td><td>- количество \'element\' в списке</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>\'@\'.<b>join</b>([\'elem1\', \'elem2\',...])</td><td>- объединит элементы листа в строку. Между элементами будет символ \'@\'</td></tr>\r\n<tr><td>\'a b c d e\'.<b>split</b>(\' \', 2)</td><td>- разобьёт строку на элементы листа. Можно указывать разделитель и кол-во разбитых элементов (тут будет [\'a\', \'b\', \'c d e\'])</td></tr>\r\n\r\n</table>\r\n\r\n### Сортировка, фильтрация, map\r\n\r\n<table>\r\n<tr><td>x.<b>sort</b>(key=custom_function, reverse=True)</td><td>- сортирует список \"на месте\"(<i>тот-же список, присваивать не нужно</i>). <i>Элементы списка должны быть одного типа!</i>.</td></tr>\r\n<tr><td><i>reverse=True</i></td><td>- в обратном порядке</td></tr>\r\n<tr><td><i>key=custom_function</i></td><td>- задать свою функцию для сортировки по спец условию.\r\n			\r\n<tr><td>y = <b>sorted</b>(x, key=custom_function, reverse=True)</td><td>- сортирует как sort(), но создаёт новый список. <i>!В отличие от sort() актуален для всех итерируемых объектов!</i>.</td></tr>\r\n\r\n<tr><td><b>x = filter</b>(func, arr)</td><td>- создаст новый массив из элементов arr, которые отвечают условию функции. <i>!Функция должна возвращать True/False!</i></td></tr>\r\n<tr><td><b>map</b>(func, arr)</td><td>- применит функцию к каждому элементу массива</td></tr>\r\n</table>\r\n\r\n#### key и lambda\r\n\r\nЕсли ключ-функция для сортировки/фильтрации/map небольшая и используется только в данном куске кода, её можно не обозначать отдельно, а прописать на месте с помощью <b>lambda</b>. Ниже пример одной и той же функции в lambda и отдельно:\r\n\r\n    content.sort(key=lambda x: len(x))\r\n\r\n    def custom_function(string1):            -	функция вернёт в sort длину каждой строки списка строк, а sort уже отсортирует строки по длине\r\n        return len(string1)\r\n			 					\r\n 					\r\n 					\r\n		\r\n 					\r\n\r\n 														\r\n\r\n<table>\r\n<tr><td></td><td></td></tr>\r\n</table>','2022-08-02','PYTHON/типы данных/списки|lists',10,3),(11,'Python','Кортежи|Tuples','tuples','Кортежи во многом схожи со списками и имеют примерно те же методы. Основное отличие - ***кортежи нельзя изменять***, т.е. нельзя добавлять/удалять/изменять и менять местами элементы, т.к. это **неизменяемый** тип данных.<br>\r\nПреимущества: работают быстрее листов, труднее ошибиться (испортить данные).\r\n\r\n### Создание кортежа:\r\n\r\n<table>\r\n<tr><td>x = (1, 2, 3)</td><td></td></tr>\r\n<tr><td>x = (1,)</td><td><i>- в одноэлементном кортеже обязательна запятая!</i> Иначе python считает, что мы работаем с множеством</td></tr>\r\n<tr><td>tuple(\'hello\')</td><td>- преобразует любую последовательность в кортеж.</td></tr>\r\n</table>\r\n\r\n### Список методов:\r\n\r\n- len(x)\r\n- min/max(x)\r\n- 1 in x\r\n- x.index(element)\r\n- x.count()\r\n- y = sorted(x, key=custom_function, reverse=True)\r\n\r\nОписание методов, фишки с генерацией новых кортежей, глубоким копированием, распаковкой, срезами такие же как и у списков.\r\nПосмотреть можно [здесь](http://rivallar.pythonanywhere.com/page/10/ \"Списки\").\r\n\r\n### метод zip\r\n\r\n<b>zip</b> позволяет склеивать элементы нескольких итерируемых объектов в кортежи. Т.е. в результате мы получим список с кортежами вида<br>\r\n\r\n`[(item0_obj0, item0_obj1, item0_obj2), (item1_obj0, item1_obj1, item1_obj2), ...]`\r\n\r\n<i>!Склеивание происходит до последнего элемента самого короткого объекта!</i>, остальные будут проигнорированы.<br>\r\nНапример `zip([1, 2, 3, 4], [\'a\', \'b\', \'c\'])` выдаст `[(1, \'a\'), (2, \'b\'), (3, \'c\')]`\r\n\r\n<table>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>','2022-08-02','PYTHON/типы данных/кортежи|tuples',10,3),(12,'Python','Множества|Sets','sets','Множества содержат только *уникальные* объекты, т.е. без повторок. Дубликаты будут проигнорированы<br>\r\nЭлементы множеств должны быть неизменяемыми и хэшируемыми, т.е.  могут быть ***только числами, строками, кортежами, frozenset***.<br>\r\nВ множества можно добавлять новые и удалять старые элементы, но в них не учитывается порядок, т.е. *нельзя применять индексы и срезы*.\r\n\r\nПлюсы: очень быстро работает, можно быстро отсеивать дубликаты, склеивать/искать общие и различные элементы и совершать другие операции, уникальные для множеств.\r\n\r\n### Создание:\r\n\r\n<table>\r\n<tr><td>x = {1, 2, 3, 4}</td><td></td></tr>\r\n<tr><td>x = {}</td><td>- пустой сет</td></tr>\r\n<tr><td>х = set([1, 2, 3, 3, 5, 4])</td><td>- преобразует любую последовательность в set (уникальные значения)</td></tr>\r\n<tr><td>x = <b>frozenset</b>{1, 3, 4, 6, 4, 3}</td><td>- создаёт НЕИЗМЕНЯЕМОЕ множество (может быть элементом другого множества, возможно нужно делать импорт)</td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n### Методы:\r\n\r\n<table>\r\n<tr><td><b>len</b>(x)</td><td>- длина сета</td></tr>\r\n<tr><td>2 <b>in</b> x</td><td>- проверка на вхождение элемента (отработает намного быстрее листа)</td></tr>\r\n<tr><td>x.<b>pop</b>()</td><td>- выдаст рандомное значение из х и удалит его из множества</td></tr>\r\n<tr><td>x.<b>add</b>(y)</td><td>- добавить элемент в множество (порядок игнорируется)</td></tr>\r\n<tr><td>x.<b>remove</b>(y)</td><td>- удалить элемент из множества</td></tr>\r\n<tr><td><br></td></tr>\r\n<tr><td>x | y</td><td>- слияние, выдаст новое множество, состоящее из элементов двух множеств</td></tr>\r\n<tr><td>x & y</td><td>- пересечение, т.е. общие элементы двух множеств</td></tr>\r\n<tr><td>x ^ y</td><td>- <b>не</b> общие элементы для двух множеств</td></tr>\r\n<tr><td>x - y</td><td>- выдаст элементы из х, которых нет в y</td></tr>\r\n</table>\r\n\r\n\r\n<table>\r\n<tr><td></td><td></td></tr>\r\n</table>','2022-08-02','PYTHON/типы данных/множества|sets',10,3),(13,'Python','Словари|Dictionaries','dictionaries','Ассоциативный массив. Хранит данные парами ключ-значение.\r\n***Ключ (key) должен быть уникален и из неизменяемых типов данных***: строка, число, кортеж, boolean, frozenset.\r\nЗначение (value) может быть любым.\r\nБлагодаря использованию хэша **оооочень** быстрый, но не имеет индексов и не гарантирует порядок пар внутри себя (*хотя по моим наблюдением в новых версиях python порядок соблюдается).\r\n\r\n### Создание\r\n\r\n<table>\r\n<tr><td>x = {}</td><td></td></tr>\r\n<tr><td>x = <b>dict</b>()</td><td></td></tr>\r\n<tr><td>x = {\'name\': \'Ivan\', \'age\': 22, \'relatives\': [\'mother\', \'father\', \'sister\']}</td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table> \r\n\r\n### Методы\r\n\r\n<table>\r\n<tr><td>x[\'key\'] = \'value\'</td><td>- добавить новое значение</td></tr>\r\n<tr><td>x[\'key\'] = \'new_value\'</td><td>- изменить значение</td></tr>\r\n<tr><td><b>del</b> x[\'key\']</td><td>- удалить значение</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td><b>len</b>(x)</td><td>- количество элементов в словаре</td></tr>\r\n<tr><td>y = x.<b>keys</b>()</td><td>- выдаст все ключи</td></tr>\r\n<tr><td>y = x.<b>values</b>()</td><td>- выдаст все values</td></tr>\r\n<tr><td>y = x.<b>items</b>()</td><td>- выдаст список кортежей ключ-значение</td></tr>\r\n<tr><td>\'key\' <b>in</b> x</td><td>- очень быстро проверит, есть ли ключ в словаре</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>y = x.<b>pop</b>(\'key\', \'default value\'</td><td>- вытолкнет value от ключа из словаря. Если такого ключа нет - даст значение по умолчанию (можно не указывать)</td></tr>\r\n<tr><td>y = x.<b>get</b>(\'key\', \'default\')</td><td>- получить value по конкретному key. Если ключа нет - выдаст дефолтное значение (если не указывать будет None)</td></tr>\r\n<tr><td>y = x.<b>setdefault</b>(key, def_value)</td><td>- получить value по конкретному key. Если ключа нет - создать с дефолтным значением и выдать в переменную</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>y = x.<b>copy/deepcopy</b>()</td><td>- копировать словарь</td></tr>\r\n<tr><td>x.<b>update</b>(z)</td><td>- дополнить словарь x ключами-значениями из словаря z. Если значения есть в обоих словарях - записываются из словаря z</td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n#### Крутой способ развернуть словарь (поменять местами keys и values):\r\n\r\n`reversed_dict = {value: key for key, value in dict.items()}                - изящный способ через генератор словаря`\r\n\r\n### OrderedDict\r\n\r\nУпорядоченный словарь - учитывает порядок элементов внутри, но работаем намного медленнее обычных словарей.\r\nНужно импортировать отдельно: `from collections import OrderedDict`','2022-08-02','PYTHON/типы данных/словари|dictionaries',10,3),(14,'Python','Строки|Strings','strings','Итерируемый объект.\r\n*!Строки не изменяются. Все правки приводят к созданию новой строки!*\r\n\r\n### Создание, срезы, конкатенация\r\n\r\n<table>\r\n<tr><td>x = \'Hello world\'</td><td>- создание строки. Можно пустую</td></tr>\r\n<tr><td><b>len</b>(x)</td><td>- выдаст количество символов в строке</td></tr>\r\n<tr><td>x[1:4]</td><td>- строкам доступны все операции со срезами (см. <a href=\"http://rivallar.pythonanywhere.com/page/10/\">Списки</a>)</td></tr>\r\n<tr><td>\'first string \' <b>+</b> \'another string\'</td><td>- склеит две строки в одну новую</td></tr>\r\n<tr><td>\'abc\' <b>*</b> 8</td><td>- новая строка из восьми повторений \'abc\'</td></tr>\r\n</table>\r\n\r\n\r\n### Методы\r\n\r\n<table>\r\n<tr><td>\'@\'.<b>join</b>([\'elem1\', \'elem2\',...])</td><td>- объединит элементы листа в строку. Между элементами будет символ \'@\'</td></tr>\r\n<tr><td>\'a b c d e\'.<b>split</b>(\' \', 2)</td><td>- разобьёт строку на элементы листа. Можно указывать разделитель и кол-во разбитых элементов (тут будет [\'a\', \'b\', \'c d e\'])</td></tr>\r\n<tr><td>x.<b>strip</b>() / .<b>rstrip</b>() / .<b>lstrip</b>()</td><td>- убрать символы пропуска строки в начале и/или конце строки</td></tr>\r\n<tr><td></td><td>Можно задать символы, которые нужно убрать: x.<b>strip</b>(\'bce\') - удалит ВСЕ символы b, c и е из строки. <i>Очень странно работает</i>.</td></tr>\r\n<tr><td>x.<b>find</b>(\'string\', 1, 5) </td><td>- вернёт индекс первого символа первого вхождения подстроки в строку или -1, если такой нет</td></tr>\r\n<tr><td></td><td>1 - индекс, с которого нужно искать, 5 - индекс, до которого нужно искать (<i>не включительно</i>)</td></tr>\r\n<tr><td>x.<b>rfind</b>(\'string\', 1, 5)</td><td>- ищет с конца, индекс выдаст стандартный (<i>не инверсный</i>)</td></tr>\r\n<tr><td>x.<b>index/rindex</b>(\'string\', 1, 5)</td><td>- то же что и find, но если не найдёт, выдаст исключение <b>ValueError</b>, а не -1</td></tr>\r\n<tr><td>x.<b>count</b>(\'string\', 1, 5)</td><td>- выдаст количество вхождений подстроки в строку</td></tr>\r\n<tr><td>x.<b>startswith/endswith</b>(\'string\')</td><td>- выдаст True/False, если строка начинается/заканчивается подстрокой</td></tr>\r\n<tr><td>x.<b>replace</b>(\'old\', \'new\', 3)</td><td>- замена старых символов на новые. Если не указано кол-во - заменит все</td></tr>\r\n<tr><td>x.<b>lower/upper/capitalize/title/swapcase</b></td><td>- capitalize - первый символ строки, title - первый символ каждого слова, swapcase - заглавные в строчные и наоборот</td></tr>\r\n<tr><td>x.<b>expandtabs</b>(10)</td><td>- заменяет табуляцию определённым количеством пробелов</td></tr>\r\n<tr><td>x.<b>ljust/rjust/center</b>(10, \'_\')</td><td>- расширяет строку до заданного количества символов, заполняя недостающую длину справа и/или слева пробелами/указанными символами</td></tr>\r\n<tr><td>x.<b>zfill</b>(10)</td><td>- расширяет ЧИСЛОВУЮ строку нулями слева до заданной длины (10)</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>table = x.<b>maketrans</b>(\'!@#\', \'123\')</td><td>- таблица для метода translate по которой можно заменять сразу много символов за раз (!>1, @>2, #>3)</td></tr>\r\n<tr><td>x.<b>translate</b>(table)</td><td>- заменить много разных символов за раз на другие, согласно таблице table</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>x.<b>isdigit/isalpha/islower/isupper/isspace/isalnum</b>()</td><td>- проверки. isalnum - только буквы и цифры, isspace - пробелы/табы/новая строка</td></tr>\r\n<tr><td></td><br><td></td></tr>\r\n<tr><td>x.<b>encode/decode</b>()</td><td>- перекодировать в/из байт-строки (нужна для работы с хитрыми символами и бинарными файлами)</td></tr>\r\n<tr><td><b>ord</b>(\'single_character\')</td><td>- покажет № символа в Unicode</td></tr>\r\n<tr><td><b>chr</b>(№ symbol)</td><td>- наоборот, покажет символ по номеру Unicode</td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n### Спецсимволы, начинающиеся с \\\\ (экранирование):\r\n\r\n<table>\r\n<tr><td>\\n</td><td>- новая строка</td></tr>\r\n<tr><td>\\t</td><td>- табуляция</td></tr>\r\n<tr><td>\\a</td><td>- звуковой сигнал</td></tr>\r\n<tr><td>\\b</td><td>- backspace</td></tr>\r\n<tr><td>\\f</td><td>- прогон страницы</td></tr>\r\n<tr><td>\\r</td><td>- возврат курсора</td></tr>\r\n<tr><td>\\v</td><td>- вертикальная табуляция</td></tr>\r\n<tr><td>\\155</td><td>- символ в восьмеричной записи ASCII (будет симвло \'m\')</td></tr>\r\n<tr><td>\\x6D</td><td>- символ в шестнадцатиричной записи ASCII (будет симвло \'m\')</td></tr>\r\n</table>\r\n\r\n	\r\n									\r\n	  \r\n		\r\n				\r\n	\r\n					\r\n		\r\n							\r\n\r\n	\r\n					\r\n\r\n	\r\n	\r\n\r\n						\r\n\r\n				\r\n						\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<table>\r\n<tr><td></td><td></td></tr>\r\n</table>','2022-08-02','PYTHON/типы данных/строки|strings',10,3),(15,'Python','f-строка|string interpolation','f-string-interpolation','Позволяют быстро и удобно вставлять в строки переменные/результат работы функций, форматировать и дозаполнять строки символами.\r\n\r\nСамый общий случай: `f\'Hello, {name}!\'`<br>\r\nПример, где в прямо в строке вычисляются какие-то результаты: `f\'Five plus ten is {a + b} and not {2 * (a + b)}.\'`\r\n\r\n\r\n<table>\r\n<tr><td>\"We have {10:<b><</b>8} chickens.\"</td><td>- выровняет число 10 по левому краю (<), потом вставит 8 пробелов (т.к. не указан конкретный символ), потом допишет chickens. </td></tr>\r\n<tr><td>\"We have {10:<b>></b>8} chickens.\"</td><td>- We have, потом 8 пробелов, потом число 10 (выравниваем вправо, т.к. символ >), потом всё остальное</td></tr>\r\n<tr><td>We have {10:<b>^</b>8} chickens.\"</td><td>- We have, 4 пробела, число 10 (выравниваем по центру, т.к. ^), 4 пробела, всё остальное</td></tr>\r\n<tr><td>We have {10:<b>$^</b>8} chickens.\"</td><td>- после двоеточия можно указать символ, которым нужно заполнять пустые места. В этом случае будут не пробелы, а знаки доллара.</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>The temperature is {-5:<b>=</b>8} degrees celsius.</td><td>- равенство для отделения знаков +/- от остального числа. Между знаком и числом 8 пробелов</td></tr>\r\n<tr><td>The temperature is between {-3:<b>+</b>} and {7:<b>+</b>} degrees celsius.</td><td>- оставит минус для отрицательных значений, допишет плюс для положительных</td></tr>\r\n<tr><td>The temperature is between {-3:<b>-</b>} and {7:<b>-</b>} degrees celsius.</td><td>- укажет минус для отрицательных, положительные будут без знака</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>The universe is {13800000000:<b>,</b>} years old.</td><td>- разделит длинное число запятыми через каждые 3 знака для читаемости: 13,800,000,000</td></tr>\r\n<tr><td>The universe is {13800000000:<b>_</b>} years old.</td><td>- разделит нижними подчёркиваниями: 13_800_000_000</td></tr>\r\n<tr><td>\"The price is {45:<b>f</b>} dollars.\"</td><td>- Добавление дробной части. {:<b>f</b>} добавит 6 символов дробной части (по умолчанию), {:<b>.2f</b>} добавит только 2 </td></tr>\r\n<tr><td>\"You scored {0.25:<b>%</b>}\"</td><td>- переведёт дробное число в проценты. По умолчанию добавит 6 знаков после запятой. You scored {:<b>.0%</b>} чтобы было без знаков.</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>The binary version of {5} is {5:<b>b</b>}</td><td>- автоматически переведёт в двоичный формат: 101</td></tr>\r\n<tr><td>\"We have {0b101:<b>d</b>} chickens.\"</td><td>- переведёт число в десятичный формат (0b101 = 5)</td></tr>\r\n<tr><td>\"The octal version of {10} is {10:<b>o</b>}\"</td><td>- восьмеричный формат</td></tr>\r\n<tr><td>\"The octal version of {10} is {10:<b>x</b>}\"</td><td>- шестнадцатеричный формат</td></tr>\r\n<tr><td>\"We have {5:<b>e</b>} chickens.\"</td><td>- научный формат с e+00. Можно {5:E} - в выводе E тоже будет заглавной</td></tr>\r\n<tr><td>{3322:<b>c</b>}</td><td>- конвертирует значение в символ UNICODE</td></tr>\r\n\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>','2022-08-03','PYTHON/типы данных/f-строка|string interpolation',10,3),(16,'Miscellaneous','GIT','git','1. **Установка:** `sudo apt-get install git` (`git --version` чтобы проверить версию гита)\r\n2. **Глобальная настройка:**\r\n\r\n        git config --global user.name \"username\"         - единожды попросит ввести username и почту. Особо нигде не нужно\r\n        git config --global user.mail \"fake@mail.com\"\r\n\r\n3. **Инициализация в проекте**: `git init` чтобы создать скрытую папку .git\r\n\r\n4. **Игнорируем ненужные файлы:** создаём в том же каталоге файл *.gitignore*, куда заносим все файлы и папки, которые не нужно отслеживать. Можно поискать в интернете крутые примеры (позже выложу сюда).\r\n\r\n## Полезные команды:\r\n\r\n<table>\r\n<tr><td><b>git init</b></td><td>- инициализация гита в проекте</td></tr>\r\n<tr><td><b>git status</b></td><td>- статус проекта. Выводит много полезной информации: текущая ветка, что отслеживает, что изменилось и пр. <b>!Используй чаще для проверки!</b></td></tr>\r\n<tr><td>git <b>diff</b> filename</td><td>- откроет vim и покажет отличные от прошлого коммита куски кода</td></tr>\r\n<tr><td>git add <b>-p</b> filename</td><td>- будет спрашивать, <i>какие куски кода из этого файла добавлять в commit</i>, а какие не нужно</td></tr>\r\n    \r\n<tr><td><b>git add .</b></td><td>- добавить файлы для отслеживания. Точка добавит все (кроме тех, что в .gitignore). Можно добавлять конкретные по имени файла/папки</td></tr>\r\n<tr><td><b>git commit -m</b> \"Started project\"</td><td>- <i>Первый</i> коммит с описанием. <i>Это ещё не отправка на сервер, а только снэпшот текущего состояния!</i></td></tr>\r\n<tr><td><b>git commit -am</b> \"Second commit\"</td><td>- Последующие коммиты. Опция <b>-а</b> для коммита всех изменённых файлов. Можно указывать конкретные файлы по-отдельности</td></tr>\r\n<tr><td><b>git log / git log --pretty=oneline</b></td><td>- так ведётся лог. <b>--pretty=oneline</b> для лаконичного однострочного лога</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td><b>git reset --hard XXXXXX</b></td><td>- сброситься до состояния коммита XXXXXX</td></tr>\r\n<tr><td><b>git checkout .</b></td><td>- откатиться до состояния последнего коммита</td></tr>\r\n<tr><td><b>git checkout XXXXXX</b> (первые 6 символов коммита)</td><td>- временно вернуться к состоянию коммита XXXXXX</td></tr>\r\n<tr><td><b>git checkout master</b></td><td>- вернуться обратно к текущему состоянию (в branch master)</td></tr>\r\n<tr><td><b>git checkout -b main</b></td><td>- создаст новую ветку и переключится в неё</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td><b>git remote add origin</b> https://github.com/Username/ProjectName.git</td><td>- создаст переменную <i>origin</i>, чтобы легче было обращаться к нужной репозитории github</td></tr>\r\n<tr><td><b>git push -u origin main</b></td><td>- запушить в конкретную ветку <i>main</i> проекта, который находится в переменной <i>origin</i></td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td><b>git push <b>-f</b></b></td><td>- <b>принудительно</b> запушит локальные изменения, даже если есть конфликты с удалённым репозиторием. Используй <b>осторожно</b>!</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td><b>git push heroku master</b></td><td>- сброс проекта на heroku</td></tr>\r\n<tr><td><b>git branch -M main</b></td><td>- по идее переименует ветку</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td><b>rm -rf .git</b></td><td>- удалить все старые версии проекта</td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n---\r\n\r\nЭта ссылка поможет скачивать отдельные файлы с git-репозиториев вручную. Просто укажи путь до файла и скачай архив: [скачать](https://downgit.github.io)','2022-08-10','MISCELLANEOUS/git',8,4),(17,'Python','Модуль os','modul-os','## Слегка устарел, но до сих пор используется. Более современный инструмент - модуль pathlib.\r\n\r\nТестовая вставка для устранения проблемы с отображением таблиц\r\n\r\n<table>\r\n<tr><td><b>import  os</b></td><td></td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>os.<b>name</b></td><td>- по этой штуке удобно определять тип ОС. Выдаст <i>posix</i> для UNIX и <i>nt</i> для Windows.</td></tr>\r\n<tr><td>os.<b>getcwd</b>()</td><td>- текущая директория</td></tr>\r\n<tr><td>os.<b>curdir</b></td><td>- константа, указывающая на текущий каталог (точка в LINUX)</td></tr>\r\n<tr><td>os.<b>pardir</b></td><td>- константа родительского каталога (\'..\' в linux)</td></tr>\r\n<tr><td>os.<b>listdir</b>(\'path_to_folder\')</td><td>- вывести все папки/файлы в указанном каталоге</td></tr>\r\n<tr><td>os.<b>chdir</b>(\'path_to_folder\')</td><td>- перейти в указанный каталог</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>os.<b>rename</b>(\'path/file_name\', \'new_path/new_filename\')</td><td>- переименовать и/или <b><i>переместить</i></b> файл</td></tr>\r\n<tr><td>os.<b>remove</b>(\'path/file_name\')</td><td>- удалить файл</td></tr>\r\n<tr><td>os.<b>mkir</b>(\'dir_name\')</td><td>- создать каталог</td></tr>\r\n<tr><td>os.<b>makedirs</b>(\'dir_name\')</td><td>- для создания каталога в каталоге в каталоге...</td></tr>\r\n<tr><td>os.<b>rmdir</b>(\'dir_name\')</td><td>- удалить <i>ПУСТОЙ</i> каталог</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>shutil.<b>rmtree</b></td><td>- рекурсивно удаляет целые деревья каталогов</td></tr>\r\n<tr><td>shutil.<b>copytree</b></td><td>- копировать целые деревья</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>os.path.<b>join</b>(\'catalog_1\', \'sub_cat1\', \'file\')</td><td>- построение пути, независимо от рабочей ОС. Для linux выдаст \'catalog_1/sub_cat1/file\'</td></tr>\r\n<tr><td>os.path.<b>split</b>(\'full_path/file.txt\')	</td><td>- вернёт кортеж из пути до файла/крайнего каталога и названия файла/крайнего каталога: (\'full_path\', \'file.txt\')</td></tr>\r\n<tr><td>os.path.<b>basename</b>(\'full_path/catalog\')</td><td>- вернёт имя крайнего каталога/файла (\'catalog\')</td></tr>\r\n<tr><td>os.path.<b>dirname</b>(\'full_path/catalog\')</td><td>- имя пути до крайнего каталога (\'full_path\')</td></tr>\r\n<tr><td>os.path.<b>splitext</b>(\'full_path/file.txt\')</td><td>- кортеж с расширением файла и всем остальным: (\'\'full_path/file\', \'.txt\')</td></tr>\r\n<tr><td>os.path.<b>commonprefix</b>(\'cat1/cat2/subcat1\', \r\n	\'cat1/cat2/cat3/subcat/file.txt\')</td><td>- найдёт общий участок пути для указанных файлов (\'cat1/cat2\')</td></tr>\r\n<tr><td>os.path.<b>expanduser/expandvars</b>(\'$HOME/temp\')</td><td>- позволяет использовать встроенные переменные путей OS/сокращения, введённые пользователем</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>os.path.<b>isfile</b>(\'root/to/file.exe\')</td><td>- проверка на файл</td></tr>\r\n<tr><td>os.path.<b>isdir</b>(\'root/to/file.exe\')</td><td>- проверка на директорию</td></tr>\r\n<tr><td>os.path.<b>exists</b>(\'root/to/file.exe\')</td><td>- существует или нет</td></tr>\r\n<tr><td>os.path.<b>samefile</b>(path1, path2)</td><td>- True, если 2 аргумента указывают на один и тот же файл</td></tr>\r\n<tr><td>os.path.<b>isabs</b>(\'path\')</td><td>- проверка на то, что путь <i>абсолютный</i></td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>os.path.<b>getsize</b>(path)</td><td>- размер файла</td></tr>\r\n<tr><td>os.path.<b>getmtime</b>(path)</td><td>- время изменения файла (в секундах с начала эпохи)</td></tr>\r\n<tr><td>os.path.<b>getatime</b>(path)</td><td>- время обращения к файлу</td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n---\r\n\r\n## os.scandir(path) - итератор всех файлов/папок в директории\r\n\r\nЭтой штукой можно в цикле найти много инфы по содержимому директории:\r\n\r\n    with os.scandir(path) as directory:\r\n        for route in directory:\r\n            print(route.name, route.is_file())\r\n\r\n## os.walk()\r\n\r\nОбход целого дерева: заходит в каждый каталог и выводит для него root и списки всех директорий и файлов\r\n\r\n    for root, dirs, files in os.walk(directory):\r\n        ...','2022-08-10','PYTHON/работа с директориями, файлами и путями к ним/модуль os',11,3),(18,'Python','Модуль glob','glob','## Для поиска файлов по шаблону\r\n\r\n    import glob\r\n\r\n    glob.glob(\'*[0-9, a-z, A-Z].t?p\')          - выдаст список файлов/директорий, удовлетворяющих условию поиска\r\n\r\n- \\* - любое кол-во любых символов\r\n- ?  - один любой символ\r\n- \\[] - один символ из указанной последовательности\r\n\r\n*...когда-нибудь тут будут примеры поиска...*','2022-08-10','PYTHON/работа с директориями, файлами и путями к ним/модуль glob',11,3),(19,'Python','Модуль pathlib','pathlib','## Современный модуль для работы с файлами и директориями\r\n\r\n<table>\r\n<tr><td>import <b>pathlib</b></td><td></td></tr>\r\n<tr><td>cur_path = pathlib.<b>Path</b>()</td><td>- инициализация объекта</td></tr>\r\n<tr><td>cur_path.<b>cwd</b>()</td><td>- текущая директория</td></tr>\r\n<tr><td>cur_path.<b>joinpath</b>(\'cat1\', \'subcat\')</td><td>- собрать путь из указанных подпутей</td></tr>\r\n<tr><td>cur_path / \'cat1\' / \'subcat\'</td><td>- то же самое, что и выше, только удобней</td></tr>\r\n<tr><td>cur_path.<b>cwd().parts</b></td><td>- вернёт кортеж со всеми каталогами на пути</td></tr>\r\n<tr><td>cur_path.<b>name</b></td><td>- имя конечного каталога/файла</td></tr>\r\n<tr><td>cur_path.<b>parent</b></td><td>- весь путь, КРОМЕ конечного каталога/файла</td></tr>\r\n<tr><td>cur_path.<b>suffix</b></td><td>- расширение конечного файла</td></tr>\r\n<tr><td>cur_path.<b>isdir</b>()</td><td>- проверка того, что это директория</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>cur_path.<b>iterdir</b>()</td><td>- итератор со списком всех директорий (как os.scandir()). Пройдёт по директориям и покажет много полезной информации</td></tr>\r\n<tr><td>cur_path.<b>glob</b>(\'*\')</td><td>- встроенный метод <b>glob</b> (аналогично <a href=\"http://rivallar.pythonanywhere.com/page/18/\">glob.glob</a>)</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>old_path.<b>unlink</b>()</td><td>- удалить <b>файл (не каталог!!!)</b></td></tr>\r\n<tr><td>new_path.<b>mkdir</b>(parents=True)</td><td>- создать каталог. <i>parents</i> - для создания промежуточных каталогов</td></tr>\r\n<tr><td>new_path.<b>rmdir</b>()</td><td>- удалить пустую директорию</td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n### Если нужно переименовать/переместить файл:\r\n\r\n    old_path = Path(\'real_path_name\')\r\n    new_path = Path(\'new_name\')\r\n    old_path.rename(new_path)\r\n\r\n### Запись в/чтение из файла:\r\n\r\n<table>\r\n<tr><td>from pathlib import Path</td><td></td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>p_text = Path(\'file_name\')</td><td></td></tr>\r\n<tr><td>p_text.<b>write_text</b>(\'string\')</td><td>- !Нельзя дОзаписывать! Стирает старый текст</td></tr>\r\n<tr><td>p_text.<b>read_text</b>()</td><td></td></tr>\r\n<tr><td>p_text.<b>write_bytes</b>(b\'Bytes data\')</td><td></td></tr>\r\n<tr><td>p_text.<b>read_bytes</b>()</td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>','2022-08-10','PYTHON/работа с директориями, файлами и путями к ним/модуль pathlib',11,3),(20,'Python','Запись-чтение файла','','## Контекстный оператор with:\r\n\r\nРекомендуется использовать его - сам позаботится о закрытии файла.\r\n\r\n    with open(\'path_to_file\', \'r\',           - r - чтение (по умолчанию, можно не указывать), w - запись начисто (удалит всё что было), \r\n            encoding=\"UTF-8\") as file:         а - дописать к уже имеющемуся, encoding - необязательный параметр для кодировки\r\n\r\n        line = file.readline()               - прочитать одну строку файла. В конце вернёт пустую строку \"\"\r\n        lines = file.readlines()             - список из всех строк в файле\r\n        file.write(\'string\')                 - записать строку в файл !!!Символ новой строки НЕ добавится\r\n        file.writelines([list_of_strings])   - запишет список строк !!!Символ новой строки между строчками НЕ добавится\r\n\r\n## Метод с закрытием файла вручную:\r\n\r\nНе рекомендуется использовать, т.к. файл автоматически не закрывается и в случае краша программы можно потерять данные\r\n\r\n    file = open(r\'path\\to\\file\', \'r\',	     - открыть без менеджера контекста. r\' - raw-строка, не триггерит спецсимволы\r\n		newline=\'\\n\')		     - можно явно указать символ, который будет считаться новой строкой, можно указать кодировку\r\n\r\n    file.read()                              - вычитать файл. !Читает только 1 раз!(двигает курсор от начала в конец документа)\r\n    file.seek(0)                             - переместить курсор в заданную позицию (0 - в начало файла)\r\n    file.flush()                             - сохранить данные в HDD без закрытия файла\r\n    file.close()			     - закрыть вручную и сохранить данные\r\n\r\n## Работаем с файлами байтов:\r\n\r\n    file = open(\'file\', \'rb\')                - rb - читаем не как строку, а байты\r\n    header = file.read(4)		     - прочитать первые 4 байта\r\n    body = file.read()			     - прочитать всё целиком','2022-08-11','PYTHON/работа с директориями, файлами и путями к ним/запись-чтение файла',11,3),(21,'Python','Управление вводом и выводом','','Иногда есть необходимость изменить стандартные ввод/вывод python. Этим занимается модуль ***sys***.\r\nНапример можно выводить ошибки в отдельный файл или попринтить туда же результаты. Или считать данные из файла.\r\n\r\n    import sys\r\n    input(\'Hint message: \')                             - приглашение ввести строковую информацию с клавиатуры\r\n\r\n    sys.stdout                                          - стандартный поток вывода. Можно переназначить. Есть методы sys.stdout.write/writelines() ИЛИ print()\r\n    \r\n    f = open(\'file.txt\' , \'w\')\r\n    sys.stdout = f                                      - назначить запись в f\r\n    sys.stdout.writelines([\'lines\'])                    - работает аналогично другим writelines\r\n  \r\n    sys.stdout = sys.__stdout__	                        - так можно вернуть стандартный вывод обратно на командную строку\r\n\r\n    sys.stderr                                          - cтандартный поток для ошибок. Можно переназначить. Методы те же, что и для stdout\r\n    sys.stdin                                           - стандартный поток ввода. Можно переназначить. Методы sys.stdin.read/readline/readlines()\r\n\r\n### Забавный способ принтить сразу в файл:\r\n\r\n    print(\'string\', file=f)                             - параметр файл укажет куда записать результат команды print','2022-08-12','PYTHON/управление вводом и выводом',7,4),(22,'Python','Модули pickle и shelve','pickle-shelve','## Модули для хранения данных на HDD в стиле python-словарей.\r\n\r\n### Модуль pickle\r\n\r\nПо сути дамп. Записывает всё в байтах. Обычно используется для хранения снэпшотов состояния чего-нибудь.\r\n\r\n    import pickle\r\n\r\n    file = open(\'dump_file\', \'wb\')                          - !!!wb - писать байты\r\n    a = {1:1, 2:[1, 2], 3:\'123\', 4:\'anything\'}              - делаем самый обычный словарь с любыми данными\r\n    pickle.dump(a, file)                                    - сначала что дампим, потом куда\r\n    file.close()                                            - !!! не забыть закрыть файл\r\n\r\n    file = open(\'dump_file\', \'rb\')                          - !!! читать байты\r\n    a = pickle.load(file)                                   - непосредственно выгрузка (странная, выгружает как генератор - по одному значению каждый раз)\r\n\r\n### Модуль shelve\r\n\r\nЧистый python-словарь на диске. Есть **ограничение** - *ключами могут быть только строки*. Много весит, мусорит разными файлами, но очень удобный.\r\n\r\n    import shelve\r\n\r\n    book = shelve.open(\'filename\')                          - открыть/создать файл на диске\r\n    book[\'string\'] = (\'data\', \'to\', \'keep\', 123, [])        - записать что-то в файл. Ключом может быть только строка!\r\n    book.close()                                            - обязательно закрыть файл\r\n\r\n    book = shelve.open(\'filename\')                          - считать с файла на диске инфу по ключу\r\n    book[\'string\']','2022-08-12','PYTHON/модули pickle и shelve',7,4),(23,'Miscellaneous','Docker','docker','***Docker*** — программное обеспечение для автоматизации развёртывания и управления приложениями в средах с поддержкой контейнеризации, контейнеризатор приложений. Позволяет «упаковать» приложение со всем его окружением и зависимостями в контейнер, который может быть развёрнут на любой Linux-системе, а также предоставляет набор команд для управления этими контейнерами.\r\n\r\nДокументацию и образы можно найти на сайте [dockerhub](https://hub.docker.com) \r\n\r\n## Немного полезных команд:\r\n\r\n<table>\r\n<tr><td>docker <b>images</b></td><td>- посмотреть свои образы</td></tr>\r\n<tr><td>docker <b>image rm</b> id-изображения</td><td>- удалить конкретный image</td></tr>\r\n<tr><td>docker <b>ps</b></td><td>- активные контейнеры с кучей полезной инфы, включая аптайм и порты</td></tr>\r\n<tr><td>docker <b>ps -a</b></td><td>- покажет даже неактивные контейнеры</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>docker <b>build</b> -t name .</td><td>- создать контейнер. -t для указания его тэга (имени), точка указывает на текущую директорию (т.е. можно указывать расположение)</td></tr>\r\n<tr><td>docker <b>run</b> --name \'container_name\' image<br>\r\ndocker <b>run --name \'container_name\' -p 8000:8000 -d image_name</b></td><td>- команда для запуска контейнера с <b>одним</b> образом. Можно указывать кучу дополнительных параметров</td></tr>\r\n<tr><td>docker <b>container rm</b> cont_name</td><td>- удалить контейнер</td></tr>\r\n<tr><td><br></td><td></td></tr>\r\n<tr><td>docker-compose <b>build</b></td><td>- команда для создания сразу нескольких образов, которые задумывается запускать в одном контейнере</td></tr>\r\n<tr><td>docker-compose <b>up</b></td><td>- команда для запуска контейнера с несколькими образами. Также <i>автоматически обновляет файлы в контейнере</i>, если они обновились на локальной машине. <b>ctrl+c</b> чтобы остановить контейнер</td></tr></tr>\r\n<tr><td>docker compose <i>-f docker-compose.yml -f docker-compose.postgres.yml</i> <b>up -d</b></td><td>- когда нужно указать свой <b>override-файл</b></td></tr>\r\n    <tr><td><br></td></tr>\r\n    \r\n<tr><td>docker-compose <b>run</b><br>\r\ndocker-compose <b>run --rm app django-admin startproject proj_name .</b></td><td>- ещё одна команда для запуска контейнеров. В отличие от предыдущей позволяет запускать one-time команды при запуске. В этом примере мы одновременно с запуском контейнера стартуем новое django-приложение в нём. Получаем image с пустым приложением, который можно переиспользовать.</td></tr>\r\n<tr><td>docker <b>exec -it</b> app_name_container <b>/bin/bash</b><br>\r\ndocker <b>exec -it</b> app_name_container <b>sh</b></td><td>- it это interactive terminal. Т.е. запускаем терминал контейнера на ПК.<br><i>Для разных сборок команда разная!</i></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n\r\n## .dockerignore\r\n\r\nАналогично <i>.gitignore</i> - хранит в себе файлы, которые должны быть проигнорированы командами docker. Сюда обычно включают файлы вирт. среды, секреты, git:\r\n\r\n> <pre>\r\nVenv\r\n.env\r\n.git\r\n> </pre>\r\n\r\n\r\n\r\n---\r\n\r\n## Запуск контейнера с одним образом\r\n\r\n*!Все операции делаем в главной папке проекта!*\r\n\r\nНужно собрать все зависимости и установленные пакеты: `pip freeze > requirements.txt`\r\n\r\nАналогично *.gitignore* создаём файл-игнор для docker **.dockerignore.** и потихоньку его заполняем:\r\n\r\n>*/venv                         - игнорируем папку виртуальной среды\r\n\r\nСоздаём **Dockerfile** - текстовый файл без расширения и заполняем его:\r\n\r\n><table>\r\n><tr><td><b>FROM</b> python:3.8-slim-buster</td><td>- лёгкая OS Linux с предустановленным питоном</td></tr>\r\n><tr><td><b>WORKDIR</b> /app_name</td><td>- папка проекта</td></tr>\r\n><tr><td><b>COPY</b> requirements.txt requirements.txt</td><td>                                         - очень странно копируем в папку требования</td></tr>\r\n><tr><td><b>RUN</b> pip3 install -r requirements.txt</td><td>                                           - устанавливаем всё из требований</td></tr>\r\n><tr><td><b>COPY</b> . .</td><td>                                                                       - так копируются все файлы проекта</td></tr>\r\n><tr><td><br></td></tr>\r\n><tr><td><b>CMD</b> [\'python3\', \'manage.py\', \'runserver\', \'0.0.0.0:8000\']</td><td>                      - это для доступа к приложению извне контейнера</td></tr>\r\n></table>\r\n\r\n**Работаем с командной строкой:**\r\n\r\n><table>\r\n><tr><td>docker build --tag python-django .</td><td>- сделать image tag для названия. Точка указывает на текущую директорию</td></tr>\r\n><tr><td>docker run --publish 8000:8000 python-django</td><td>- сделать контейнер (run)<br>(мапим порты, чтобы контейнер был доступен извне по такому \r\n																		же порту (--publish))</td></tr>\r\n><tr><td></td><td></td></tr>\r\n></table>\r\n\r\n---\r\n\r\n## Multi-stage билды для уменьшения размера образа и ускорения pipeline`ов\r\n\r\n\r\n> <pre>\r\n<i>\\# Stage 1: Builder</i>\r\n<b>FROM python:3.11-slim AS <u>builder</u></b>                           - это промежуточный образ. Он нужен только чтоб установить нужные зависимости и перетянуть их в финальный\r\nWORKDIR /app\r\n<br>\r\n<i>\\# Create a virtual environment</i>\r\n<b>RUN python -m venv .venv</b>                                    - создаём вирт. окружение в контейнере\r\n<b>ENV PATH=\"/app/.venv/bin:$PATH\"</b>                             - вот так его активируем\r\n<br>\r\n<i>\\# Copy requirements and install dependencies</i>\r\nCOPY requirements.txt .\r\n<b>RUN pip install --no-cache-dir -r requirements.txt</b>          - устанавливаем зависимости в вирт. окружение\r\n<br>\r\n<i>\\# Stage 2: Final Image</i>\r\nFROM python:3.11-slim\r\nWORKDIR /app\r\n<br>\r\n<i>\\# Copy the virtual environment from the builder stage</i>\r\n<b>COPY --from=<i>builder</i> /app/.venv .venv</b>                        - копируем папку с вирт. окружением с одного контейнера в другой\r\nENV PATH=\"/app/.venv/bin:$PATH\"                             - тут тоже активируем вирт. окружение\r\n<br>\r\n<i>\\# Copy the application code</i>\r\nCOPY main.py .\r\n<br>\r\n<i>\\# Expose the port and set entrypoint</i>\r\nEXPOSE 8088\r\nENTRYPOINT [\"python\"]\r\nCMD [\"main.py\"]\r\n> </pre>\r\n\r\n### Пример с новым менеджером пакетов UV - он намного быстрее устанавливает зависимости\r\n\r\n> <pre>\r\nFROM python:3.12-<b>alpine</b> AS build                            - alpine - самые легковесные образы, но и самые урезанные. Некоторые пакеты на них поставить проблематично\r\n<br>\r\n<b>COPY --from=ghcr.io/astral-sh/<u>uv:latest</u> /uv /uvx /bin/</b>      - подтягиваем в промежуточный образ менеджер пакетов uv самой свежей версии\r\nENV VIRTUAL_ENV=/app/venv \\                                 - настраиваем вирт. окружение\r\n    PATH=\"/app/venv/bin:$PATH\"\r\nCOPY ./pyproject.toml /app/pyproject.toml                   - для проектов на uv зависимости хранятся в .toml-файле, но можно и стандартный requirements.txt\r\nWORKDIR /app\r\n<b>RUN uv venv</b> venv                                            - создаём вирт. окружение\r\n<b>RUN uv pip install</b> -r pyproject.toml                        - устанавливаем зависимости\r\n<br>\r\nFROM python:3.12-alpine                                     - лучше использовать одинаковые образы на двух этапах\r\n<b>COPY --from=build</b> /app/venv /app/venv                       - копируем окружение из первого этапа\r\nENV PATH=\"/app/venv/bin:$PATH\"                              - активируем вирт. окружение\r\nCOPY ./main.py .\r\nEXPOSE 8088\r\nCMD [\"python\", \"main.py\"]\r\n> </pre>\r\n\r\n---\r\n\r\n## Контейнер с несколькими образами (приложение и БД)\r\n\r\n*Более навороченный вариант, который позволит добавлять в контейнер несколько образов (например django_app, PostgreSQL и redis),\r\nа также автоматически обновлять файлы в контейнере при изменении их на компьютере*\r\n\r\nНужно собрать все зависимости и установленные пакеты: `pip freeze > requirements.txt`\r\n\r\nМожно создать **.dockerignore.**\r\n\r\n**Создаём Dockerfile**:\r\n\r\n>*Часть строк переедет в дополнительный файл docker-compose.yml*\r\n\r\n><b>FROM</b> python:3.8-slim-buster				\r\n><b>ENV PYTHONUNBUFFERED=1</b>	*- чтобы передавать всё (например логи) real-time, иначе передаётся пачками, когда буфер заполнится*				\r\n><b>WORKDIR</b> /app_name						\r\n><b>COPY</b> requirements.txt requirements.txt	\r\n><b>RUN</b> pip3 install -r requirements.txt	\r\n\r\n**Создаём ещё один файл docker-compose.yml** - в нём описываем, какие сервисы (БД, redis и пр) будут в контейнере\r\n\r\n*!Немного о синтаксисе файла:*\r\n\r\n- в файле не работает табуляция - нужно пользоваться исключительно пробелами (лучше всего 2 пробела для каждого уровня отступа)\r\n- проблемы с кодировками - лучше всего писать всё руками, благо файл небольшой. Есть вероятность, что файл затупит и не признает какую-нибудь команду.\r\n\r\n><pre>\r\n<b>version:</b> \'3.8\'                                                         - версия composer`a\r\n<b>services:</b>                                                              - далее будут описаны наши сервисы, такие как приложение, база данных и пр.<br>\r\n<b><i>версия для postgres</i></b><br>\r\n  <b>db</b>:                                                                  - отдел под БД первый, т.к. от его работы зависит работа приложения ниже. Название любое. \r\n    <b>image:</b> postgres                                                    - так говорим включить в билд образ базы данных\r\n    <b>volumes:</b>                                                           - биндим БД внутри контейнера и папку на локальной машине, чтобы БД сохранилась даже если удалят контейнер\r\n      - ./data/db/:/var/lib/postgresql/data                            - справа до двоеточия локальная папка, слева - то что в контейнере\r\n    <b>environment:</b>                                                       - стандартные настройки postgres, аналогично django\r\n      - POSTGRES_DB=postgres\r\n      - POSTGRES_USER=username\r\n      - POSTGRES_PASSWORD=${password}                                         - так можно передавать пароли и другие секреты. !Переменная password <u>должна лежать в файлике .env</u>!\r\n    <b>container_name:</b> postgres_db                                        - имя контейнера<br>\r\n<b><i>версия для MySQL (!в Dockerfile указываем образ ОС python:3.8!)</i></b><br>\r\n  <b>db</b>:\r\n    <b>image:</b> mysql:5.7\r\n    <b>environment:</b>\r\n      MYSQL_DATABASE: \'django-app-db\',\r\n      MYSQL_ALLOW_EMPTY_PASSWORD: \'true\'                               - можно разрешать коннектиться к базе без пароля\r\n    <b>volumes:</b>\r\n      - ./data/mysql/db:/var/lib/mysql\r\n<br>\r\n  <b>app:</b>                                                                 - начинаем описывать приложение на django\r\n    <b>build:</b> .                                                           - так запускаем сборку. Точка - местоположение=текущая папка\r\n    <b>volumes:</b>                                                           - как и с базой, так храним файлы локально на компьютере\r\n      - .:/app_name\r\n    <b>ports:</b>                                                             - указываем порты для проброса с пк внутрь контейнера\r\n      - 8000:8000\r\n    <b>image:</b> app:app_name                                                - тэг-имя для образа (такой же как в Dockerfile)\r\n    <b>env_file</b>: .env                                                     - чтобы внутри image можно было использовать файл с переменными окружения\r\n    <b>container_name:</b> app_name_container                                 - имя контейнера\r\n    <b>command:</b> python manage.py runserver 0.0.0.0:8000                   - можно давать команды, которые исполнятся автоматически при поднятии контейнера (запустим приложение на 8000 порту)\r\n    <b>depends_on:</b>                                                        - список зависимостей. Это приложение запустится только если будут работать зависимости ниже\r\n      - db\r\n</pre>\r\n\r\n**Не забываем про настройки базы данных в <i>settings.py</i>**\r\n\r\n<pre>\r\n<b>#для postgres</b>\r\nDATABASES = {\r\n	\'default\': {\r\n		\'ENGINE\': \'django.db.backends.postgresql\',\r\n		\'NAME\': \'postgres\',\r\n		\'USER\': \'username\',\r\n		\'PASSWORD\': \'password\',\r\n		\'HOST\': \'db\',												- такоей же как и в docker-compose.yml\r\n		\'PORT\': 5432,												- это стандартный порт для postgres\r\n		}\r\n	}\r\n\r\n<b>#для MySQL</b>\r\nDATABASES = {\r\n	\'default\': {\r\n		\'ENGINE\': \'django.db.backends.mysql\',\r\n		\'NAME\': \'django-app-db\',\r\n		\'USER\': \'root\',												- похоже потому что мы разрешили пустой пароль\r\n		\'PASSWORD\': \'\',\r\n		\'HOST\': \'db\',												- такой же как и в docker-compose.yml\r\n		\'PORT\': 3306,												- это стандартный порт для MySQL\r\n		}\r\n	}\r\n</pre>\r\n\r\n**Работаем с командной строкой:**\r\n\r\n<pre>docker-compose build              - собрать контейнер</pre>\r\n<pre>docker-compose up                 - запустить контейнер (обновит его содержимое, если что-то поменялось в volumes компьютера)</pre>\r\n<pre>docker-compose run ...            - запустить и дать какие-нибудь команды в процессе</pre>\r\n\r\n---\r\n\r\n### Пример настройки контейнера с django-app, postgres, celery и redis\r\n\r\n**Dockerfile**:\r\n\r\nМы будем использовать другой образ ОС - **python:3.8-alpine**, он нужен для установки необходимых зависимостей\r\n\r\n> <pre>\r\n<b>FROM</b> python:3.8-alpine												\r\n<b>ENV PYTHONUNBUFFERED=1</b>\r\n<b>RUN</b> apk update && apk add postgresql-dev gcc python3-dev musl-dev			- установка зависимостей для postgres											\r\n<b>WORKDIR</b> /app_name													\r\n<b>COPY</b> requirements.txt requirements.txt								\r\n<b>RUN</b> pip3 install -r requirements.txt\r\n> </pre>\r\n\r\n**Примерный файл ***requirements.txt***:**\r\n\r\n> <pre>\r\nasgrief==3.3.1\r\nDjango==3.1.7\r\npytz==2021.1\r\nsqlparse==0.4.1\r\npsycopg2>=2.8											- благодаря установке зависимостей выше нам не нужна binary-версия\r\nredis>=3.5\r\ncelery>=5.0\r\n> </pre>\r\n\r\n**docker-compose.yml:**\r\n\r\n> <pre>\r\n<b>version:</b> \'3.8\'\r\n<b>services:</b>\r\n  <b>db:</b>						                                   - !БД лучше ставить первой, т.к. от неё зависит приложение\r\n    <b>image:</b> postgres\r\n    <b>volumes:</b>\r\n      - ./data/db/:/var/lib/postgresql/data\r\n    <b>environment:</b>\r\n      - POSTGRES_DB=postgres\r\n      - POSTGRES_USER=username\r\n      - POSTGRES_PASSWORD=password\r\n    <b>container_name:</b> postgres_db\r\n    <b>healthcheck</b>:                                                                    - условия проверки <b>service_healthy</b> для зависимых приложений\r\n      <b>test: [ \"CMD\", \"mysqladmin\" ,\"ping\", \"-h\", \"localhost\" ]</b>                      - просто пинг. Если пинг есть - база работает. +[\'-u\', \'root\', \'-p$$MYSQL_ROOT_PASSWORD\'] если база запоролена\r\n      timeout: 20s\r\n      retries: 10<br>\r\n  <b>app:</b>\r\n    <b>build:</b> .\r\n    <b>volumes:</b>\r\n      - .:/app_name\r\n    <b>ports:</b>\r\n      - 8000:8000\r\n    environment:\r\n        - DEBUG=1\r\n        - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1\r\n        - CELERY_BROKER=redis://redis:6379/0\r\n        - CELERY_BACKEND=redis://redis:6379/0\r\n    <b>image:</b> app:app_name\r\n    <b>container_name:</b> app_name_container\r\n    <b>command:</b> python manage.py runserver 0.0.0.0:8000\r\n    <b>depends_on:</b>				                                   - указываем зависимость от БД. Это нужно , что бы база загрузилась перед приложением\r\n      db:\r\n        <b>condition</b>: service_healthy                                          - проверка, что сервис работает. Нужно указывать эту проверку в разделе сервиса<br>\r\n  <b>redis:</b>					                                       - настройки для redis\r\n    <b>image:</b> redis:alpine\r\n    <b>container_name:</b> redis<br>	\r\n  <b>celery:</b>\r\n    <b>restart:</b> always			                                   - будет сам рестартиться при ошибках\r\n    <b>build:</b>\r\n      <b>context:</b> .				                                   - нужно указать местоположение Dockerfile\r\n    <b>command:</b> celery -A app_name worker -l INFO                  - запуск celery и вывод информации по статистике в терминал (хорошо для траблшутинга, плохо для продакшн) (можно DEBUG вместо INFO)\r\n    <b>volumes:</b>\r\n      - .:/app_name\r\n    <b>container_name:</b> celery\r\n    <b>env_file</b>:                                                              - креды из файла окружения\r\n        - .env.docker\r\n    <b>depends_on:</b>\r\n      - db\r\n      - redis\r\n      - app<br>\r\n  <b>celery-beat</b>:                                                           - для запуска тасков по времени (что-то типа <i>crontab</i>)\r\n      <b>restart</b>: always\r\n      <b>build</b>:\r\n        context: .\r\n      <b>command</b>: celery -A autosaloon <b>beat</b> -l INFO                         - не <i>worker</i>, а <i>beat</i>!\r\n      volumes:\r\n        - .:/autosaloon_app\r\n      container_name: celery-beat\r\n      env_file:\r\n        - ./.env\r\n      depends_on:\r\n        - db\r\n        - redis\r\n        - app<br>\r\n  <b>flower</b>:                                                                - полезная утилита для мониторинга состояния и статистики по таскам\r\n      <b>image</b>: mher/flower:0.9.7\r\n      <b>command</b>: [\'flower\', \'--broker=redis://redis:6379\', \'--port=5555\']\r\n      ports:\r\n        - \"5555:5555\"                                                    - стандартный порт для flower\r\n      depends_on:\r\n        - celery\r\n> </pre>\r\n\r\n<hr>\r\n\r\n## Один docker-compose для разных настроек проекта\r\n\r\nИногда один проект запускается на разных окружениях для разных целей: для прода, для разработки, для тестирования. В таком случае могут использоваться разные настройки в образах и даже разные образы. <i>Например для CodeLib есть возможность выбрать разные базы данных: MySQL или Postgres</i>.\r\nДля этого есть доп. файлы для <i>docker-compose.yml</i> - <i>docker-compose.override.yml</i>:\r\n> Этот файл считывается автоматически (если он есть) и в итоге дополняет/перезаписывает основной файл. Можно задать несколько таких файлов со своими названиями и в команде явно указать, какие нужно будет считывать. Таким образом можно менять настройки/контейнеры для проекта всего одной командой.\r\n\r\n#### В качестве примера настройки CodeLib - в разном окружении использую разные БД.\r\n\r\n**docker-compose.yml** - тут остались только основные настройки, которые используются во вех окружениях.\r\n\r\n\r\n\r\n> <pre>\r\nversion: \'3.8\'\r\nservices:                                                             - оставляем только django и то не весь\r\n  app:\r\n    build: .\r\n    volumes:\r\n      - .:/codelib_app\r\n    ports:\r\n      - 8000:8000\r\n    image: app:codelib_app\r\n    container_name: codelib_app_container\r\n    command: python manage.py runserver 0.0.0.0:8000\r\n> </pre>\r\n\r\n\r\n\r\n**docker-compose.override.yml** - настройки для MySQL. Этот файл считается по умолчанию вместе с docker-compose\r\n\r\n\r\n> <pre>\r\nversion: \'3.8\'\r\nservices:\r\n  db:                                                                 - добавляем базу данных по умолчанию                                                      \r\n    image: mysql:8\r\n    environment:\r\n      MYSQL_DATABASE: \'codelib-app-db\'\r\n      MYSQL_ALLOW_EMPTY_PASSWORD: \'true\'\r\n    volumes:\r\n      - ./data/mysql/db:/var/lib/mysql\r\n    healthcheck:\r\n      test: [ \"CMD\", \"mysqladmin\" ,\"ping\", \"-h\", \"localhost\" ]\r\n      timeout: 20s\r\n      retries: 10\r\n  app:                                                                - и настройки django, которые завязаны к бд\r\n    depends_on:\r\n      db:\r\n        condition: service_healthy\r\n> </pre>\r\n\r\n\r\n\r\n**docker-compose.postgres.yml** - настройки для Postgres.<br>\r\n\r\n\r\n> <pre>\r\nversion: \'3.8\'\r\nservices:\r\n  app:                                                                - настройки django. Возможно важен порядок, т.к. в обратном случае через pycharm были проблемы с коннектом к БД\r\n    depends_on:\r\n      - db\r\n  db:                                                                 - альтернативная БД\r\n    image: postgres\r\n    volumes:\r\n      - ./data/postgres/db/:/var/lib/postgresql/data\r\n    environment:\r\n      POSTGRES_DB: \"postgres\"\r\n      POSTGRES_USER: \'post_user\'\r\n      POSTGRES_PASSWORD: \"post_password\"\r\n    container_name: postgres_db\r\n> </pre>\r\n\r\n<i>!!!Когда нужен postgres, будем давать команду <b>`docker compose -f docker-compose.yml -f docker-compose.postgres.yml up -d`</b>, чтобы применились эти настройки, а не по умолчанию настройки MySQL.</i>\r\n\r\n---\r\n\r\n### Пример docker-compose для MongoDB:\r\n\r\n\r\n\r\n> <pre>\r\n  database:\r\n      image: mongo\r\n  ports:\r\n      - \"27017\"                                             - стандартный порт Mongo. Мы его просто указываем, не пробрасывая вовне\r\n  volumes:\r\n      - <b>data</b>:/data/db\r\nvolumes:                                                    - подключаем постоянный том данных, который хранится в папке на хосте\r\n  data:\r\n> </pre>\r\n\r\n---\r\n\r\n### Docker для Kafka\r\n\r\n\r\n\r\n> <pre>\r\nzookeeper:\r\n    image: confluentinc/cp-zookeeper:7.3.2\r\n    container_name: zookeeper\r\n    environment:\r\n      ZOOKEEPER_CLIENT_PORT: 2181\r\n      ZOOKEEPER_TICK_TIME: 2000\r\n<br>\r\n  broker:\r\n    image: confluentinc/cp-kafka:7.3.2\r\n    container_name: broker\r\n    ports:\r\n      - \"9092:9092\"\r\n    depends_on:\r\n      - zookeeper\r\n    environment:\r\n      KAFKA_BROKER_ID: 1\r\n      KAFKA_ZOOKEEPER_CONNECT: \'zookeeper:2181\'\r\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT\r\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092\r\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\r\n      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\r\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\r\n      KAFKA_LOG_RETENTION_MS: 60000                         - настройки длительности хранения лога\r\n      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 10000          - как часто проверять файлы лога на просрочку\r\n> </pre>\r\n\r\n---\r\n\r\n### Docker для NGINX\r\n\r\n\r\n\r\n> <pre>\r\nversion: \'3.8\'\r\nservices:\r\n  <b>app</b>:\r\n    build: .\r\n    volumes:\r\n      - .:/autosaloon_app\r\n    image: app:autosaloon_app\r\n    env_file:\r\n      - ./.env\r\n    ports:\r\n      - \"8000:8000\"\r\n    container_name: autosaloon_app_container\r\n    #command: [\"python\",  \"manage.py\",  \"runserver\",  \"0.0.0.0:8000\"]\r\n    <b>entrypoint</b>: ./entrypoint.sh                                            - иногда при запуске нужно дать много команд/подготовится. Тогда пишут <i>скрипт</i>\r\n<br>\r\n  <b>nginx</b>:\r\n    <b>image</b>: nginx:1.19.0-alpine\r\n    <b>ports</b>:\r\n      - <b>\"80:80\"</b>                                                            - стандартный порт для NGINX, его <u>нужно всегда открывать для внешнего мира</u>\r\n    <b>volumes</b>:\r\n      - <b>./nginx:/etc/nginx/conf.d/</b>                                         - <i>обязательно</i> нужно указать конфиг для nginx\r\n      - ./static:/autosaloon/static\r\n    depends_on:\r\n      - app\r\n    restart: always\r\n> </pre>','2022-08-18','MISCELLANEOUS/docker',8,4),(24,'Databases','Изменение данных','izmenenie-dannykh','Тут будут собраны команды по созданию/удалению/изменению данных. SELECT-запросы ищи в соседней теме.\r\n\r\n**! В SQL language можно делать комментарии:** `/*................*/`\r\n\r\n## Создание таблиц и типы полей\r\n\r\n> <pre>\r\n<b>CREATE TABLE</b> <i>table_name</i>(\r\n	<i>table_name_id</i> <b>INT PRIMARY KEY AUTO_INCREMENT,</b>		    # уникальный id, который будет задаваться автоматически, увеличиваясь в значении (числе)\r\n	<i>row1_name1</i> <b>VARCHAR(30),</b>								# строка макс 30 символов\r\n	<i>row_name2</i> <b>DECIMAL(8, 2),</b>								# число на 8 символов + 2 после запятой\r\n	<i>row_name3</i> <b>INT NOT NULL,</b>								# <b>NOT NULL</b> - поле не может быть пустым, выдаст ошибку\r\n	<b>FOREIGN KEY</b> (<i>row_name3</i>) <b>REFERENCES</b> \r\n		<i>another_table(row_name_of_other_teble)</i>			 # внешний ключ на главную таблицу\r\n		<b>ON DELETE</b> CASCADE/SET NULL/SET DEFAULT/RESTRICT   # указывает, что делать с записью, если в главной таблице удалят ключ \r\n														  <b>CASCADE</b> - удалит запись и из подчинённой таблицы, <b>RESTRICT</b> - запретит удаление в главной\r\n	                                           );\r\n> </pre>\r\n\r\n**Можно создавать новые таблицы запросами из других таблиц. Вот пара вариантов. Какой-то сработает:**\r\n\r\n> <pre>\r\n<b>CREATE TABLE</b> query_in(<b>SELECT</b> name <b>FROM</b> table)			\r\n<b>CREATE TABLE</b> <i>query_in</i> <b>AS SELECT</b> name FROM table			\r\n> </pre>\r\n\r\n---\r\n\r\n## Добавляем/изменяем значения в таблицах\r\n\r\n**Добавление:**\r\n\r\n> <pre>\r\n<b>INSERT INTO</b> table_name(row1_name, row2_name) <b>VALUES</b> (value_for_row1, value_for_row2);            # <b>INTO</b> можно не указывать, строковые значения в кавычках!, значений может быть несколько\r\n<br>\r\n<b>INSERT INTO</b> book (title, author, price, amount)\r\n<b>VALUES</b>\r\n    (\'Война и мир\',\'Толстой Л.Н.\', 1070.20, 2),\r\n    (\'Анна Каренина\', \'Толстой Л.Н.\', 599.90, 3);\r\n<br>\r\n<b>INSERT INTO</b> book (title, author, price, amount) <b>SELECT</b> title, author, price, amount 	       # добавление некоторых значений из одной таблицы в другую (вместо <b>VALUES</b> идёт <b>SELECT</b>)\r\n	<b>FROM</b> supply <b>WHERE</b> author <b>NOT IN</b> (\'Булгаков М.А.\', \'Достоевский Ф.М.\');\r\n<br>\r\n<b>INSERT INTO</b> buy(buy_description, client_id) <b>SELECT</b> <i>\'Связаться со мной по вопросу доставки\'</i>, 	# добавление конкретного значения через <b>SELECT</b>, второе берётся из другой таблицы\r\n	client_id <b>FROM</b> client <b>WHERE</b> name_client = \'Попов Илья\';\r\n> </pre>\r\n\r\n**Изменение:**\r\n\r\n> <pre>\r\n<b>UPDATE</b> table_book <b>SET</b> price = 0.7 * price;                                           # ВСЕ цены будут уменьшены в 0.7 раз\r\n<b>UPDATE</b> table_book <b>SET</b> price = 0.7 * price <b>WHERE</b> amount < 5;                          # уменьшит только цены, удовлетворяющие условию\r\n<br>\r\n<b>UPDATE</b> таблица <b>SET</b> поле1 = выражение1, поле2 = выражение2                            # обновляем сразу несколько полей таблицы\r\n<br>\r\n<b>UPDATE</b> book, supply <b>SET</b> book.amount = book.amount + supply.amount                    # используем сразу несколько таблиц\r\n	<b>WHERE</b> book.title = supply.title <b>AND</b> book.author = supply.author;                 # имя_таблицы.поле, обязательно <b>WHERE</b>\r\n<br>\r\n<b>UPDATE</b> applicant <b>INNER JOIN</b> (<b>SELECT</b>...) tempo <b>USING</b>...<b>SET</b>                            # Когда нужно связать несколько таблиц\r\n> </pre>\r\n\r\n**Удаление:**\r\n\r\n> <pre>\r\n<b>DELETE FROM</b> таблица                              # удалить всё из таблицы\r\n<b>DELETE FROM</b> таблица <b>WHERE</b> условие;               # только нужные значения\r\n<b>DROP TABLE</b> applicant;                            # удалить саму таблицу\r\n> </pre>\r\n\r\n---\r\n\r\n## Изменение данных таблицы на основе выборки другой таблицы\r\n\r\n*Вставка записей полей одной таблицы в другую таблицу:*\r\n\r\n> <pre>\r\n<b>INSERT INTO</b> таблица (список_полей)\r\n	<b>SELECT</b> список_полей_из_других_таблиц\r\n	<b>FROM</b> таблица_1 <b>JOIN</b> таблица_2 <b>ON</b> ...\r\n> </pre>\r\n\r\n*Удаление записей одной таблицы, используя условия из других таблиц:*\r\n\r\n> <pre>\r\n<b>DELETE FROM</b> author <b>USING</b> author <b>INNER JOIN</b> book <b>ON</b>                              # <b>USING</b> для связи нескольких таблиц\r\n	author.author_id = book.author_id\r\n<br>\r\n<b>DELETE FROM</b> applicant <b>USING</b> applicant <b>INNER JOIN</b> program                        # <b>WHERE</b>(field1, field2) IN SELECT - проверка сразу по двум полям\r\n	<b>USING</b> (program_id) <b>WHERE</b> (name_program, name_enrollee) \r\n	<b>IN SELECT</b> name_program, name_enrollee <b>FROM</b>...  \r\n> </pre>\r\n\r\n---\r\n\r\n## Изменение столбцов таблицы и их типов\r\n\r\n> <pre>\r\n<b>ALTER TABLE</b> таблица <b>ADD</b> имя_столбца тип;                                   # вставляет столбец после последнего\r\n<b>ALTER TABLE</b> таблица <b>ADD</b> имя_столбца тип <b>FIRST</b>;                             # вставляет столбец первым в таблице\r\n<b>ALTER TABLE</b> таблица <b>ADD</b> имя_столбца тип <b>AFTER</b> имя_столбца_1;               # после указанного столбца\r\n<br>\r\n<b>ALTER TABLE</b> таблица <b>DROP COLUMN</b> имя_столбца;                               # удалить столбец, <b>COLUMN</b> можно не писать\r\n<b>ALTER TABLE</b> таблица <b>DROP</b> имя_столбца,\r\n                    <b>DROP</b> имя_столбца_1;                                    # удалить несколько столбцов\r\n<br>\r\n<b>ALTER TABLE</b> таблица <b>CHANGE</b> имя_столбца новое_имя_столбца <b>ТИП ДАННЫХ</b>;       # переименовать столбец\r\n<b>ALTER TABLE</b> таблица <b>CHANGE</b> имя_столбца имя_столбца <b>НОВЫЙ_ТИП_ДАННЫХ</b>;       # изменить тип данных столбца (2 раза пишем имя столбца)\r\n> </pre>\r\n\r\n---\r\n\r\n## Создаём/удаляем индекс для поля таблицы:\r\n\r\n\r\n\r\n> <pre>\r\n<b>CREATE INDEX</b> <i>tablename_rowname_idx</i> <b>ON</b> <i>tablename(rowname <b>DESC</b>)</i>         - название индекса может быть любым, но принято так (понятнее). <b>DESC</b> - Необязательный параметр для сортировки\r\n<b>ALTER TABLE</b> <i>tablename</i> <b>ADD INDEX</b> indexname(colname)\r\n<b>CREATE INDEX</b> <i>tablename_rowname_idx</i> <b>ON</b> <i>tablename(rowname1, rowname2)</i>   - можно делать индекс <u>по нескольким столбцам</u>. Также будет работать для поиска только по <i>rowname1</i> (только для <i>rowname2</i> не поможет)<br>\r\n<b>SHOW INDEX FROM</b> tablename                                             - посмотреть информацию по индексам таблицы<br>\r\n<b>DROP INDEX</b> <i>index_name</i>                                                 - удалить ненужный индекс\r\n> </pre>','2022-08-29','DATABASES/sql language/изменение данных',14,3),(25,'Databases','Примеры запросов SELECT','select','#### Немного о порядке выполнения команд:\r\n\r\n> *Сначала определяется таблица, из которой выбираются данные (<b>FROM</b>),<br>\r\nзатем из этой таблицы отбираются записи в соответствии с условием  <b>WHERE</b>,<br>\r\nвыбранные данные агрегируются (<b>GROUP BY</b>),<br>\r\nиз агрегированных записей выбираются те, которые удовлетворяют условию после <b>HAVING</b>.<br>\r\nПотом формируются данные результирующей выборки, как это указано после <b>SELECT</b> ( вычисляются выражения, присваиваются имена и пр. ).<br>\r\nРезультирующая выборка сортируется, как указано после <b>ORDER BY</b>*\r\n\r\n### Самые общие примеры\r\n\r\n<table>\r\n<tr><td><b>SELECT</b> * <b>FROM</b> table_name;</td><td>- выбрать всё из таблицы</td></tr>\r\n<tr><td><b>SELECT</b> row1 <b>AS</b> another_row_name, row3, row6 <b>FROM</b> table_name;</td><td>- выбрать определённые колонки таблицы, <b>AS</b> - для переименования столбца</td></tr>\r\n<tr><td><b>SELECT DISTINCT</b> row1 <b>FROM</b> table_name;</td><td>- выбор уникальных значений (без повторок)</td></tr>\r\n<tr><td><b>SELECT</b> row1 <b>FROM</b> table_name <b>GROUP BY</b> row1</td><td>- то же самое - уникальные значения</td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n---\r\n\r\n### Выборки с вычислениями\r\n\r\n<table>\r\n<tr><td><b>CEILING</b>(x)</td><td>- округлить вверх до целого</td></tr>\r\n<tr><td><b>ROUND</b>(x, k)</td><td>- округлить до k знаков после запятой</td></tr>\r\n<tr><td><b>FLOOR</b>(x)</td><td>- округлить вниз до целого</td></tr>\r\n<tr><td><b>POWER</b>(x, y)</td><td>- степень</td></tr>\r\n<tr><td><b>SQRT</b>(x)</td><td>- корень</td></tr>\r\n<tr><td><b>DEGREES</b>(x)</td><td>- радианы в градусы</td></tr>\r\n<tr><td><b>RADIANS</b>(x)</td><td>- градусы в радианы</td></tr>\r\n<tr><td><b>ABS</b>(x)</td><td>- модуль</td></tr>\r\n<tr><td><b>PI</b>()</td><td></td></tr>\r\n<tr><td><b>RAND</b>()</td><td>- от 0 до 1</td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>\r\n\r\n#### Примеры\r\n\r\n<pre>\r\n<b>SELECT</b> title, price,\r\n    <b>ROUND</b>((price*18/100)/(1+18/100),2) <b>AS</b> tax,\r\n    <b>ROUND</b>(price/(1+18/100),2) <b>AS</b> price_tax\r\n    <b>FROM</b> book;\r\n<br>	\r\n<b>SELECT</b> title, amount, price, 										# <b>IF</b>(условие, что делать если True, что делать если False)\r\n    <b>IF</b>(amount<4, price*0.5, price*0.7) <b>AS</b> sale\r\n    <b>FROM</b> book;\r\n<br>\r\n<b>SELECT * FROM</b> question <b>ORDER BY RAND() LIMIT</b> 5					   # <b>ORDER BY RAND()</b> - перетасует строки	\r\n</pre>\r\n\r\n---\r\n\r\n### Фишки с датой\r\n\r\n<pre>\r\n<b>SELECT</b> name, city, <b>DATEDIFF</b>(date_last, date_first) + 1 				# <b>DATEDIFF</b> для вычисления разности дат\r\n	<b>AS</b> Длительность <b>FROM</b> trip <b>WHERE</b> city <b>NOT IN</b> \r\n	(\'Москва\', \'Санкт-Петербург\')\r\n	\r\n<b>SELECT</b> name, city, date_first, date_last <b>FROM</b> trip 					# <b>MONTH</b> вычленяет из даты номер месяца\r\n	<b>WHERE MONTH</b>(date_first) = <b>MONTH</b>(date_last)\r\n\r\n<b>SELECT MONTHNAME</b>(date_first) <b>AS</b> Месяц, <b>COUNT</b>(date_first) 			   # <b>MONTHNAME</b> выдаст название месяца на английском (may/june...)\r\n	<b>AS</b> Количество <b>FROM</b> trip <b>GROUP BY MONTHNAME</b>(date_first)\r\n\r\n<b>SELECT DATE_ADD</b>(\'2020-02-02\', <b>INTERVAL 45 DAY</b>)....					# добавить к дате в кавычках сколько-то дней(<b>DAY</b>)/месяцев(<b>MONTH</b>)\r\n\r\n<b>NOW()</b>																 # поставить текущую дату\r\n</pre>\r\n\r\n---\r\n\r\n### Выборки по условию\r\n\r\nравно «=», не равно «<>», больше «>», меньше «<», больше или равно«>=», меньше или равно «<=», BETWEEN, IN, NOT, AND, OR (учитывай приоритеты!)\r\n\r\n<pre>\r\n<b>SELECT</b> title, author, price * amount <b>AS</b> total								  # <b>WHERE</b> price * amount <b>></b> 4000 <b>AND</b> author = \'Булгаков М.А.\' - покажет только те строки, что удовлетворяют обоим условиям\r\n	<b>FROM</b> book <b>WHERE</b> price * amount <b>></b> 4000 <b>AND</b> author <b>=</b> \'Булгаков М.А.\';\r\n	\r\n<b>SELECT</b> title, amount <b>FROM</b> book <b>WHERE</b> amount <b>BETWEEN 5 AND 14</b>;				# 5<=amount<=14\r\n\r\n<b>SELECT</b> title, price <b>FROM</b> book <b>WHERE</b> author <b>IN</b> 								# если значение входит в заданный список\r\n(\'Булгаков М.А.\', \'Достоевский Ф.М.\')\r\n\r\n<b>SELECT</b> title <b>FROM</b> book <b>WHERE</b> title <b>LIKE</b> \'Б%\';								# поиск паттернов в строковых данных % - любое кол-во любых символов, _ - один любой символ; Найдет книги с названием на Б\r\n\r\n\r\n</pre>\r\n\r\n---\r\n\r\n### Сортировки и фишки с GROUP BY\r\n\r\n<pre>\r\n<b>SELECT</b> author, title, amount <b>AS</b> Количество <b>FROM</b> book						# можно указывать неск-ко столбцов (можно их порядковые номера 1, 3), <b>ASC</b> - возврастание (по умолч.), <b>DESC</b> - убывание\r\n	<b>WHERE</b> price < 750 <b>ORDER BY</b> author, amount <b>DESC</b>;						# <b>ORDER BY</b> - в конце\r\n</pre>\r\n\r\n#### GROUP BY нужно использовать, когда в запросе есть групповые функции <i>SUM, COUNT, MIN, MAX, AVG</i>\r\n\r\n<pre>\r\n<b>SELECT</b> author <b>AS</b> Автор, <b>COUNT</b>(author) <b>AS</b> Различных_книг,                   # выберет уникальные значения author, <b>COUNT</b>(author) - считает сколько раз встречается автор, \r\n	<b>SUM</b>(amount) <b>AS</b> Количество_экземпляров <b>FROM</b> book                        # <b>SUM</b>(amount)- суммирует все числа в amount для строк с одинаковым автором\r\n	<b>GROUP BY</b> author\r\n\r\n<b>SELECT</b> author, <b>MIN</b>(price) <b>AS</b> Минимальная_цена,                             # выбираем минимальное, максимальное, среднее значение цены для каждого отдельного автора\r\n	<b>MAX</b>(price) <b>AS</b> Максимальная_цена, \r\n	<b>AVG</b>(price) <b>AS</b> Средняя_цена <b>FROM</b> book <b>GROUP BY</b> author\r\n\r\n\r\n<b>SELECT</b> <b>SUM</b>(amount) <b>AS</b> Количество,                                          # считаем столбцы по всей таблице, <b>GROUP BY</b> не нужен\r\n    <b>SUM</b>(price * amount) <b>AS</b> Стоимость\r\n	<b>FROM</b> book;\r\n	\r\n\r\n<b>SELECT</b> author,\r\n    <b>MIN</b>(price) <b>AS</b> Минимальная_цена, \r\n    <b>MAX</b>(price) <b>AS</b> Максимальная_цена\r\n	<b>FROM</b> book\r\n	<b>GROUP BY</b> author\r\n	<b>HAVING SUM</b>(price * amount) > 5000;                                      # Сортировка групповых функций идёт по оператору <b>HAVING</b>, а не <b>WHERE</b>\r\n	\r\n<b>SELECT</b> name, number_plate, violation <b>FROM</b> fine                              # Группировка <b>GROUP BY</b> по нескольким столбцам\r\n	<b>GROUP BY</b> name, number_plate, violation                                  # должны быть указаны ВСЕ неагрегативные столбцы\r\n	<b>HAVING COUNT</b>(violation) >= 2 \r\n</pre>\r\n\r\n---\r\n\r\n### Вложенные запросы (подзапросы) с ANY/ALL\r\n\r\n<b>ANY/ALL</b> используются ТОЛЬКО в подзапросах. Подзапрос должен выводить 1 столбец значений.<br>\r\n<b>ANY</b> - условие должно отработать хотя бы для одного значения из подзапроса, <b>ALL</b> - для всех.\r\n\r\n<pre>\r\n<b>SELECT</b> title, author, amount, price\r\n<b>FROM</b> book\r\n<b>WHERE</b> amount < <b>ALL</b> (\r\n        <b>SELECT AVG</b>(amount) \r\n        <b>FROM</b> book \r\n        <b>GROUP BY</b> author \r\n      );\r\n</pre>\r\n\r\n---\r\n\r\n### Лимиты\r\n\r\nИспользуй в конце оператор <b>LIMIT</b> и число-ограничитель\r\n\r\n<pre>\r\n<b>SELECT</b> city, <b>COUNT</b>(city) <b>AS</b> Количество <b>FROM</b> trip\r\n	<b>GROUP BY</b> city <b>ORDER BY</b> Количество DESC <b>LIMIT</b> 2\r\n</pre>\r\n\r\n---\r\n\r\n### Фишки с текстовыми полями\r\n\r\n<pre>\r\n<b>SELECT</b> name_subject, <b>LEFT</b>(name_question, 30)                      # <b>LEFT</b> покажет 30 первых символов из поля name_question\r\n	<b>AS</b> Вопрос <b>FROM</b> table\r\n\r\n<b>SELECT</b> name_subject, <b>CONCAT</b>(name_question, \'...\')                 # <b>CONCAT</b> добавит ... в конец строки поля name_question 						\r\n	<b>AS</b> Вопрос <b>FROM</b> table\r\n\r\n...<b>WHERE</b> step_name <b>REGEXP CONCAT</b>(\'\\\\b\', keyword_name, \'\\\\b\')      # есть regular expressions, как правило используются вместе с <b>CONCAT</b> \r\n	<b>ORDER BY</b> keyword_id\r\n</pre>\r\n\r\n---\r\n\r\n### Запросы к нескольким таблицам, LEFT/RIGHT/INNER/CROSS JOIN\r\n\r\n<pre>\r\n<b>SELECT</b> title, name_author                                            # <b>INNER JOIN</b> - войдут только те записи, которые удовлетворяют условию\r\n	<b>FROM</b> table1 <b>INNER JOIN</b> table2\r\n    <b>ON</b> table1.row1 = table2.row2 <b>AND</b>\r\n	table1.row2 = table2.row3                                        # с помощью <b>AND</b> можно джойнить сразу по нескольким полям\r\n	\r\n<b>SELECT</b> name_author, title                                            # Попадут ВСЕ записи из левой таблицы, те строки, что удовлетворяют условию, обогатятся данными из правой таблицы\r\n	<b>FROM</b> author <b>LEFT JOIN</b> book                                          \r\n    <b>ON</b> author.author_id = book.author_id;\r\n	\r\n	\r\n<b>SELECT ... FROM</b>                                                      # Создаст все доступные комбинации между двумя таблицами\r\n    таблица_1 <b>CROSS JOIN</b>  таблица_2\r\n\r\n<b>SELECT</b> title, name_author                                            # Соединение более двух таблиц\r\n	<b>FROM</b> table1 <b>INNER JOIN</b> table2\r\n    <b>ON</b> table1.row1 = table2.row2;\r\n	<b>INNER JOIN</b> table3\r\n	<b>ON</b> table2.row4 = table3.row1\r\n	\r\n	\r\n<b>SELECT</b> title, name_author, author_id                                 # <b>USING</b> можно использовать вместо ON когда названия столбцов одинаковые в 2х таблицах\r\n	<b>FROM</b> author <b>INNER JOIN</b> book <b>USING</b>(author_id);\r\n\r\n<b>SELECT</b> buy_id, client_id, book_id <b>FROM</b> buy_archive                   # <b>UNION</b> - вертикальное объединение, т.е. столбцы называются как в первой таблице,\r\n	<b>UNION ALL SELECT</b> buy.buy_id, client_id, book_id						в них значения из обеих таблиц. \r\n	<b>FROM</b> book 															<b>ALL</b> - все записи, если его нет - только уникальные.\r\n\r\n</pre>\r\n\r\n---\r\n\r\n### Переменные и фишки с ними\r\n\r\n<table>\r\n<tr><td><b>SET</b> @row_num := 0;</td><td>&nbsp;&nbsp;&nbsp;&nbsp;- так создаём переменную (до запроса)</td></tr>\r\n<tr><td><b>SELECT</b> *, (@row_num := @row_num + 1) <b>AS</b> str_num<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<b>FROM</b>  applicant_order;</td><td>&nbsp;&nbsp;&nbsp;&nbsp;- пронумеровать строки в таблице с помощью переменной</td></tr>\r\n</table>','2022-08-29','DATABASES/sql language/примеры запросов select',14,3),(26,'Databases','Нормализация и ACID','normalizatsiia-i-acid','### Нормализация\r\n\r\n<b><i>Нормализация</i></b> — *это процесс организации данных в базе данных, включающий создание таблиц и установление отношений между ними в соответствии с правилами, которые обеспечивают защиту данных и делают базу данных более гибкой, устраняя избыточность и несогласованные зависимости.*\r\n\r\nСуществует несколько правил нормализации баз данных. Каждое правило называется «нормальной формой». Если выполняется первое правило, говорят, что база данных представлена в «первой нормальной форме». Если выполняются три первых правила, считается, что база данных представлена в «третьей нормальной форме». Есть и другие уровни нормализации, однако для большинства приложений достаточно нормализовать базы данных до третьей нормальной формы.\r\n\r\n1. #### Первая нормальная форма\r\n> - в таблице не должно быть дублирующих строк\r\n> - в каждой ячейке таблицы хранится атомарное значение (одно не составное значение)\r\n> - в столбце хранятся данные одного типа\r\n> - отсутствуют массивы и списки в любом виде\r\n\r\n2. #### Вторая нормальная форма\r\n> - таблица должна иметь ключ\r\n> - все неключевые столбцы таблицы должны зависеть от полного ключа (в случае если он составной)\r\n> - таблица должна находиться в первой нормальной форме\r\n\r\n3. #### Третья нормальная форма\r\n> - в таблице не должно быть транзитивной зависимости, т.е. нет неключевых полей, которые зависят от других неключевых полей\r\n\r\n---\r\n\r\n### Принципы работы реляционных баз данных <i>ACID</i>\r\n\r\nЭта аббревиатура, которая описывает четыре основных положения работы баз данных.\r\n\r\n<table>\r\n<tr><td><b>A</b>tomic (атомарность)</td><td>- <i>информация в базе изменяется, только когда все операции успешны, иначе rollback к изначальному значению</i></td></tr>\r\n<tr><td><b>C</b>onsistency (согласованность)</td><td>- <i>нельзя ссылаться на несуществующий объект</i></td></tr>\r\n<tr><td><b>I</b>solation (изолированность)</td><td>- <i>доступ к конкретной ячейке имеет только один connection (только 1 пользователь вносит изменения)</i></td></tr>\r\n<tr><td><b>D</b>uration (продолжительность)</td><td>- <i>после commit, данные надёжно сохраняются на HDD</i></td></tr>\r\n</table>\r\n\r\n---\r\n\r\n### Уровни изолированности транзакций\r\n\r\n1. Read uncommited\r\n2. Read Commited (по умолчанию, видны только те транзакции, что уже завершены. Т.е. если со строкой БД кто-то делает что-то ещё, но не закоммитил, текущая транзакция этого не увидит.)\r\n3. Repeatable read\r\n4. Serializable','2022-08-30','DATABASES/sql language/нормализация и acid',14,3),(27,'Python','Работа с SQLite3','sqlite3','#### Статья расскажет как работать с SQLite3 в python-скриптах.\r\n\r\nИмпортируем (и возможно устанавливаем) библиотеку sqlite3: `from sqlite3 import connect`<br>\r\nПодключаемся к базе данных/создаём новую: `con = connect(\'my_db.db\')`\r\n\r\nДальнейшая работа с базой будет проходить через переменную **con**\r\n\r\nСоздаём новую таблицу в БД:\r\n\r\n> <pre>\r\n<b>con.execute</b>(\"CREATE TABLE profile(\r\n    user_name varchar(25) NOT NULL\r\n    age integer\r\n    user_id PRIMARY KEY)\")  \r\n> </pre>\r\n\r\nДобавляем строки в таблицу:\r\n\r\n> <pre>\r\n<b>con.execute</b>(\"INSERT INTO profile(user_name, integer)\r\n    VALUES (\'Bogdan\', 29)\")\r\n> </pre>\r\n\r\nДобавляем строки в таблицу безопасно (*защита от SQL-инъекций*):\r\n\r\n> <pre>\r\n<b>con.executemany</b>(\"INSERT INTO person(first_name, last_name)               - <b>executemany</b> чтобы давать несколько значений\r\n    VALUES (?, ?)\", [(\'John\', \'Smith\'), (\'Paul\', \'Walker\')])             - вопросики для проверки на инъекции, далее список из добавляемых значений\r\n> </pre>\r\n\r\nУдаляем таблицу:\r\n\r\n> <pre>\r\n<b>con.execute</b>(\"DROP TABLE \r\n    IF EXISTS person;\")                                                  - проверка на наличие таблицы перед её удалением    \r\n> </pre>\r\n\r\nСделанные изменения не сохраняются автоматически. Нужно сохранить/откатить явно:\r\n\r\n<table>\r\n<tr><td>con.<b>rollback</b>()</td><td>                - откатить изменения</td></tr>\r\n<tr><td>con.<b>commit</b>()</td><td>                  - сохранить изменения</td></tr>\r\n</table>\r\n\r\n---\r\n\r\nДля чтения из таблицы данных нам нужен ***курсор***:\r\n\r\n<table>\r\n<tr><td>cur = con.<b>cursor</b>()</td><td>- далее будем работать с курсором</td></tr>\r\n<tr><td>cur.<b>execute</b>(\"SELECT * FROM profile\")</td><td>- здесь делаем запрос, но мы пока не получили результат</td></tr>\r\n<tr><td>cur.<b>fetchall</b>()</td><td>- получить данные из запроса выше</td></tr>\r\n</table>','2022-08-30','PYTHON/работа с sqlite3',7,4),(28,'Django','Fixtures','fixtures','Очень часто нужно сделать копию БД/выгрузить из неё данные в общедоступном формате/загрузить в БД тестовые объекты для проверок.\r\nДля этого есть <b>fixture</b> - механизм загрузки/выгрузки (обычно в json)\r\n\r\n1. В папке приложения создаём новую подпапку *fixtures*.<br>\r\nВ ней django по умолчанию ищет дампы.<br>\r\nМожно делать глобально: делаем папку *fixtures* в корне проекта и указываем папки для поиска в *settings.py*:\r\n\r\n        FIXTURE_DIRS = [\r\n            fixtures\',\r\n            ]\r\n\r\n2. В командной строке даём команду\r\n\r\n        python manage.py dumpdata courses --indent=2 --output=courses/fixtures/subjects.json\r\n\r\n    > *У команды много опций, читай тут: python manage.py dumpdata --help или в интернете*\r\n\r\n3. Наоборот, восстановить данные из fixture можно командой (возможно нужно будет указывать полный путь):\r\n\r\n        python manage.py loaddata subjects.json\r\n\r\n### Немного примеров:\r\n\r\n<table>\r\n<tr><td>manage.py dumpdata > databasedump.json</td><td>- задампить всю базу</td></tr>\r\n<tr><td>manage.py dumpdata myapp > databasedump.json</td><td>- база одного приложения</td></tr>\r\n<tr><td>manage.py dumpdata myapp.mymodel > databasedump.json</td><td>- сохранить только базу одной модели приложения</td></tr>\r\n<tr><td>python manage.py dumpdata app.model <b>--format=</b>...</td><td>- задать формат дампа. Может быть <b>json, yaml, xml</b></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n<tr><td></td><td></td></tr>\r\n</table>','2022-08-30','DJANGO/orm и базы данных/fixtures',15,3),(29,'Django','Custom management commands для manage.py','custom-management-commands-dlia-managepy','Каждая команда - это отдельный файлик python в котором описан класс Command, наследующий от django.core.management.base.BaseCommand или его саб-классов\r\n\r\nСоздаём файлы и директории в папке нужного приложения:<br>\r\n*management/\\_\\_init\\_\\_.py*, подпапка *commands/\\_\\_init\\_\\_.py* и файл с именем=имени будующей команды (прим. *enroll_reminder.py*)\r\n\r\n### Пример файла команды:\r\n\r\n> <pre>\r\nimport datetime\r\nfrom django.conf import settings\r\nfrom django.core.management.base <b>import BaseCommand</b>\r\nfrom django.core.mail import send_mass_mail                                                     - крутая функция для отправки сразу нескольких писем (создаёт одно SMTP соединение для всех писем а не для каждого)\r\nfrom django.contrib.auth.models import User\r\nfrom django.db.models import Count\r\n<br>\r\n<b>class Command(BaseCommand):</b>                                                                     - <i>класс ВСЕГДА называется Command. Имя команды=имени файла</i>\r\n	<b>help</b> = \'Sends an e-mail reminder to users\'                                                  - описание при вызове помощника (python manage.py help enroll_reminder)\r\n<br>	\r\n	<b>def add_arguments(self, parser):</b>                                                            - если команда должна принимать доп. аргументы (python manage.py enroll_reminder --days=20)\r\n		parser.add_argument(\'--days\', dest=\'days\', type=int)\r\n<br>	\r\n	<b>def handle(self, \\*args, \\*\\*options):</b>                                                         <i>- функция, которая отрабатывает логику команды</i>\r\n		emails = []                                                                             - список писем, которые будем высылать разом\r\n		subject = \'Enroll in a course\'\r\n		date_joined = datetime.date.today() - datetime.timedelta(days=options[\'days\'])\r\n		users = User.objects.annotate(course_count=Count(\'courses_joined\'))\\		\r\n			.filter(course_count=0, date_joined__lte=date_joined)\r\n		for user in users:\r\n			message = \'Dear {},\\n\\n We noticed that you didn\'t\\\r\n				enroll in any courses yet. What are you waiting\\\r\n				for?\'.format(user.first_name)\r\n		emails.append((subject, message,                                                        - в массив добавляем кортежи с темой, текстом, адр. отправителя и адр. получателя\r\n			settings.DEFAULT_FROM_EMAIL,[                                                       - дефолтный адрес отправки, вшитый в settings.py\r\n			user.email]))\r\n		send_mass_mail(emails)                                                                  - функции скармливаем массив писем\r\n		self.stdout.write(\'Sent {} reminders\'.format(len(emails)))                              - результат работы команды, выведенный в терминал\r\n> </pre>\r\n\r\n---\r\n\r\n### Способы использования:\r\n\r\n- из командой строки: `python manage.py enroll_reminder --days=20`\r\n- crontab: `crontab -e 0 8 * * * python /path/to/educa/manage.py enroll_reminder --days=20 --settings=educa.settings.pro`\r\n- В python-django (celery/views и прочее):\r\n\r\n        from django.core import management\r\n        ...\r\n        management.call_command(\'enroll_reminder\', days=20)','2022-09-05','DJANGO/custom management commands для manage.py',4,4),(30,'Django','Валидация форм','validatsiia-form','Каждый тип поля формы имеет свои встроенные валидаторы, которые проверяют, что в поле указана правильная информация. Если данные не соответствуют, к полю формы будет прикреплена **ValidationError**. Можно вернуть форму с данными обратно клиенту и подсказать, где у него ошибка.<br>\r\nМожно создать собственные валидаторы в коде формы.<br>\r\nМожно создать своё собственное поле формы на базе существующих и сделать валидатор там.<br>\r\nМожно отдельно создать функцию-валидатор и вставлять её в форму или модель.<br>\r\nВсе проверки происходят при вызове метода *form.*<b>is_valid()</b>. После этого форма создаётся ещё раз, но уже со словарём <i>form</i>.<b>cleaned_data</b>, из которого можно брать значения полей формы и работать с ними.\r\n\r\n### Пример формы для скачки изображений с <i>кастомным валидатором</i>:\r\n\r\n> <pre>\r\nfrom django import forms\r\nfrom .models import Image\r\nfrom urllib import request								- для скачки файла из интернета\r\nfrom django.core.files.base import ContentFile			- для скачки и сохранения файла из интернета\r\nfrom django.utils.text import slugify					- для создания красивого имени файла в директории\r\n<br>\r\nclass ImageCreateForm(forms.ModelForm):\r\n	class Meta:\r\n		model = Image\r\n		fields = (\'title\', \'url\', \'description\')\r\n		widgets = {\r\n			\'url\': forms.HiddenInput,					- виджет скрывает это поле для пользователя. Мы заполним его автоматически скрытно\r\n			}		\r\n	<b>def clean_url(self)</b>:								   - проверка, что ссылка корректная (заканчивается расширением jpeg/jpg). Название метода должна начинаться с <b>clean_</b>, потом имя поля, которое проверяем. 						\r\n		url = <b>self.cleaned_data</b>[\'url\']				   - отработает при <b>form.is_valid()</b>. Словарь с данными полей формы. \r\n		valid_extensions = [\'jpg\', \'jpeg\']\r\n		extension = url.rsplit(\'.\', 1)[1].lower()\r\n		if extension not in valid_extensions:\r\n			<b>raise forms.ValidationError</b>(                - вручную вызываем ошибку, текст описания пишем любой.\r\n				<i>\'The given URL invalid\'</i>)\r\n		return url		\r\n	<b>def save</b>(self, force_insert=False,					   - переписываем метод формы, чтобы он <i>не только сохранял данные в БД, но и скачивал файл</i>\r\n			force_update=False,								- эти параметры такие же как и у оригинального метода\r\n			commit=True):\r\n		image = super().save(commit=False)					- создаём инстанс Image, но не сохраняем его\r\n		image_url = self.cleaned_data[\'url\']\r\n		image_name = \'{}.{}\'.format(slugify(image.title),	- делаем \'имя_файла\'.jpg\r\n			image_url.rsplit(\'.\', 1)[1].lower())	\r\n		response = request.urlopen(image_url)				- скачка файла по ссылке из интернета\r\n		image.image.save(image_name,						- сохранение с заданным именем в директории\r\n			ContentFile(response.read()), save=False)			без сохранения в БД (save=False)\r\n		if commit:											- восстанавливаем поведение родительского метода\r\n			image.save()\r\n		return image\r\n> </pre>\r\n\r\n### Пример создания и использования собственного валидатора\r\n\r\n> Нам просто нужно где-то (лучше в отдельном файле *validators.py*) создать функцию, которая будет вызывать исключение `ValidationError`:\r\n\r\n>> <pre>\r\nfrom django.core.exceptions import <b>ValidationError</b>                        - импортим ошибку\r\n<br>\r\ndef exclude_slash(<b>value</b>: str):                                            - в функцию передаётся <b>содержимое поля</b>\r\n    if \'/\' in value:\r\n        <b>raise ValidationError</b>(\'No slashes (\"/\") allowed!\')                - вызов ошибки, если условие удовлетворено\r\n>> </pre>\r\n\r\n> Далее просто добавляем этот валидатор к полю модели/формы в параметр *validators*:\r\n\r\n>> <pre>\r\nclass Page(models.Model):\r\n    discipline_parent = models.CharField(max_length=250, blank=True)\r\n    title = models.CharField(max_length=250, <b>validators=[exclude_slash]</b>)  - также можно и в формах\r\n>> </pre>\r\n\r\n### Получаем текст ошибки в <i>view</i>:\r\n\r\nТак можно получить текст ошибки и вывести его не в <i>errorlist</i> формы, а, скажем, через <i>messages</i>\r\n\r\n> <pre>\r\nif expense_formset.is_valid():\r\n<br>\r\nelse:\r\n    for form in expense_formset:                                                - в данном примере работаем с формсетами                                               \r\n        if form.errors:\r\n            for field in form.errors:                                           - перебираем <u>поля</u> формы\r\n                messages.error(request, <b>form.errors[field].as_text())</b>           - <b>erors</b> - это словарь с ключём-полем, <b>as_text()</b> выведет строку ошибки\r\n        form.errors.<b>clear()</b>                                                     - так можно почистить <i>errorlist</i>\r\nreturn render(request, \'my_expense/expenses/add.html\',\r\n    {\'expense_formset\': expense_formset})\r\n> </pre>\r\n\r\n\r\n### Вручную добавляем ошибку к конкретному полю формы:\r\n\r\n        user_form.add_error(\'field\', \'Text or error instance\') \r\n              \r\n---\r\n\r\n### Примеры работы с ошибками валидации в htm-темплэйтах\r\n\r\n> <pre>\r\n	{% if <b>form.errors</b> %}					               - так можно проверять форму на ошибки\r\n	    <p\\>\r\n		    Your username and password didn\'t match.\r\n		    Please try again.\r\n	    </p\\>\r\n    {% endif %}\r\n> </pre>\r\n\r\n#### Можно перебирать и работать с ошибками конкретного поля:\r\n\r\n> <pre>\r\n<p\\><b>{{ form.title.label_tag }}</b>{{ form.title }}                                  - так выводится <label\\>\r\n    {% for error in <b>form.title.errors</b> %}\r\n        <span style=\"color: red;\"\\> {{ error }}</span\\>                         - я так вывожу ошибки рядом с полем, где не прошла проверка\r\n    {% endfor %}\r\n<p\\><label id=\"content_or_description\"\\>Content:</label\\>{{ form.content }}</p\\>\r\n> </pre>\r\n\r\n#### Или перебрать текст всех ошибок за раз:\r\n\r\n> <pre>\r\n{% if user_form.errors %}\r\n    <h2 class=\"center\"\\>Ошибка!</h2\\>\r\n    {% for field in user_form %}\r\n        {% for error in field.errors %}\r\n            <p\\> {{ error }} </p\\>\r\n        {% endfor %}\r\n    {% endfor %}\r\n{% else %}\r\n    <h2 class=\"center\"\\>Расскажи немного о себе.</h2\\>\r\n{% endif %}\r\n> </pre>\r\n\r\n\r\n\r\n---\r\n\r\n### Для отображения ошибок обычно используют отдельные настройки в CSS-файле для форм\r\n\r\n> <pre>\r\n.errorlist {                                 - просто класс в CSS-файле форм\r\n    position: absolute;\r\n    color:#cc0033;\r\n    float:left;\r\n    clear:both;\r\n    margin-left:27em;\r\n    margin-top: 5px;\r\n}\r\n> </pre>','2022-09-19','DJANGO/формы/валидация форм',16,3),(31,'Django','Примеры полезных форм','primery-poleznykh-form','### Форма с переписанным методом <i>save</i> для скачки изображений\r\n\r\n> <pre>\r\nfrom django import forms\r\nfrom .models import Image\r\nfrom urllib import request								- для скачки файла из интернета\r\nfrom django.core.files.base import ContentFile			- для скачки и сохранения файла из интернета\r\nfrom django.utils.text import slugify					- для создания красивого имени файла в директории\r\n<br>\r\nclass ImageCreateForm(forms.ModelForm):\r\n	class Meta:\r\n		model = Image\r\n		fields = (\'title\', \'url\', \'description\')\r\n		widgets = {\r\n			\'url\': forms.HiddenInput,					- виджет скрывает это поле для пользователя. Мы заполним его автоматически скрытно\r\n			}		\r\n	<b>def clean_url(self)</b>:								   - проверка, что ссылка корректная (заканчивается расширением jpeg/jpg). Название метода должна начинаться с <b>clean_</b>, потом имя поля, которое проверяем. 						\r\n		url = <b>self.cleaned_data</b>[\'url\']				   - отработает при <b>form.is_valid()</b>. Словарь с данными полей формы. \r\n		valid_extensions = [\'jpg\', \'jpeg\']\r\n		extension = url.rsplit(\'.\', 1)[1].lower()\r\n		if extension not in valid_extensions:\r\n			<b>raise forms.ValidationError</b>(                - вручную вызываем ошибку, текст описания пишем любой.\r\n				<i>\'The given URL invalid\'</i>)\r\n		return url		\r\n	<b>def save</b>(self, force_insert=False,					   - переписываем метод формы, чтобы он <i>не только сохранял данные в БД, но и скачивал файл</i>\r\n			force_update=False,								- эти параметры такие же как и у оригинального метода\r\n			commit=True):\r\n		image = super().save(commit=False)					- создаём инстанс Image, но не сохраняем его\r\n		image_url = self.cleaned_data[\'url\']\r\n		image_name = \'{}.{}\'.format(slugify(image.title),	- делаем \'имя_файла\'.jpg\r\n			image_url.rsplit(\'.\', 1)[1].lower())	\r\n		response = request.urlopen(image_url)				- скачка файла по ссылке из интернета\r\n		image.image.save(image_name,						- сохранение с заданным именем в директории\r\n			ContentFile(response.read()), save=False)			без сохранения в БД (save=False)\r\n		if commit:											- восстанавливаем поведение родительского метода\r\n			image.save()\r\n		return image\r\n> </pre>\r\n\r\n## Пример своей формы для регистрации нового юзера\r\n\r\n> <pre>\r\nfrom django.contrib.auth.models import User\r\n<br>\r\nclass UserRegistrationForm(forms.ModelForm):\r\n    password = forms.CharField(label=\'Password\',\r\n        <b>widget=forms.PasswordInput)</b>                                   - виджет для отображения пароля точечками              \r\n    password2 = forms.CharField(label=\'Repeat password\',\r\n        widget=forms.PasswordInput)<br>\r\n    class Meta:\r\n        model = User\r\n        fields = (\'username\', \'first_name\', \'email\')<br>\r\n    def <b>clean_password2</b>(self):                                        - своя функция проверки поля формы (свой валидатор)\r\n        cd = self.cleaned_data\r\n        if cd[\'password\'] != cd[\'password2\']:\r\n            raise forms.ValidationError(\'Passwords don\\\'t match.\')\r\n        return cd[\'password2\']\r\n> </pre>','2022-09-19','DJANGO/формы/примеры полезных форм',16,3),(32,'Django','Начинаем новый проект','nachinaem-novyi-proekt','### Самые первые комманды для создание вирт. окружения, скачки в него Django и запуска проекта.\r\n\r\n> <pre>\r\nvirtualenv env/myshop                          - создаём и активируем вирт. окружение<br>\r\nsudo apt-get install python3-venv              - устанавливаем вирт. окружение для python\r\npython3 -m venv env_name                       - создание нового окружения для python<br>\r\nsource env/myshop/bin/activate<br>\r\npip install Django                             - качаем Джанго<br>\r\n> </pre>\r\n\r\n---\r\n\r\n> <pre>\r\ndjango-admin startproject myshop .             - начинаем проект <i>myshop</i>. Точка скажет создавать файлы в текущей директории, а не на уровень глубже\r\ncd myshop/                                     - идём в папку проекта (там где <b>manage.py</b>\r\ndjango-admin startapp shop                     - создаём своё приложение в проекте. <u>!!!Не забудь добавить его в <i>settings.py</i></u>\r\npython manage.py migrate                       - first migration to sync database<br>\r\npython manage.py createsuperuser               - создаём суперюзера для проекта (чтобы рулить в admin-site)<br>\r\npython manage.py makemigrations app_name       - prepare to commit changes in a DB for one app\r\npython manage.py migrate                       - commit changes\r\n<br>\r\nсоздаём модели в <i>models.py</i> и мигрируем ещё раз\r\nв <i>admin.py</i> регистрируем модели\r\n> </pre>\r\n\r\n---\r\n\r\n> <pre>\r\nв основной <i>urls.py</i> подключаем urls приложения: <b>`path(\'app_name/\', include(\'app_name.urls\', namespace=\'app_name\'))`</b>\r\nсоздаём <i>urls.py</i> приложения: <br>\r\n    from django.urls import path\r\n    from . import views<br>\r\n    <b>app_name</b> = \'blog_app\'                                             - для обратной связи(привязка к views не по URL, а по имени типа \'blog_app:post_list\')<br>\r\n    urlpatterns = [\r\n        path(\'\', views.post_list, name=\'post_list\'),\r\n        #path(\'\', views.PostListView.as_view(), name=\'post_list\')     - если view сделан как класс, а не как функция\r\n        path(\'<int:year\\>/<int:month\\>/<int:day\\>/<slug:post\\>/\',         - <int:year> передаст в views year как отдельный параметр функции\r\n            views.post_detail, name=\'post_detail\'),                   - name=\'post_detail\' для обратной связи к views по имени\r\n	]<br>\r\nв <i>views.py</i> создаём свои views\r\nв папке приложения создаём новую папку <i>templates/app_name</i>\r\nв новой папке создаём <i>base.html</i> и другие подпапки и html-файлы\r\n> </pre>','2022-09-19','DJANGO/начинаем новый проект',4,4),(33,'Django','Регистрация моделей admin-site','registratsiia-modelei-admin-site','# Примеры того, как регистрируются модели базы данных в admin-sit`e и список возможных полей\r\n\r\n### Самый простой пример с кучей полезных полей и их описанием:\r\n\r\n> <pre>\r\nfrom django.contrib import admin\r\nfrom .models import Post											- модель, которую добавляем в админку\r\n<br>\r\n<b>admin.site.register</b>(Profile)                                        - быстрый способ зарегистрировать модель, если не нужно красивое отображение информации ниже\r\n<br>\r\n@admin.register(Post)                                               - то же что и выше, но с созданием отдельного класса, который будет показывать кучу полезной информации по объекту\r\nclass PostAdmin(admin.ModelAdmin):                                             \r\n	list_display = (\'title\', \'slug\', \'author\', \'publish\',			- поля, которые будут отображаться в админке\r\n		\'status\', <b>\'author_rank\'</b>)                                    - можно вносить свои поля, являющиеся атрибутами другой модели, привязанной к этой (автор). <u>Это функция</u>\r\n	list_filter = (\'status\', \'created\', \'publish\', \'author\')		- фильтры справа\r\n	search_fields = (\'title\', \'body\')								- поле поиска и в каких полях искать\r\n	prepopulated_fields = {\'slug\': (\'title\',)}						- поля, которые заполняются автоматически и правила их заполнения\r\n	raw_id_fields = (\'author\',)										- удобный виджет поиска по id (например там, где много пользователей, удобнее искать их так)\r\n	date_hierarchy = \'publish\'										- временная шкала под полем поиска\r\n	ordering = (\'status\', \'publish\')								- поля сортировки\r\n	list_editable = [\'title\', \'status\']								- поля, которые можно редактировать с общей страницы\r\n<br>\r\n        <b>def author_rank(self, obj):</b>                                 - функция, которая добавит дополнительное поле из модели автора\r\n            return obj.author.rank                                  - обращаемся к полю как и в ORM\r\n> </pre>\r\n\r\n### Крутой пример модели в модели. При редактировании основной модели на той же странице будут подгружаться и все привязанные к ней инстансы другой модели\r\n\r\n> <pre>\r\nclass OrderItemInline(<b>admin.TabularInline</b>):							- так делается <i>подгружаемая модель</i> (мы её даже не регистрируем). Есть ещё admin.StackedInline и другие\r\n	model = OrderItem\r\n	raw_id_fields = [\'product\']<br>	\r\n@admin.register(Order)\r\nclass OrderAdmin(admin.ModelAdmin):\r\n	list_display = [\'id\', \'first_name\', \'last_name\', \'email\']\r\n	<b>inlines</b> = [OrderItemInline]										- в дополнение к полям этой модели, будет подгружаться информация по привязанным инстансам модели OrderItemInline\r\n> </pre>\r\n\r\n### Переписываем админовскую user-модель, чтобы встроить в неё поля другой модели (profile):\r\n\r\n\r\n\r\n> <pre>\r\nfrom django.contrib import admin\r\nfrom django.contrib.auth.models import <b>User</b>                                     - её нужно будет перерегистрировать\r\nfrom django.contrib.auth.admin import <b>UserAdmin as AuthUserAdmin</b>                - перепишем стандартную модель (наследуем), чтобы добавить <i>inline</i> информацию\r\nfrom .models import Profile<br>\r\nclass ProfileInline(admin.StackedInline):                                       - регистрируем профиль как встроенную модель\r\n    model = Profile<br>\r\nclass UserAdmin(AuthUserAdmin):                                                 - наша модель наследует от стандартной и называется также, но содержит доп. информацию из профиля\r\n    inlines = [ProfileInline]\r\nadmin.site.<b>unregister(User)</b>                                                     - зачем-то нужно отключать и подключать User снова\r\nadmin.site.<b>register</b>(User, UserAdmin)\r\n> </pre>','2022-09-19','DJANGO/admin-site/регистрация моделей admin-site',17,3),(34,'Django REST','Аббревиатуры и немного теории','abbreviatury-i-nemnogo-teorii','<b>API</b>- Aplication programming interface<br>\r\n<b>RESTful</b>     - Representational state transfer<br>\r\n\r\nAPI является *restful*, когда она:\r\n\r\n+ stateless, т.е. каждый запрос-ответ сам по себе и не зависит от предыдущих\r\n+ поддерживает HTTP-verbs (GET/POST/PUT/DELETE)\r\n+ возвращает данные в JSON/XML...\r\n\r\n**CRUD** - **C**reate (*POST*), **R**ead (*GET*), **U**pdate (*PUT*), **D**elete (*DELETE*)<br>\r\n**api-endpoint** - URL-aдрес с набором разрешённых методов (GET/POST...)\r\n\r\nКритерии того, что api действительно restful:\r\n\r\n1. Клиент-серверная архитектура\r\n2. stateless\r\n3. Кэшируемые данные для упрощения взаимодействия клиента с сервером\r\n4. Единый интерфейс между компонентами приложения\r\n5. Ограничение многоуровневой системы, при которой взаимодействие клиент-сервер может осуществляться через иерархические уровни. (Каждый компонент может видеть только компоненты следующего слоя).\r\n6. Реализация кода по запросу, позволяющий серверам расширять функциональность клиента путем передачи исполняемого кода в виде апплетов или сценариев. (Код исполняемый на стороне клиента).','2022-09-21','DJANGO REST/аббревиатуры и немного теории',18,4),(35,'Django REST','Примитивный пример api','primitivnyi-primer-api','## Самый простой пример создания своего api, чтобы понять что где лежит и как используется\r\n\r\n1. Нужен рабочий django-проект\r\n2. Устанавливаем фреймворк в вирт. окружение: `pip install djangorestframework`\r\n3. Добавляем фреймворк в список установленных приложений в *settings.py* проекта:\r\n\r\n        #3d party apps\r\n        \'rest_framework\',\r\n\r\n4. Хорошей практикой является создание отдельного *application* в django-проекте для всех api (*не забудь также добавить в settings.py*):\r\n\r\n        python manage.py startapp api \r\n\r\n> Но также встречаются варианты, когда функционал api встроен в уже готовое приложение классического Django. Тогда в приложении просто создаётся папка *api* с файлом *\\_\\_init\\_\\_.py* и другими необходимыми файлами (например serializers.py).\r\n\r\n5. В *urls.py* проекта делаем запись для нового приложения *api*:\r\n\r\n        path(\'api/\', include(\'api.urls\')),\r\n\r\n6. В приложении *api* создаём свой *urls.py*, аналогично простым проектам django:\r\n\r\n        from django.urls import path\r\n        from .views import BookAPIView              - создадим чуть позже\r\n\r\n        urlpatterns = [\r\n            path(\'\', BookAPIView.as_view()),\r\n        ]\r\n\r\n7. Работаем с *views.py*. Создадим view на базе универсального ListAPIView:\r\n\r\n        from rest_framework import generics         - здесь лежат встроенные class-based views для api\r\n        from books.models import Book\r\n        from .serializers import BookSerializer	    - сделаем позже, будет преобразовывать данные в JSON\r\n\r\n        class BookAPIView(generics.ListAPIView):    - !!!Это read-only endpoint!!! Всё стандартно, наследуем от встроенного универсального list-класса для api\r\n            queryset = Book.objects.all()\r\n            serializer_class = BookSerializer	    - для этого класса нужно указать queryset и serializer\r\n\r\n8. В папке приложения *api* создаём новый файл *serializers.py*:\r\n\r\n        from rest_framework import serializers\r\n        from books.models import Book\r\n\r\n        class BookSerializer(serializers.ModelSerializer):        - serializer для модели\r\n            class Meta:                                           - всего то в мете указать модель и необходимые поля\r\n                model = Book\r\n                fields = (\'title\', \'subtitle\', \'author\', \'isbn\')\r\n\r\n---\r\n\r\nAPI готов! Проверить работу можно набрав адрес в браузере либо используя linux-программу **curl**: `curl https://adress..`','2022-09-21','DJANGO REST/примитивный пример api',18,4),(36,'Django REST','Настройки в settings.py','nastroiki-v-settingspy','*Полный список настроек можно посмотреть в [официальной документации](https://www.django-rest-framework.org/api-guide/settings/).*\r\n\r\n> <pre>\r\nINSTALLED_APPS = [\r\n    ....\r\n    # 3rd party\r\n    \'<b>rest_framework</b>\',                                                    - фреймворк тоже нужно указывать как приложение \r\n    \'<b>corsheaders</b>\',                                                       - <b>CORS</b>-защита. Это <i>middleware</i>, который добавит дополнительные поля в HTTP-заголовки. \r\n                                                                           Нужен для безопасного взаимодействия между разными доменами. Нужно устанавливать отдельно: <i>pip install django-cors-headers</i>\r\n    ....\r\n    #my_apps\r\n    \'api\'                                                                - app для apis\r\n    ...\r\n> </pre>\r\n\r\n\r\n> <pre>\r\nMIDDLEWARE = [\r\n    ....\r\n    \'corsheaders.middleware.<b>CorsMiddleware</b>\',                             - <b>CORS</b>-защита. <b>ВСЕГДА</b> идёт перед <i>CommonMiddleware</i>\r\n    \'django.middleware.common.<b>CommonMiddleware</b>\',\r\n    ....\r\n> </pre>\r\n\r\n\r\n\r\n> <pre>\r\nREST_FRAMEWORK = {\r\n    \'<b>DEFAULT_PERMISSION_CLASSES</b>\': [                                              - разрешения\r\n        \'rest_framework.permissions.AllowAny\',                                   - настройка по умолчанию, доступ для всех\r\n        \'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly\'        - авторизованные пользователи делают что хотят, а анонимы только читают\r\n        ],\r\n    \'<b>DEFAULT_AUTHENTICATION_CLASSES</b>\': (\r\n        \'rest_framework_simplejwt.authentication.JWTAuthentication\',\r\n        \'rest_framework.authentication.SessionAuthentication\',\r\n        ),\r\n    \'<b>DEFAULT_PAGINATION_CLASS</b>\':                                                 - настройки пагинации\r\n        \'rest_framework.pagination.PageNumberPagination\',\r\n    \'<b>PAGE_SIZE</b>\': 10,\r\n    \'<b>DEFAULT_RENDERER_CLASSES</b>\': [\'rest_framework.renderers.JSONRenderer\'],       - рендеры\r\n    \'<b>DEFAULT_PARSER_CLASSES</b>\': [\'rest_framework.parsers.JSONParser\',]             - парсеры\r\n    }\r\n> </pre>\r\n\r\n> <pre>\r\nCORS_ORIGIN_WHITELIST = (                                                - <b>CORS</b>-защита. Список разрешённых доменов\r\n    \'http://localhost:3000\',                                             - стандартный порт REACT\r\n    \'http://localhost:8000\',\r\n    )\r\n> </pre>','2022-09-22','DJANGO REST/настройки в settings.py',18,4),(37,'Django REST','API  views&viewsets','api-viewsviewsets','### Тут собрана информация об универсальных views для api и их полях\r\n\r\n> <pre>\r\nfrom rest_framework import generics                            - тут лежат универсальные views\r\nfrom rest_framework import permissions                         - тут лежат встроенные разрешения (AllowAny, IsAuthenticated, IsAdminUser, IsAuthenticatedOrReadOnly)\r\nfrom rest_framework.authentication import BasicAuthentication  - тут лежат классы для аутентификации\r\nfrom .serializers import TodoSerializer\r\nfrom .models import Todo                                                                       \r\n<br>\r\nclass ListTodo(generics.<b>ListAPIView</b>):                          - view только для чтения списка объектов. Выгружаем объекты и указываем как их представлять (какой serializer)\r\n    authentication_classes = (BasicAuthentication,)            - аутентификация для конкретного view \r\n    permission_classes = [permissions.IsAuthenticated, IsOwner]- список разрешений <b>view-level</b>, проигнорирует разрешения project-level\r\n    queryset = Todo.objects.all()\r\n    serializer_class = TodoSerializer<br>\r\n    filter_backends = (filters.DjangoFilterBackend,)           - это для django-filters, чтобы динамически фильтровать данные\r\n    filterset_class = CarFilter<br>\r\n    <b>def get_queryset(self)</b>:                                    - альтернатива стандартному queryset\r\n        queryset = Todo.objects.filter(...)<br>\r\n    <b>def get_serializer_class</b>(self):                            - так можно выбирать serializers в зависимости от действия (create, destroy, update...). Переопред. встроенного метода\r\n        if <b>self.action</b> == \"create\":                            - так можно проверять action\r\n            return PostDealerCarsSerializer\r\n        return super().get_serializer_class()\r\n<br>\r\nclass DetailTodo(generics.<b>RetrieveAPIView</b>):                    - view для отображения отдельно взятого объекта\r\n    queryset = Todo.objects.all()\r\n    serializer_class = TodoSerializer\r\n    <b>lookup_field</b> = \'pk\'                                          - поле модели, параметр которого передаётся в view для поиска единичного объекта\r\n<br>\r\nclass PostList(generics.<b>ListCreateAPIView</b>):                    - view для чтения списка объектов и <b>создания новых</b> объектов\r\n    queryset = Post.objects.all()\r\n    serializer_class = TodoSerializer<br>\r\n    def <b>perform_create</b>(self, <b>serializer</b>):                        - функция для сохранения, <i>serializer</i> передаётся именно так\r\n        vd = serializer.<b>validated_data</b>                           - аналог <i>cleaned_data</i> в формах\r\n        user = get_object_or_404(\r\n            User, <b>id=self.request.data.get</b>(\'user\')               - пример того, как залазить в данные из <b>post</b>\r\n        <b>return serializer.save()</b>                                 - вот так возвращаем. !!!Если это не ModelSerializer, нужно будет внутри serializer`a прописывать методы на сохранение\r\n<br>\r\nclass PostDetail(generics.<b>RetrieveUpdateDestroyAPIView</b>):       - view для <b>чтения, редактирования и удаления</b> объектов\r\n    queryset = Post.objects.all()\r\n    serializer_class = TodoSerializer\r\n<br>\r\nclass PostUpdate(generics.<b>UpdateAPIView</b>):\r\n    queryset = Post.objects.all()\r\n    serializer_class = TodoSerializer\r\n    lookup_field = \'pk\'<br>\r\n    <b>def perform_update</b>(self, serializer):                        - можно переписать для расширения функционала\r\n        instance = serializer.save()\r\n<br>\r\nclass PostDelete(generics.<b>DestroyAPIView</b>):\r\n    queryset = Post.objects.all()\r\n    serializer_class = TodoSerializer\r\n    lookup_field = \'pk\'<br>\r\n    <b>def perform_destroy</b>(self, <b>instance</b>):                        - метод для удаления принимает не <i>serializer</i>, а <u>сам объект</u>\r\n        ...\r\n        super().perform_destroy(instance)\r\n> </pre>\r\n\r\n---\r\n\r\n### GenericAPIView\r\n\r\nСоздаём class-based views на базе универсального класса + Mixins\r\n\r\n> <pre>\r\nfrom rest_framework import generics, <b>mixins</b>                      - миксины лежат там же где и generics\r\n...\r\n<br>\r\nclass ProducMixinView(<b>mixins.ListModelMixin</b>,                     - этот mixin позволит использовать list-метод\r\n                mixins.RetrieveModelMixin,\r\n                mixins.CreateModelMixin,\r\n                generics.GenericAPIView):\r\n    queryset = Product.objects.all()\r\n    serializer_class = ProductSerializer\r\n    lookup_field = \'pk\'                                          - pk и так по умолчанию, можно не указывать. Это для RetrieveModelMixin\r\n    <b>def get</b>(self, \\*args, \\*\\*kwargs):\r\n        pk = kwargs.get(\'pk\')\r\n        if pk:\r\n            return self.<b>retrieve</b>(request, \\*args, \\*\\*kwargs)    - метод от RetrieveModelMixin\r\n        reurn self.<b>list</b>(request, \\*args, \\*\\*kwargs)             - метод от ListModelMixin\r\n    <b>def post</b>(self, \\*args, \\*\\*kwargs):\r\n        return self.<b>create</b>(request, \\*args, \\*\\*kwargs)          - метод от CreateModelMixin\r\n<br>\r\n    <b>def perform_create</b>(self, serializer):                        - мы до сих пор можем использовать методы <i>perform_</i>, потому что generic views  базируются на mixins \r\n        ...\r\n<br>\r\n\r\n\r\n\r\n\r\n---\r\n\r\n### Custom api views\r\n\r\nСоздают на основе класса *APIView*:\r\n\r\n> <pre>\r\nfrom django.shortcuts import get_object_or_404\r\nfrom rest_framework.decorators import <b>api_view</b>                   - для function-based views  \r\nfrom rest_framework.views import <b>APIView</b>                          - универсальный api-view для своих view\r\nfrom rest_framework.response import <b>Response</b>                      - у api свой response, отличный от django. Нужно импортировать отдельно\r\nfrom ..models import Course<br>\r\nclass CourseEnrollView(APIView):\r\n    def post(self, request, pk, format=None):                     - будет работать только post-запрос\r\n        course = get_object_or_404(Course, pk=pk)\r\n        course.students.add(request.user)\r\n        return Response({\'enrolled\': True})                       - вот так возвращаем ответ\r\n<br>\r\n<b>@api_view([\'POST\'])</b>                                              - декоратор для function-based view, можно указывать методы с которыми работает\r\n@authentication_classes([])                                      - лежат там же, где и все остальные декораторы\r\n@permission_classes([])\r\ndef api_home(request, \\*args, \\**kwargs):\r\n    serializer = <b>TodoSerializer(data=request.data)</b>               - как и с формами для метода post принимаем данные и десериализируем\r\n    if <b>serializer.is_valid(raise_exception=True)</b>:                - serializer проверяет данные, raise_exception добавит в response информацию (как у форм)\r\n        ...\r\n        serializer.<b>save()</b>                                        - сохранить объект в БД\r\n    return Response({\"INVALID\":\"Wrong data\"}, status=400)        - вот так <b>отправляем ошибку</b>\r\n> </pre>\r\n\r\n---\r\n\r\n## Viewsets\r\n\r\nЕщё один уровень абстракции над *views*. Один veiwset может заменить несколько views, уменьшая количества кода, который нужно написать, но усложняя его читабельность.<br>\r\nИспользуется, чтобы не повторять одинаковые куски кода в разных views. Например можно свести в один viewset List- и Detail-view.<br>\r\n!!!***Viewsets*** работают только с *<b>routers</b>*. Поэтому нужно обязательно настраивать и их!!!<br>\r\n[Документация](https://www.django-rest-framework.org/api-guide/viewsets/)\r\n\r\n> <pre>\r\nfrom rest_framework import <b>viewsets</b>                            - тут лежат универсальные viewsets\r\n<br>\r\nclass PostViewSet(viewsets.<b>ModelViewSet</b>):                      - <b>ModelViewSet</b> заменит собой views для просмотра списка объектов и детально одного объекта\r\n    permission_classes = (IsAuthorOrReadOnly,)                 - начинка та же, что и у views\r\n    queryset = Post.objects.all()\r\n    serializer_class = PostSerializer\r\n<br>\r\nclass CourseViewSet(viewsets.<b>ReadOnlyModelViewSet</b>):            - со встроенными ограничениями\r\n    queryset = Course.objects.all()\r\n    serializer_class = CourseSerializer\r\n<br>\r\nclass DealerViewSet(viewsets.GenericViewSet,                - сборный viewset. Просто используй GenericViewSet и подмешивай необходимый функционал миксинами\r\n    mixins.ListModelMixin, mixins.RetrieveModelMixin,\r\n    mixins.UpdateModelMixin, mixins.DestroyModelMixin):<br>\r\n    permission_classes = ...                                - задаёшь нужные параметры\r\n    queryset = ...\r\n    serializer_class = ...\r\n    authentication_classes = ...<br>\r\n    def list(self, request):                                - если нужно переписать методы под себя\r\n        ...<br>\r\n    def retrieve(self, request, pk):\r\n        ...<br>\r\n    def perform_create(self, serializer):\r\n        ...\r\n\r\n> </pre>\r\n\r\n### Добавление custom actions для viewset\r\n\r\n> <pre>\r\nfrom rest_framework.decorators import <b>action</b>                                         - декоратор позволит создавать свои действия помимо list, retrieve и пр.<br>\r\nclass CourseViewSet(viewsets.ReadOnlyModelViewSet):                                  - такой viewset может одновременно обрабатывать запросы по отображению всех курсов, конкретного курса и запись на него\r\n	queryset = Course.objects.all()\r\n	serializer_class = CourseSerializer\r\n	<b>@action</b>(detail=True, methods=[\'post\'],                                           - <b>detail=True</b> означает, что action только для конкретного объекта, по дефолту метод GET, если нужен другой - указываем\r\n		authentication_classes=[BasicAuthentication],                                - также для конкретно этого действия накатываем permissions\r\n		permission_classes=[IsAuthenticated])                                        -! можно сюда также указывать специфические serializers\r\n	<b>def enroll(self, request, \\*args, \\*\\*kwargs)</b>:                                      - так регистрируем своё кастомное действие. Enroll будет частью ссылки\r\n		course = self.get_object()\r\n		course.students.add(request.user)\r\n		return Response({\'enrolled\': True})\r\n> </pre>\r\n\r\n> *!роутер сам сгенерит нужную ссылку, её не нужно прописывать в urls.py (.../api/courses/1/enroll/)*','2022-09-22','DJANGO REST/api  views&viewsets',18,4),(38,'Django','TestCase','testcase','*Встроенная в Django утилита для автоматического тестирования.<br>\r\nДля тестов Django создаёт отдельный файлик <b>tests.py</b>. Работаем с ним:*\r\n\r\n> <pre>\r\nfrom django.test import TestCase                                                  - от него будем наследовать классы для тестов\r\nfrom .models import Todo                                                          - модель, которую тестируем<br>\r\nclass TodoModelTest(TestCase):                                                    - делаем класс для тестов<br>\r\n    @classmethod\r\n    def setUpTestData(cls):                                                       - так создаётся тестовая БД с нужными моделями\r\n        Todo.objects.create(title=\'first todo\', body=\'a body here   \r\n    def test_title_content(self):                                                 - так сравниваем поле модели с эталоном\r\n        todo = Todo.objects.get(id=1)\r\n        expected_object_name = f\'{todo.title}\'\r\n        self.assertEquals(expected_object_name, \'first todo\')<br>\r\n    def test_body_content(self):\r\n        todo = Todo.objects.get(id=1)\r\n        expected_object_name = f\'{todo.body}\'\r\n        self.assertEquals(expected_object_name, \'a body here\')\r\n> </pre>\r\n\r\nОстаётся только дать команду для *manage.py*: `python manage.py test`<br>\r\nDjango автоматически создаст независимую тестовую БД, заполнит её данными, выполнит тесты и удалит БД.\r\n\r\n<hr>\r\n\r\n# Для покрытия тестами всего функционала одного файлика <b>tests.py</b> не хватит. \r\n\r\nВ больших проектах обычно создаётся отдельная папка <i>tests</i> и в ней заводятся отдельные файлы с тестами для каждого файла в проекте <i>(+ __init__.py)</i>. Обычно это:<br>\r\n\r\n- test_urls.py\r\n- test_views.py\r\n- test_models.py\r\n- test_forms.py','2022-09-22','DJANGO/тесты/testcase',19,3),(39,'Django REST','Permissions (authorization)','permissions-authorization','Разрешения бывают трёх уровней: на уровне проекта, на уровне view и на уровне отдельного объекта.<br>\r\nМожно делать свои собственные permissions, можно использовать встроенные (`from rest_framework import permissions`):\r\n\r\n- AllowAny\r\n- IsAuthenticated\r\n- IsAdminUser\r\n- IsAuthenticatedOrReadOnly\r\n\r\n... можно использовать DjangoPermissions\r\n\r\n### Разрешения на уровне проекта\r\n\r\nСамое базовое разрешение ко всему проекту. Настраивается в *settings.py*. <b>!!!Может быть проигнорировано</b>, если есть permissions на уровне view/object:\r\n\r\n\r\n> <pre>\r\nREST_FRAMEWORK = {\r\n    \'DEFAULT_PERMISSION_CLASSES\': [\r\n        \'rest_framework.permissions.IsAuthenticated\',\r\n        ]\r\n    }\r\n> </pre>\r\n\r\n### Разрешения на уровне view\r\n\r\nИмпортим разрешения и вставляем их в необходимый generic view\r\n\r\n> <pre>\r\nfrom rest_framework import generics, permissions               - тут лежат встроенные разрешения (AllowAny, IsAuthenticated, IsAdminUser, IsAuthenticatedOrReadOnly)\r\nfrom .serializers import TodoSerializer<br>               \r\nfrom .models import Todo\r\n<br>\r\nclass ListTodo(generics.<b>ListAPIView</b>):                          \r\n    permission_classes = (permissions.IsAuthenticated,)        - список разрешений <b>view-level</b>, проигнорирует разрешения project-level\r\n    queryset = Todo.objects.all()\r\n    serializer_class = TodoSerializer\r\n> </pre>\r\n\r\n---\r\n\r\n### Custom permissions\r\n\r\nВсе permissions наследуют от общего предка - class **BasePermission**(object), у которого есть методы def **has_permission**(self, request, view) и def **has_object_permission**(self, request, view, **obj**)<br>\r\nМетоды должны возвращать **True** или **False**.<br>\r\nУнаследовав от этого класса и переписав один из этих методов можно получить своё собственное разрешение.<br><br>\r\n\r\nВ папке конкретного приложения создаём новый файл *permissions.py*:\r\n\r\n> <pre>\r\nfrom rest_framework import permissions                                       - тут лежит тот самый BasePermission<br>\r\nclass IsAuthorOrReadOnly(permissions.<b>BasePermission</b>):\r\n    <b>def has_object_permission</b>(self, request, view, obj):\r\n        if request.method in permissions.<b>SAFE_METHODS</b>:                       - SAFE_METHODS это GET, OPTIONS, HEAD\r\n            return True<br>\r\n        return obj.author == request.user\r\n<br>\r\nclass IsStaffEditorPermission(permissions.DjangoModelPermissions):\r\n    <b>def has_permission</b>(self, request, view):\r\n        if request.user.is_staff:\r\n            if request.user.has_perm(\"products.view_product\"):        - синтаксис permissions: appname.view_modelname\r\n                return True\r\n            return False\r\n        return False\r\n> </pre>\r\n\r\nОстанется только импортировать кастомный permission (`from .permissions import IsAuthorOrReadOnly`) и включить его в настройки/view','2022-09-27','DJANGO REST/permissions (authorization)',18,4),(40,'Django REST','Authentication (аутентификация)','authentication-autentifikatsiia','### Немного теории\r\n\r\nDjango REST wramework предлагает 4 типа встроенной аутентификации:\r\n\r\n+ **Basic Authentification**:\r\n\r\n    > Клиент делает request на сервер, сервер отвечает 401 Unauthorized с полем www-Authenticate в котором способ аутентификации, клиент отсылает новый request с полем Authorization, в котором указаны данные аутентификации.<br>\r\nМетод хорош только тем, что он простой и его быстро реализовать.<br>\r\nПлохой, потому что нужно авторизовывать *каждый* request, данные передаются в открытом виде, поэтому *только* HTTPS.\r\n\r\n+ **Session Authentication**:\r\n\r\n    > Используется в стандартной Django.<br>\r\nЮзер вводит данные аутентификации, сервер всё проверяет и создаёт объект сессии. Сервер передаёт *session ID* клиенту, который будет его хранить в cookies и передавать в каждом запросе.<br>\r\nХорош тем, что креды передаются только один раз и не нужно аутентифицировать пользователя каждый раз.\r\nПлох тем, что cookies передаются всегда, даже когда не нужна аутентификация (не оптимально), каждая сессия только для одного браузера и в целом это *statefull-подход*, а api у нас *stateless*. Также есть проблемы со скалированием для больших сервисов на много доменов и серверов.\r\n\r\n+ **Token Authentication**:\r\n\r\n    > Самый современный и продвинутый подход.<br>\r\nКлиент получает токен. Делает запрос, требующий аутентификации, сервер отдаёт 401 Unauthorized с полем www-Authenticate с указанием, что нужен токен. Клиент высылает новый запрос с токеном.<br>\r\nПлюсы: токен хранится на фронтэнде, сервер помнит только валидный он или нет. Можно использовать один токен для разных фронтэндов (браузеры, api, мобильное приложение).\r\nМинусы: вся информация о пользователе хранится в токене, размер токена может быть большим и должен передаваться каждый раз. Часто *только один* токен выдаётся одному юзеру.\r\n\r\n+ **RemoteUserAuthentication**:\r\n\r\n    > Делегируем аутентификацию третьим лицам.\r\n\r\nМожно сделать свою ***собственную систему аутентификации***. Для этого нужно унаследовать от класса *BaseAuthentication* и переписать его метод *authenticate()* так как нужно тебе.\r\n\r\nЕсли аутентификация проходит корректно, django в request добавляет нужного user\\`a (`request.user`). В противном случае туда вкладывают класс `AnonymousUser`. \r\n\r\nДокументация по аутентификации [здесь](https://www.django-rest-framework.org/api-guide/authentication/)\r\n\r\n---\r\n\r\n### Настраиваем проект глобально под **Token Authentication**\r\n\r\n- В *settings.py* указываем тип аутентификации. Можно несколько.\r\n\r\n> По умолчанию это Basic Authentification (первичная для получения Session ID) и Session Authentication (для работы в браузере).<br>\r\nМы будем использовать токены:\r\n\r\n>> <pre>\r\n<b>REST_FRAMEWORK</b> = {\r\n    \'DEFAULT_PERMISSION_CLASSES\': [\r\n        \'rest_framework.permissions.IsAuthenticated\',\r\n        ],\r\n    <b>\'DEFAULT_AUTHENTICATION_CLASSES\'</b>: [\r\n        \'rest_framework.authentication.SessionAuthentication\',\r\n        \'rest_framework.authentication.<b>TokenAuthentication</b>\',\r\n        ],\r\n    }\r\n}\r\n>> </pre>\r\n\r\n> Также нужно добавить новое приложение `rest_framework.authtoken` в список приложений и *сделать migrate*:\r\n\r\n>> <pre>\r\nINSTALLED_APPS = [\r\n    ....\r\n    #3d_party apps\r\n    \'rest_framework\',\r\n    <b>\'rest_framework.authtoken\'</b>,\r\n>> </pre>\r\n\r\n- Чтобы пользователи могли делать логин/логаут и менять пароли, реализуем функционал *log in, log out и password reset API endpoints* с помощью стороннего приложения <b>django-rest-auth</b>. Устанавливаем и добавляем его в *settings.py*, настраиваем путь в *urls.py проекта*:\r\n\r\n> `pip install django-rest-auth`\r\n\r\n> *settings.py*:\r\n\r\n>> <pre>\r\nINSTALLED_APPS = [\r\n    ....\r\n    #3d_party apps\r\n    \'rest_framework\',\r\n    \'rest_framework.authtoken\',\r\n    <b>\'rest_auth\'</b>,\r\n>> </pre>\r\n\r\n> *project urls.py*:\r\n\r\n>> <pre>\r\nurlpatterns = [\r\n    path(\'admin/\', admin.site.urls),\r\n    path(\'api/v1/\', include(\'posts.urls\')),\r\n    path(\'api-auth/\', include(\'rest_framework.urls\')),\r\n    <b>path(\'api/v1/rest-auth/\', include(\'rest_auth.urls\')),</b> \r\n]\r\n>> </pre>\r\n\r\n> Настройки выше дадут возможность использовать следующие *end-point`ы*:\r\n\r\n> 1. http://127.0.0.1:8000/api/v1/rest-auth/login/\r\n> 2. http://127.0.0.1:8000/api/v1/rest-auth/logout/\r\n> 3. http://127.0.0.1:8000/api/v1/rest-auth/password/reset\r\n> 4. http://127.0.0.1:8000/api/v1/rest-auth/password/reset/confirm\r\n\r\n- Регистрация новых пользователей. Расширим функционал <b>django-rest-auth</b> ещё одним сторонним пакетом приложений - **django-allauth**. В сочетании с предыдущим пакетом, этот позволит создавать и логинить новых пользователей, а также возможность регистрации с помощью social-media accounts, таких как учётки google, facebook и пр.\r\n\r\n> `pip install django-allauth`\r\n\r\n> Использует много зависимостей с другими приложениями, поэтому в *settings.py* нужно зарегистрировать много новых приложений и явно указать некоторые настройки и *мигрировать*.<br>\r\n*settings.py*:\r\n\r\n>> <pre>\r\nINSTALLED_APPS = [\r\n    \'django.contrib.admin\',\r\n    \'django.contrib.auth\',\r\n    \'django.contrib.contenttypes\',\r\n    \'django.contrib.sessions\',\r\n    \'django.contrib.messages\',\r\n    \'django.contrib.staticfiles\',\r\n    <b>\'django.contrib.sites\'</b>,                                                - фрэймворк, который позволяет django работать одновременно с несколькими\r\n                                                                             проектами. Новое приложение требует явно указывать ID проекта<br>\r\n    # 3rd-party apps\r\n    \'rest_framework\',\r\n    \'rest_framework.authtoken\',\r\n    <b>\'allauth\'</b>,\r\n    <b>\'allauth.account\'</b>,\r\n    <b>\'allauth.socialaccount\'</b>,                                               - видимо для google/facebook и пр.\r\n    <i>\'rest_auth\'</i>,                                                           - !!!Обрати внимание на порядок. Мы его добавляли в прошлом пункте\r\n    <b>\'rest_auth.registration\'</b>,<br>\r\n    ...\r\n<br>\r\n<b>EMAIL_BACKEND</b> = \'django.core.mail.backends.console.EmailBackend\'           - Будет отсылать письма о регистрации/смене пароля. \r\n                                                                             Поэтому нужен настроенный почтовый сервер\r\n<b>SITE_ID</b> = 1                                                                - Настройка приложения *django.contrib.sites*. *django-allauth* требует \r\n                                                                             явно указывать приложение, с которым мы работаем.\r\n>> </pre>\r\n\r\n> Добавляем пути в *project urls.py*:\r\n\r\n>> <pre>\r\nurlpatterns = [\r\n    ....\r\n    path(\'api/v1/rest-auth/\', include(\'rest_auth.urls\')),\r\n    <b>path(\'api/v1/rest-auth/registration/\', \r\n        include(\'rest_auth.registration.urls\'))</b>,\r\n]\r\n>> </pre>\r\n\r\n> Настройки выше дадут пользователям возможность регистрироваться и получать токены. Получим новый end-point:\r\n>> http://127.0.0.1:8000/api/v1/rest-auth/registration/\r\n\r\nАутентификация настроена!<br>\r\nПри создании нового юзера/аутентификации уже существующих, создаётся токен, который высылается на frontend. Frontend должен его сохранить и слать в полях каждого запроса на сервер.\r\n\r\n---\r\n\r\n#### Аутентификация для конкретного view:\r\n\r\n> <pre>\r\nfrom rest_framework.authentication import <b>BasicAuthentication</b><br>\r\nclass CourseEnrollView(APIView):\r\n    <b>authentication_classes</b> = (BasicAuthentication,)                          - просто добавь список классов, как это делается для permissions и serializers\r\n    # ...\r\n> </pre>','2022-09-28','DJANGO REST/authentication (аутентификация)',18,4),(41,'Django REST','Routers','routers','**Routers** работают вместе с *viewsets* и выполняют точно такую же функцию, только для urls, а не для views - собирают в одну строчку несколько строк обычного кода.<br>\r\nRouters автоматически генерируют нам url-пути для разных кейсов. Например можно собрать в одну запись пути для отображения списка объектов и одного объекта детально.<br>\r\nRouters бывают **SimpleRouter**, **DefaultRouter** (создаёт дополнительный путь, по которому выведет все возможные list-пути) и **CustomRouter**.<br>\r\n[Документация](https://www.django-rest-framework.org/api-guide/routers/)\r\n\r\n> <pre>\r\nfrom django.urls import path, include\r\nfrom rest_framework import <b>routers</b>                                        - импортим рутер\r\nfrom . import views<br>\r\nrouter = routers.<b>DefaultRouter()</b>\r\nrouter.register(\'courses\', views.CourseViewSet)                           - иногда нужно будет добавлять третьим параметром <b>basename</b>\r\n<br>\r\n\\#urlpatterns = router.urls\r\n<br>\r\nurlpatterns = [                                                           - смешенный вариант\r\n	path(\'<int:pk\\>/\', views.ProductDetailAPIView.as_view()),          - передаём параметры также как и в обычной джанге\r\n	path(\'\', include(router.urls)),\r\n]\r\n> </pre>\r\n\r\n---\r\n\r\n### Пример с боевого проекта:\r\n\r\n\r\n> <pre>\r\nfrom django.urls import path, include\r\nfrom rest_framework import routers<br>\r\nfrom cars.views import CarsViewSet, DealerViewSet,                    - у этих viewsets есть опции для create, retrieve, update, destroy \r\n    DealerCarsViewSet, AutoSaloonViewSet, SaloonCarsViewSet<br>\r\nrouter = routers.<b>DefaultRouter()</b>\r\nrouter.<b>register</b>(\'autos\', CarsViewSet)\r\nrouter.register(\'dealer\', DealerViewSet)\r\nrouter.register(<b>\'dealer_cars\', DealerCarsViewSet</b>)                     - см. ниже какие urls будут созданы\r\nrouter.register(\'saloon_cars\', SaloonCarsViewSet)\r\nrouter.register(\'autosaloon\', AutoSaloonViewSet)<br>\r\nurlpatterns = router.urls\r\n> </pre>\r\n\r\n<b>Вот так выглядит DealerCarsViewSet</b>:\r\n\r\n> <pre>\r\nclass DealerCarsViewSet(viewsets.ModelViewSet):\r\n    permission_classes = [permissions.IsAuthenticated, IsOwner]\r\n    queryset = DealerCars.objects.all()\r\n    serializer_class = DealerCarsSerializer\r\n    authentication_classes = (JWTAuthentication,)<br>\r\n    def get_serializer_class(self):\r\n		if self.action == \"create\":\r\n			return PostDealerCarsSerializer\r\n		return super().get_serializer_class()<br>\r\n    <b>def retrieve</b>(self, request, pk):                                  - создаст url /dealer_cars/<pk> (GET)\r\n        car = get_object_or_404(DealerCars, pk=pk)\r\n        serializer = DealerCarsSerializer(car)\r\n        return Response(serializer.data)\r\n    <b>def list</b>(self, request):                                          - создаст url /dealer_cars/ (GET)\r\n        dealer = get_object_or_404(Dealer, admin=self.request.user)\r\n        cars = DealerCars.objects.filter(dealer=dealer)\r\n        serializer = DealerCarsSerializer(cars, many=True)\r\n        return Response(serializer.data)<br>\r\n    <b>def perform_create</b>(self, serializer):                             - создаст url /dealer_cars/ (CREATE)\r\n        dealer = get_object_or_404(Dealer, admin=self.request.user)\r\n        try:\r\n            return serializer.save(dealer=dealer)\r\n        except:\r\n            raise ValidationError(\"\r\n                This car is already exists for this dealer\")<br>\r\n    @action(detail=True, methods=[\'post\'],\r\n        serializer_class=AttachDealerDiscountSerializer)\r\n    <b>def add_discount</b>(self, request, pk=None):                         - создаст url /dealer_cars/add_discount/ (POST)\r\n        car = self.get_object()\r\n        discount_id = request.data[\'discounts\']\r\n        get_object_or_404(DealerDiscount, id=discount_id,\r\n            seller__admin=request.user)\r\n        car.car_discount.add(discount_id)\r\n        return Response(DealerCarsSerializer(car).data)<br>\r\n    @action(detail=True, methods=[\'delete\'],\r\n        url_path=r\'remove_discount/(?P<discount_id>\\d+)\')\r\n    <b>def remove_discount</b>(self, request, discount_id, pk=None):         - создаст url /dealer_cars/remove_discount/<discount_id>/\r\n        dealercar = get_object_or_404(DealerCars, pk=pk,\r\n            dealer__admin=request.user)\r\n        dealercar.car_discount.remove(discount_id)\r\n        return Response(DealerCarsSerializer(dealercar).data)\r\n> </pre>','2022-10-03','DJANGO REST/routers',18,4),(42,'Django REST','Schemas&Documentation','schemasdocumentation','> Приятная для глаз документация для тех, кто будет пользоваться вашим API. Создаётся автоматически. Можно узнать какие есть end-point`ы, что они делают и как их использовать. Есть web-interface, который эмулирует запросы.<br>\r\n> Есть много подходов через сторонние/встроенные приложения (***openAPI/Swagger***). Часть из них устарела(***Core API***).\r\n\r\n## Современный популярный документатор drf-yasg\r\n\r\n+ Установка: `pipenv install drf-yasg`\r\n+ Добавляем его в <i>settings.py</i> INSTALLED_APPS: `\'drf_yasg\',`\r\n+ Работаем с главным <i>urls.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom django.urls import path, <b>re_path</b>, include\r\nfrom rest_framework import <b>permissions</b>                                          - документация требует явно указывать разрешения, поэтому не забываем их импортить\r\nfrom drf_yasg.views import get_schema_view                                      - необходимые импорты для документации\r\nfrom drf_yasg import openapi\r\n<br>\r\nschema_view = get_schema_view(                                                  - до <i>url_patterns</i> создаём схему документации\r\n   openapi.Info(\r\n      title=\"Snippets API\",\r\n      default_version=\'v1\',\r\n      description=\"Autosaloon project documentation\",\r\n      terms_of_service=\"https://www.google.com/policies/terms/\",\r\n      contact=openapi.Contact(email=\"contact@snippets.local\"),\r\n      license=openapi.License(name=\"BSD License\"),\r\n   ),\r\n   public=True,                                                                 - кому видна схема\r\n   permission_classes=[permissions.AllowAny],                                   - обязательно указать разрешения\r\n)\r\n<br>\r\nurlpatterns = [\r\n    path(\'admin/\', admin.site.urls),\r\n    ...\r\n    re_path(r\'^swagger(?P<format>\\.json|\\.yaml)$\',                                        - необходимые url-паттерны. <b>!!!Возможно $ нужно будет убрать!!!</b> (проблема версий django)\r\n        schema_view.without_ui(cache_timeout=0), name=\'schema-json\'),\r\n    re_path(r\'^swagger/$\',\r\n        schema_view.with_ui(\'swagger\', cache_timeout=0), name=\'schema-swagger-ui\'),\r\n    re_path(r\'^redoc/$\',\r\n        schema_view.with_ui(\'redoc\', cache_timeout=0), name=\'schema-redoc\'),\r\n    ...\r\n> </pre>\r\n\r\n\r\n---\r\n\r\n### Schema через Core API\r\n\r\nУстанавливаем **coreapi** и **pyyaml**(для рендеринга схемы в удобный yaml-формат). Даже в *settings.py* добавлять ничего не нужно:\r\n\r\n> `pip install coreapi`<br>\r\n> `pip install pyyaml`\r\n\r\nРаботаем с *urls.py* проекта:\r\n\r\n> <pre>\r\nfrom django.contrib import admin\r\nfrom django.urls import include, path\r\n<b>from rest_framework.schemas import get_schema_view</b>                    - импортим встроенную схему<br>\r\nAPI_TITLE = \'Your title\'\r\nAPI_DESCRIPTION = \'Hint to describe your api\'<br>\r\n<b>schema_view = get_schema_view(title=\'API_TITLE\')</b>                      - создаём view на базе нашей схемы<br>\r\nurlpatterns = [\r\n    path(\'admin/\', admin.site.urls),\r\n    ...\r\n    <b>path(\'schema/\', schema_view),</b>                                     - включаем её в список\r\n    ]\r\n> </pre>\r\n\r\nТеперь можно получить схему через end-point `localhost:8000/schema/`<br>\r\nСама по себе схема не user-friendly, поэтому наверх схемы настраивают ещё и документацию\r\n\r\n---\r\n\r\n### встроенная Documentation\r\n\r\nПросто добавляем код в *urls.py* проекта:\r\n\r\n> <pre>\r\nfrom django.contrib import admin\r\nfrom django.urls import include, path\r\n<b>from rest_framework.documentation import include_docs_urls</b>            - импортим встроенную функцию\r\nfrom rest_framework.schemas import get_schema_view                    \r\n...<br>\r\nurlpatterns = [\r\n    path(\'admin/\', admin.site.urls),\r\n    ...\r\n    <b>path(\'docs/\', include_docs_urls(title=\'API_TITLE\',\r\n        description=API_DESCRIPTION)),</b>                                - делаем ещё один end-point, можно добавить описание\r\n    path(\'schema/\', schema_view),                                     \r\n    ]\r\n> </pre>\r\n\r\n**!!!**Такой подход устарел и не поддерживается из коробки. Нужно в *settings.py* явно указать DEFAULT_SCHEMA_CLASS:\r\n\r\n> <pre>\r\nREST_FRAMEWORK = {\r\n  ...\r\n  \'DEFAULT_SCHEMA_CLASS\': <b>\'rest_framework.schemas.coreapi.AutoSchema\'</b>\r\n}\r\n> </pre>\r\n\r\nТеперь через end-point `localhost:8000/docs/` можно получить крутой web-инструмент для работы с нашим api\r\n\r\n---\r\n\r\n### 3rd party documentation\r\n\r\nЕсть более современные документаторы. Например *[yet another swagger generator](https://drf-yasg.readthedocs.io/en/stable/readme.html#installation)*. Возможно дополню статью ими позже.\r\n\r\n---\r\n\r\n### httpbin\r\n\r\nКрутой сайт для тестов responses на твой api: [сайт](https://httpbin.org/)','2022-10-03','DJANGO REST/schemas&documentation',18,4),(43,'Django REST','Serializers, renders, parsers','serializers-renders-parsers','Указывают какие данные и в каком формате передавать от backend к frontend. Обычно данные передаются в JSON или XML.<br>\r\nБывают трёх видов:\r\n\r\n- Serializer - работают с обычными классами языка python\r\n- ModelSerializer - для моделей БД (большой плюс, что они идут сразу с методами create и update и с некот. автозаполнениями)\r\n- HyperlinkedModelSerializer - то же что и ModelSerializer, но отношения между моделями показаны не через primary key, а ссылками (links)\r\n\r\nДокументация на serializers есть [тут](https://www.django-rest-framework.org/api-guide/serializers/)\r\n\r\nSerializers живут в файле *serializers.py*:\r\n\r\n> <pre>\r\nfrom rest_framework import serializers\r\nfrom books.models import Book<br>\r\nclass BookSerializer(serializers.ModelSerializer):                    - serializer для модели (можно иметь несколько разных для одной модели для разных кейсов)\r\n    price = serializers.<b>SerializerMethodField</b>(read_only=True)         - так можно добавлять доп. поля, корректировать имеющиеся, поля, отображающие рез-тат вып-ния функции\r\n    class Meta:                                                       - всего то в мете указать модель и необходимые поля\r\n        model = Book\r\n        fields = (\'title\', \'subtitle\', \'author\', \'isbn\', \'price\')\r\n        \\#fields = \'\\_\\_all\\_\\_\'\r\n        \\#exclude = (\'isbn\', )\r\n        <b>read_only_fields</b> = (\'author\', \'isbn\')                         - поля, которые нельзя будет редактировать (не будут выводиться в формах)                                      \r\n    <b>def get_price</b>(self, obj):                                         - поле price, метод в serializer <b>get_</b>price, имя метода объекта любое\r\n        return <b>obj</b>.calc_price()                                       - можно получить доступ к нужному инстансу\r\n> </pre>\r\n\r\n#### Встроенный (nested) serializer\r\n\r\n> Допустим у объекта есть связи со списком других объектов. Например одной дисциплине принадлежит несколько тем. Если сериализировать объект дисциплина как обычно, эта взаимосвязь отобразится списком id\\`s тем, которые соотносятся к дисциплине (т.к. в модели дисциплины хранятся только pk этих тем) . Если нам нужны не id\\`s, а другая информация по темам, нужно использовать nested serializer:\r\n\r\n> <pre>\r\nfrom rest_framework import serializers\r\nfrom ..models import Module<br>\r\nclass ModuleSerializer(serializers.ModelSerializer):                - обычный serializer, который мы вложим в другой serializer ниже\r\n    class Meta:\r\n        model = Module\r\n        fields = [\'order\', \'title\', \'description\']<br>\r\nclass CourseSerializer(serializers.ModelSerializer):\r\n    <b>modules = ModuleSerializer(many=True, read_only=True)</b>           - указываем поле, которое нужно сериализировать по-особому\r\n    class Meta:\r\n        model = Course\r\n        fields = [\'id\', \'subject\', \'title\', \'slug\',\r\n            \'created\', \'owner\', \'modules\']                          - и указываем его в мете обычным образом\r\n> </pre>\r\n\r\n> Также можно задавать отдельные serializers для конкретных полей и включать их в другие ModelSerializers:\r\n\r\n>> <pre>\r\nfrom ..models import Content<br>\r\nclass ItemRelatedField(<b>serializers.RelatedField</b>):                   - укажет как зарендерить контент конкретного поля перед передачей его в serializers\r\n    <b>def to_representation(self, value)</b>:                             - обязательный метод\r\n        return value.render()\r\nclass ContentSerializer(serializers.ModelSerializer):\r\n    <b>item = ItemRelatedField(read_only=True)</b>                         - укажем, что item нужно рендерить и сериализировать по-особому\r\n    class Meta:\r\n        model = Content\r\n        fields = [\'order\', \'item\']\r\n>> </pre>\r\n\r\n---\r\n\r\n### Работа с shell, рендеры (renders) и парсеры (parsers).\r\n\r\nРаботу serializer`a можно проверить через shell:\r\n\r\n> <pre>\r\npython manage.py shell\r\nfrom courses.models import Subject\r\nfrom courses.api.serializers import SubjectSerializer\r\nsubject = Subject.objects.latest(\'id\')\r\n<b>serializer = SubjectSerializer(subject)</b>                      - просто положи в serializer нужный объект\r\n<b>serializer.data</b>                                              - так вытягиваем из него информацию\r\n> </pre>\r\n\r\nПоследняя команда выдаст результат. Что-то вроде `{\'id\': 4, \'title\': \'Programming\', \'slug\': \'programming\'}`. Это ***питоновский словарь***, который frontend ***не поймёт***\r\n\r\nСериализированные данные перед отправкой в HTTP response нужно ещё зарендерить в нужный формат. Этим занимаются **renderers**.<br>\r\nИ наоборот, принятые в response данные нужно распарсить. Это делают **parsers**.<br>\r\nДокументацию по ним можно почитать тут: [рендеры](https://www.django-rest-framework.org/api-guide/renderers/), [парсеры](https://www.django-rest-framework.org/api-guide/parsers/)\r\n\r\n#### Так происходит парсинг:\r\n\r\n> <pre>\r\nfrom io import BytesIO                                               - по сети JSON-данные передаются байтами. Нужно как-то их считать\r\nfrom rest_framework.parsers import JSONParser                        - распарсит JSON в читабельный для python формат (словарь)\r\ndata = b\'{\"id\":4,\"title\":\"Programming\",\"slug\":\"programming\"}\'        - имитация пришедших данных\r\nJSONParser().parse(BytesIO(data))                                    - на выходе получим словарь {\'id\': 4, \'title\': \'Programming\', \'slug\': \'programming\'}\r\n> </pre>\r\n\r\n#### Так происходит рендеринг:\r\n\r\n> <pre>\r\nfrom rest_framework.renderers import JSONRenderer\r\nJSONRenderer().render(serializer.data)                               - получим JSON в байтах: b\'{\"id\":4,\"title\":\"Programming\",\"slug\":\"programming\"}\'\r\n> </pre>\r\n\r\n> Рендерить можно не только в JSON. Зачастую django rest смотрит в поле *Accept* запроса или на суффикс в *url* и по этим данным определяет нужный формат. Обычно использует 2 класса для рендеринга: JSONRenderer и BrowsableAPIRenderer (чтобы смотреть работу api в браузере).<br>\r\nМожно установить нужные рендеры в настройках *settings.py* `DEFAULT_RENDERER_CLASSES`','2022-10-04','DJANGO REST/serializers, renders, parsers',18,4),(44,'Django','Context processors','context-processors','**Context processors** - это функция, которая на входе принимает *request*, а на выходе выдаёт словарь, который автоматически добавится к *контексту* перед рендерингом страницы. Применяется ***глобально*** ко всему проекту, поэтому туда обычно пишут логику, которая должна выполняться для ***каждой*** страницы.<br>\r\nПо умолчанию в каждом проекте уже есть свои предустановленные процессоры:\r\n\r\n+ `django.template.context_processors.request`\r\n+ `django.template.context_processors.auth`\r\n+ `django.template.context_processors.debug`\r\n+ `django.template.context_processors.messages`\r\n+ `django.template.context_processors.csrf (вшит ещё глубже, его не видно и нельзя выключить)`\r\n\r\n#### В папке нужного приложения создаём файлик *context_processors.py*:\r\n\r\n> <pre>\r\nfrom .cart import Cart\r\n<br>\r\ndef cart(request):                                                                  - принимаем request, имя функции может быть любым\r\n    return {\'cart\': Cart(request)}                                                  - отдаём словарь\r\n> </pre>\r\n\r\n#### Добавляем наш процессор в *settings.py*:\r\n\r\n> <pre>\r\n<b>TEMPLATES</b> = [\r\n    {\r\n        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\r\n        \'DIRS\': [],\r\n        \'APP_DIRS\': True,\r\n        \'OPTIONS\': {\r\n            <b>\'context_processors\'</b>: [\r\n                \'django.template.context_processors.debug\',\r\n                \'django.template.context_processors.request\',\r\n                \'django.contrib.auth.context_processors.auth\',\r\n                \'django.contrib.messages.context_processors.messages\',\r\n                <b>\'cart.context_processors.cart\'</b>                                      - наша функция\r\n            ],\r\n        },\r\n    },\r\n]\r\n> </pre>\r\n\r\n#### Процессор готов к использованию','2022-10-07','DJANGO/context processors',4,4),(45,'Django','Настройка postgres в django app','nastroika-postgres-v-django-app','### Установка доп. софта:\r\n\r\n\r\n> <pre>\r\nsudo apt-get install <b>libpq-dev python-dev</b>               - чтобы подружить postgreSQL и python\r\nsudo apt-get install <b>postgresql postgresql-contrib</b>      - postgreSQL\r\npip install <b>psycopg2</b>                                    - установка ещё одного адаптера <b>уже в virtual env</b>\r\n> </pre>\r\n\r\n### Настройка пользователя в самой БД\r\n\r\n> <pre>\r\nsu postgres\r\ncreateuser -dP blog                     - создание пользователя-влядельца БД\r\ncreatedb -E utf8 -U blog blog           - создание БД и передача прав на неё вышесозданному пользователю\r\n> </pre>\r\n\r\n\r\n### работа с settings.py - добавляем новое приложение и меняем стандартные настройки для БД:\r\n\r\n\r\n\r\n> <pre>\r\n<b>INSTALLED_APPS</b> = [\r\n	# ...\r\n	<b>\'django.contrib.postgres\'</b>,\r\n	]<br>\r\n<b>DATABASES</b> = {\r\n		\'default\': {\r\n		\'ENGINE\': \'django.db.backends.postgresql\',\r\n		\'NAME\': \'blog\',\r\n		\'USER\': \'blog\',\r\n		\'PASSWORD\': \'*****\',\r\n	}\r\n}\r\n> </pre>\r\n\r\n***!!!Не забываем смигрировать и создать superuser для admin-сайта***','2022-11-10','DJANGO/orm и базы данных/postgres/настройка postgres в django app',20,3),(46,'Python','Итераторы и генераторы','iteratory-i-generatory','<b>Итератор</b> - объект, который реализует обход по коллекции другого элемента. Обязан включать в себя метод <i>\\_\\_next\\_\\_</i> без аргументов, который будет выдавать следующее значение из коллекции итерируемого объекта либо ошибку <i>StopIteration</i>, когда значения в коллекции закончатся.<br>\r\nТакже может включать в себя метод <i>\\_\\_iter\\_\\_</i>, который возвращает сам итератор. Тогда сам итератор становится итерируемым объектом.<br>\r\n\r\n\r\n> <pre>\r\nclass ListIterator(collections.abc.Iterator):                    - пример итератора\r\n    def \\_\\_init\\_\\_(self, collection, cursor):\r\n        self._collection = collection\r\n        self._cursor = cursor<br>\r\n    def \\_\\_next\\_\\_(self):                                          - обязательный метод <b>next</b>\r\n        if self._cursor + 1 >= len(self._collection):\r\n            raise StopIteration                                  - обязательный вызов ошибки\r\n        self._cursor += 1\r\n        return self._collection[self._cursor]<br>\r\n    def \\_\\_iter\\_\\_(self):                                          - чтобы итератор сам был итерируемым объектом\r\n        return self\r\n> </pre>\r\n\r\n<b>Итерируемый объект</b> - объект, у которого есть метод <i>\\_\\_iter\\_\\_</i>, который вернёт объект-итератор.<br>\r\n\r\n\r\n> <pre>\r\nclass ListCollection(collections.abc.Iterable):\r\n    def \\_\\_init\\_\\_(self, collection):\r\n        self._collection = collection<br>\r\n    def \\_\\_iter\\_\\_(self):                                          - метод вызывает итератор выше и передаёт ему коллекцию итерируемого объекта\r\n        return ListIterator(self._collection, -1)\r\n> </pre>\r\n\r\n<b>Примеры работы:</b><br>\r\n<br>\r\nПеребор обычно используется в <i>цикле for</i>, который \"под капотом\" вызывает метод <i>next()</i>, который вызывает <i>\\_\\_iter\\_\\_</i> итерируемого объекта и отлавливает исключение <i>StopIteration</i>.<br>\r\nНо иногда нужно делать это явно через метод <i>next</i>:<br>\r\n\r\n\r\n> <pre>\r\ncollection = [1, 2, 5, 6, 8]\r\naggregate = Iterable_Object(collection)<br>\r\nfor item in aggregate:                                      - вариант с циклом for\r\n    print(item)<br>\r\nitr = My_Iterator(aggregate)\r\nwhile True:                                                 - то же самое, но явно\r\n    try:\r\n        print(<b>next</b>(itr))                      - вызываем next и вкладываем в него итератор\r\n    <b>except StopIteration</b>:                     - отлавливаем исключение\r\n        break\r\n> </pre><br>\r\n\r\n<i>!!! В <b>next()</b> можно передавать второй параметр. Он будет возвращаться когда выйдет StopIteration</i>:\r\n\r\n        item = next(itr, \'Finished\')\r\n\r\n---\r\n\r\n## Генераторы и генераторные функции\r\n\r\nВ генераторах также как и в итераторах реализованы методы <b>\\_\\_next\\_\\_</b>, <b>\\_\\_iter\\_\\_</b> (т.е. каждый генератор - это итератор), но генераторы не просто обходят элементы какой-либо коллекции, они могут <i>отложенно создавать свои результаты вычислений (генерировать новые данные)</i>. Генератор может создавать результат на основе какого то алгоритма или брать элементы из источника данных(коллекция, файлы, сетевое подключения и пр) и изменять их. <i>Причём выдают один результат за раз, что экономит ресурсы ЭВМ</i>.<br>\r\nМожно реализовать двумя способами: как функция с ключевым словом <b>yield</b> или как генераторное выражение. В результате вызова функции или вычисления выражения, получаем объект-генератор типа <b>types.GeneratorType</b>.<br>\r\n\r\nГенератор чисел Фибоначчи, реализованный двумя способами:\r\n\r\n> <pre>\r\n<b>class FibonacciGenerator:</b>\r\n    def \\_\\_init\\_\\_(self):\r\n        self.prev = 0\r\n        self.cur = 1<br>\r\n    <b>def \\_\\_next\\_\\_(self)</b>:                                               - такие же методы, что и у итератора\r\n        result = self.prev\r\n        self.prev, self.cur = self.cur, self.prev + self.cur          - генератор не перебирает, а создаёт свои результаты\r\n        return result<br>\r\n    <b> def \\_\\_iter\\_\\_(self)</b>:\r\n        return self<br>\r\nfor i in FibonacciGenerator():\r\n    print(i)\r\n    if i > 100:\r\n        break<br>\r\n<b>def fibonacci():</b>                                                      - то же самое через генераторную функцию. Намного проще\r\n    prev, cur = 0, 1\r\n    while True:\r\n        <b>yield</b> prev                                                    - генераторные функции обязательно используют <b>yield</b> а не <b>return</b>\r\n        prev, cur = cur, prev + cur<br>\r\nfor i in fibonacci():\r\n    print(i)\r\n    if i > 100:\r\n        break\r\n> </pre>\r\n\r\n<b>В одном генераторе может быть несколько yield и после yield функция не заканчивает свою работу, а останавливается. Она продолжит выполнять код со следующей строчки при следующем обращении к генератору</b>:\r\n\r\n> <pre>\r\ndef gen_fun():\r\n    print(\'block 1\')\r\n    yield 1                                                 - при первом обращении функция остановится здесь\r\n    print(\'block 2\')\r\n    yield 2                                                 - при втором обращении здесь\r\n    print(\'end\')                                            - третье обращение \r\n> </pre>\r\n\r\n\r\n> <pre>\r\ndef cool_range(start, stop, inc):\r\n    x = start\r\n    while x < stop:\r\n        yield x                                             - первое обращение закончится тут\r\n        x += inc                                            - последующее обращение будет каждый раз увеличивать х\r\n> </pre>\r\n\r\n<b>Мы можем динамически отправлять значения в генератор (такой генератор называется \"КОРУТИН\")</b>:\r\n\r\n> <pre>\r\ndef generator(x):\r\n    while True:\r\n        x = yield x + 1                                     - генератор присвоит полученное значение в х, а отдаст х + 1<br>\r\ng = generator(5)                                            - вот так используем это в коде\r\ng.send(<b>None</b>)                                                - !!!первый раз всегда нужно слать <b>None</b>!!!\r\ng.send(10)\r\n> </pre>\r\n\r\n#### Методы генератора:\r\n\r\n<table>\r\n    <tr><td><b>next</b>(g, \'Alternative value\')</td>               <td>- получить след. значение, когда закончатся, будет выдавать \'Alternative value\'</td></tr>\r\n    <tr><td>g.<b>send</b>(value)</td>                              <td>- передать value в генератор и получить что-то из генератора !!!Сначала всегда шлём None!!!</td></tr>\r\n    <tr><td>g.<b>close()</b></td>                                  <td>- завершить генератор до получения последнего значения (не выдаст ошибки Stopiteration, программа пойдёт дальше)</td></tr>\r\n    <tr><td>g.<b>throw</b>(Exception(\'Плохо!\'))</td>               <td>- кинуть исключение</td></tr>\r\n</table>\r\n\r\n#### Генераторные выражения:\r\n\r\nСинтаксически более короткий способ создать генератор, не определяя и не вызывая функцию. В основном удобно использовать для генерации коллекций, их несложных преобразований и применений на них условий.\r\n\r\n        x = (i for i in range(10000000))\r\n        z = (item * item for item in x if x > 2)','2022-11-14','PYTHON/итераторы и генераторы',7,4),(47,'Python','Декораторы','dekoratory','***Декораторы*** оборачивают исходную функцию своим кодом. В результате получаем модифицированную функцию, которая дополняет/изменяет функционал текущей.<br>\r\n\r\n\r\n> <pre>\r\nfrom <b>functools</b> import <b>wraps</b>                                 - для восстановления документации оригинальной функции\r\nfrom typing import Callable<br>\r\ndef decor(func: Callable) -> Callable:                      - модифицирует работу оригинальной функции\r\n    \'\'\'Docstring\'\'\'\r\n    ...curious code...                                      - код, который отработает <i>при объявлении (не вызове)</i> оригинальной функции<br>\r\n    <b>@wraps(func)</b>                                            - восстановит doc/annotations/name оригинальной функции (иначе всё будет от функц. wrapped)\r\n    <b>def wrapper(\\*args)</b>:                                     - !передаём все аргументы именно так!\r\n        ...new_code...\r\n        <b>func(\\*args)</b>                                         - !!!Не Тупи с аргументами!!! Имя функции не оригинальное, а как параметр при создании decor\r\n        ...mew_code...\r\n        <b>return</b> something<br>\r\n    wrapper.\\_\\_name\\_\\_ = func.\\_\\_name\\_\\_                        - восстановить документацию (альтернатива @wraps)\r\n    wrapper.\\_\\_annotations\\_\\_ = func.\\_\\_annotations\\_\\_\r\n    wrapper.\\_\\_doc\\_\\_ = func.\\_\\_doc\\_\\_\r\n    frapper.\\_\\_wrapped\\_\\_ = func					\r\nreturn <b>wrapper</b>\r\n> </pre>\r\n\r\n### Как использовать:\r\n\r\n        @decor                                              - перед объявлением функции декорируем её\r\n        def old_func():                                     - код функции, которую будем декорировать\r\n            ...\r\n     \r\n        x = old_func()                                      - вызываем уже модифицированную функцию. Название старое, функционал новый\r\n        \r\n    ИЛИ:\r\n\r\n        new_func = decor(old_func)                          - модифицированная функция с новым названием\r\n        x = new_func()                                      - вызов новой функции\r\n        y = old_func()                                      - остаётся возможность работать со старой функцией по старому названию','2022-11-14','PYTHON/декораторы',7,4),(48,'Django','Full text search в postgres','full-text-search-v-postgres','<b>PostgreSQL</b> позволяет осуществлять навороченный поиск текста сразу по нескольким полям, присваивать результатам ранги и выводить их в соответствии с этими рангами, учитывать однокоренные слова в поиске/другие лексические фишки и подсвечивать результаты поиска.\r\n\r\n### Простой пример поиска по нескольким полям с помощью SearchVector:\r\n\r\n\r\n\r\n> <pre>\r\nfrom .forms import SearchForm                                                         - предварительно созданная форма для поиска (в одно поле)\r\nfrom .models import Post\r\nfrom django.contrib.postgres.search import <b>SearchVector</b>                               - позволяет \"склеивать\" несколько полей для поиска<br>\r\ndef search_post(request):\r\n    results = []\r\n    query = None                                                                      - название единственного поля в форме\r\n    form = SearchForm()\r\n    if \'query\' in request.GET:                                                        - GET, чтобы в ссылке видеть что ищем\r\n        form = SearchForm(request.GET)\r\n        if form.is_valid():\r\n            query = form.cleaned_data[\'query\']\r\n            results = Post.objects.<b>annotate(search=SearchVector(\'title\', \'body\')</b>.     - так склеиваем поля title и body\r\n                filter(<b>search=query</b>)                                                  - search - поиск в postgreSQL\r\n    return render(request, \'blog_app/search.html\', \r\n        {\'query\':query, \'form\': form, \'results\': results})\r\n> </pre>\r\n\r\n\r\n### Навороченный вариант с stemming и ranking\r\n\r\n> <pre>\r\nfrom .forms import SearchForm                                                       - предварительно созданная форма для поиска (в одно поле)\r\nfrom .models import Post\r\nfrom django.contrib.postgres.search import SearchVector,                            - позволяет \"склеивать\" несколько полей для поиска\r\n    <b>SearchRank, SearchQuery</b>                                                         - два класса для рангов и стемминга(SearchQuery)\r\n<br>\r\ndef search_post(request):\r\n    ...\r\n    query = form.cleaned_data[\'query\']\r\n    search_vector = SearchVector(\'title\', <b>weight=\'A\'</b>) +\r\n        SearchVector(\'body\', <b>weight=\'B\'</b>)                                            - указываем 2 вектора с разными приоритетами\r\n    search_query = <b>SearchQuery(query)</b>                                               - для <i>стемминга</i> (находит однокоренные, если есть разные суффиксы и пр)\r\n    results = Post.objects.annotate(<b>rank=SearchRank(search_vector, search_query))</b>.\r\n            <b>filter(rank__gte=0.001)</b>.order_by(\'-rank\')                               - если используешь <i>ranking</i>, нужно ставить фильтрацию по результатам,\r\n                                                                                        т.к. выдаст все результаты, даже с рангом 0.\r\n> </pre>\r\n\r\n### Подсветка результатов с помощью headline\r\n\r\n\r\n\r\n> <pre>\r\nfrom django.contrib.postgres.search import ..., <b>SearchHeadline</b>                        - для подсветки\r\n...\r\ndef search(request):\r\n    ...\r\n    query = SearchQuery(<b>f\"{cd[\'search\']}:*\", search_type=\"raw\"</b>)                       - так можно в postgres можно искать по совпадению с начала фразы (иначе будет искать строго то, что дал)\r\n    page_vector = SearchVector(\'title\', weight=\'A\') + \r\n        SearchVector(\'content\', weight=\'B\')\r\n    page_headline = <b>SearchHeadline</b>(<b>\'content\'</b>, query,                                  - указываем поле, что ищем, а также опционально теги, которыми будет выделять найденный текст\r\n        <b>start_sel</b>=\'<span class=\"highlight\"\\>\', <b>stop_sel</b>=\'</span\\>\')                \r\n    result = Page.objects.annotate(rank=SearchRank(page_vector, query)).\r\n        <b>annotate(headline=page_headline)</b>.                                             - добавляем очередную аннотацию\r\n        filter(rank__gte=0.001).order_by(\'-rank\'))\r\n> </pre>\r\n\r\n> <i>!!!В HTML-темплэйте нужно выводить подсвеченный текст вот так: `{{ item.headline }}`</i>','2022-11-14','DJANGO/orm и базы данных/postgres/full text search в postgres',20,3),(50,'FrontEnd','CSS table','css-table','- <a href=\"#block\">Блочные элементы, их составляющие и их размеры</a>\r\n- <a href=\"#display\">Отображение и расположение</a>\r\n- <a href=\"#fon\">Фон</a>\r\n- <a href=\"#font\">Шрифты</a>\r\n- <a href=\"#style\">Стили элементов</a>\r\n- <a href=\"#transit\">Плавность и переходы</a>\r\n\r\n<!-- **************************************************************************** Блочные элементы, их составляющие и их размеры******************************************************* -->\r\n\r\n<h2 id=\"block\"> Блочные элементы, их составляющие и их размеры</h2>\r\n\r\n<table class=\"with_border\">\r\n    <tr><th>Свойство</th>                   <th>Применение</th> <th>Наследование</th>    <th>Значения</th>        <th>Пример</th>                         <th>Примечания</th></tr>\r\n    <tr>\r\n        <td>width/height</td>\r\n        <td>лочные элементы и замещаемые<br>\r\n            встроенные элементы(рисунки)</td>\r\n        <td>-</td>\r\n        <td>значение длины/%/auto</td>\r\n        <td>p { width: 500px; }<br>\r\n            p { box-sizing: border-box;<br>   \r\n            width: 500px; }</td>\r\n        <td>!Применится к полю контента, т.е. не включает отступы,<br>\r\n            границы и прочее.<br>\r\n            Во втором примере в расчёт войдут границы и отступы</td>\r\n    </tr>\r\n    <tr>\r\n        <td>max/min-width</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>Чтобы текст не расползался на больших экранах</td>\r\n    </tr>\r\n    <tr>\r\n        <td>overflow</td>\r\n        <td>лочные элементы и замещаемые<br>\r\n            встроенные элементы(рисунки)</td>\r\n        <td>-</td>\r\n        <td>isible/hidden/scroll/auto</td>\r\n        <td></td>\r\n        <td>Даёт инструкции как поступить с контентом, выходящим за границу блока<br>\r\n            (лучше всего auto, т.к. Scroll всегда будет добавлять ползунки,<br>\r\n            даже если места хватает)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>padding-top/bottom/left/right</td>\r\n        <td>все элементы кроме табличных</td>\r\n        <td>-</td>\r\n        <td>длина/%</td>\r\n        <td>h1 { padding-top: lem;<br>\r\n            padding-right: 3em;<br>\r\n            padding-bottom: lem;<br>\r\n            padding-left: 3em; }</td>\r\n        <td>Задаёт отступы - расстояние между контентом и внутренней границей.<br>\r\n            По умолчанию 0.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>padding</td>\r\n        <td colspan=\"3\">обобщённая запись для всех сторон</td>\r\n        <td>{ padding: верх право низ лево }<br>\r\n            { padding: 1em Зem 1em Зem; }<br>\r\n            { padding: верх право&лево низ }<br>\r\n            { padding:1em Зem 1em; }<br>\r\n            { padding: верх&низ право&лево }<br>\r\n            { padding: верх&низ&право&лево }</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-top/right/bottom<br>\r\n            /left-style</td>\r\n        <td>все элементы</td>\r\n        <td>-</td>\r\n        <td>none/dotted/dashed/solid/double<br>\r\n            /groove/ridge/inset/outset</td>\r\n        <td></td>\r\n        <td>!Без этого параметра другие правила для границ работать не будут,<br>\r\n            т.к. браузер будет считать, что границы нет</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-style</td>\r\n        <td colspan=\"3\">обобщённая запись для всех сторон</td>\r\n        <td>border-style: solid dashed double dotted;</td>\r\n        <td>Синтаксис аналогичен padding</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-top/right/<br>\r\n            bottom/left-width</td>\r\n        <td>все элементы</td>\r\n        <td>-</td>\r\n        <td>значение длины/thin/medium/thick</td>\r\n        <td>div#help { border-top-width: thin;<br>\r\n            border-right-width: medium;<br>\r\n            border-bottom-width: thick;<br>\r\n            border-left-width: 12px;<br>\r\n            border-style: solid; }</td>\r\n        <td>Ширина границы</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-width</td>\r\n        <td colspan=\"3\">обобщённая запись для всех сторон</td>\r\n        <td>{ border-width: thin medium thick 12px; }</td>\r\n        <td>По часовой стрелке: верх, право, низ, лево</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-top/right/bottom/<br>\r\n            left-color</td>\r\n        <td>все элементы</td>\r\n        <td>-</td>\r\n        <td>имя цвета/значение в RGB/transparent</td>\r\n        <td></td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-color</td>\r\n        <td colspan=\"3\'>обобщённая запись для всех сторон</td>\r\n        <td>border-color: maroon aqua;<br>\r\n            border-style: solid;</td>\r\n        <td>!Не забываем указывать border-style</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-top/right/<br>\r\n            bottom/left</td>\r\n        <td colspan=\"3\">общая запись для управления всеми свойствами<br>\r\n            конкретной стороны\"</td>\r\n        <td>h1 { border-left: red .5em solid; }</td>\r\n        <td>Управляет свойствами style, width, color</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border</td>\r\n        <td colspan=\"3\">все свойства одной записью</td>\r\n        <td>p.example { border: 2px dotted #663; }</td>\r\n        <td>Задаёт ТОЛЬКО все 4 стороны за раз. Отдельно нельзя</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-top/bottom-left/<br>\r\n            right-radius</td>\r\n        <td>все элементы</td>\r\n        <td>-</td>\r\n        <td>длина/%</td>\r\n        <td>border-top-left-radius: 1em;<br>\r\n            border-top-right-radius: 2em;<br>\r\n            border-bottom-right-radius: 1em;<br>\r\n            border-bottom-left-radius: 2em;<br>\r\n            ~or~<br>\r\n            border-radius: 1 em 2em;<br>\r\n            <br>\r\n            border-top-left-radius: 50рх 20рх;</td>\r\n        <td>Задаёт радиус скругления границ<br>\r\n            <br><br><br><br>\r\n            Можно задавать 2 значения (гориз. и верт. радиусы)<br>\r\n            для скошенных углов</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-radius</td>\r\n        <td colspan=\"2\">общее</td>\r\n        <td>1/2/3/4 значения длины/%</td>\r\n        <td>border-radius: 5px 20px; 40px 60px;\r\n            border-radius: 60рх / 40рх;<br>\r\n            border-radius: Збрх 40рх бОрх 20рх /<br>\r\n            12рх Юрх ЗОрх Збрх;</td>\r\n        <td>По часовой с верхнего левого угла<br>\r\n            Скошенные углы задаются через слэш<br>\r\n            Сначала горизонтальные для всех углов,<br>\r\n            потом вертикальные</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-image-source</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td rowspan=\"5\">Нельзя задать отдельно, нужно использовать<br>\r\n            обобщающую запись</td>\r\n        <td>url-адрес изображения</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-image-source</td>\r\n        <td>border-image-slice</td>\r\n        <td></td>\r\n        <td></td>\r\n       \r\n        <td>4 значения линий разреза<br>\r\n            (разделить уголки от прямых)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-image-width</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n       \r\n        <td>Ширина границы (до 4х значений по часовой)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-image-outset</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        \r\n        <td>расстояние, на которое изобр. выступает за границу</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-image-repeat</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>stretch/repeat/round</td>\r\n     \r\n        <td>Как заполнять стороны: растягивать/повторять/<br>\r\n            и то и то по чуть-чуть</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-image</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>border-image: url(fancyframe.png) 55 stretch;</td>\r\n        <td>width и set опущены из-за ошибок совместимости</td>\r\n    </tr>\r\n    <tr>\r\n        <td>margin-top/right/bottom/left</td>\r\n        <td>все элементы</td>\r\n        <td>-</td>\r\n        <td>длина/%/auto</td>\r\n        <td>margin-top:2em;<br>\r\n            margin-right:250px;<br>\r\n            margin-bottom:lem;<br>\r\n            margin-left:4em;</td>\r\n        <td>Добавляет/изменяет пространство за границей(border)<br>\r\n            Работает также как и padding<br>\r\n            auto очень полезен для центрирования</td>\r\n    </tr>\r\n    <tr>\r\n        <td>margin</td>\r\n        <td colspan=\"3\">общая запись аналогично padding</td>\r\n        <td>margin:4em;</td>\r\n        <td>Принимает от одного до 4х значений длины</td>\r\n    </tr>\r\n    <tr>\r\n        <td>outline/outline-width/<br>\r\n            style/color</td>\r\n        <td colspan=\"4\">Всё как и с границами</td>\r\n        <td>Накладывает контуры на элемент.\r\n            Толщина контура в расчёты не идёт в отличие от границы.<br>\r\n            Полезен на этапе создания макета. Потом убирают.</td>\r\n    </tr>		\r\n</table>\r\n\r\n<!-- **************************************************************************** Отображение и расположение *************************************************************** -->\r\n\r\n<h2 id=\"display\"> Отображение и расположение</h2>\r\n\r\n<table class=\"with_border\">\r\n    <tr><th>Свойство</th>                   <th>Применение</th> <th>Наследование</th>    <th>Значения</th>        <th>Пример</th>                         <th>Примечания</th></tr>\r\n    <tr>\r\n        <td>display</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>inline/block/list-item/<br>\r\n            none и пр</td>\r\n        <td>ul.navigation li { display: inline; }<br>\r\n            ul.navigation li a { display: block; }<br>\r\n            p { display: none; }</td>\r\n        <td>Заставляет элемент отображаться в качестве другого элемента<br>\r\n            inline сделает список навигации горизонтальным<br>\r\n            block позволит задавать высоту элементу ссылки<br>\r\n            none удалит эл-т и его пространства из отображения</td>\r\n    </tr>\r\n    <tr>\r\n        <td>box-shadow</td>\r\n        <td>все эл-ты</td>\r\n        <td>-</td>\r\n        <td>смещение по гориз., смещ. по верт.,<br>\r\n            расст. размытия, расст. распростр.,<br>\r\n            цвет/inset/none</td>\r\n        <td>box-shadow:брх брх 5рх Юр х #666;<br>\r\n            box-shadow: inset брх брх 5рх #666;\"</td>\r\n        <td>тень для блока<br>\r\n            inset делает эффект вдавленности в экран</td>\r\n    </tr>\r\n    <tr>\r\n        <td>float</td>\r\n        <td>все эл-ты</td>\r\n        <td>-</td>\r\n        <td>eft/right/none</td>\r\n        <td>img { float: right; }</td>\r\n        <td>Обтекание. Смещает элемент в сторону.<br>\r\n            Следующий элемент занимает освободившееся пространство.<br>\r\n            !Для обтекания текстовых элементов рекомендовано задавать ширину.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>clear</td>\r\n        <td>блочные эл-ты</td>\r\n        <td>-</td>\r\n        <td>left/right/both</td>\r\n        <td></td>\r\n        <td>Запрещает элементу обтекать вышестоящий элемент.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>position</td>\r\n        <td>все эл-ты</td>\r\n        <td>-</td>\r\n        <td>static/relative/absolute/fixed</td>\r\n        <td>еm { position: relative;<br>\r\n                 top: ЗОрх;<br>\r\n                 left: бОрх;<br>\r\n                 background-color: fuchsia; }<br>\r\n            li#special { position: absolute;<br>\r\n                 top: 0; <br>\r\n                 right: 0;<br>\r\n                 background-color: fuchsia;}<br>\r\n                /* позиционирован в верхний правый угол */</td>\r\n        <td>Управляет размещением элемента.<br>\r\n            Static - обычное поведение<br>\r\n            relative - сдвиг отностельно того места, где эл-т должен быть<br>\r\n                (сохраняет пространство, которое элемент занимал бы без сдвига)<br>\r\n            absolute - позиция относительно окна браузера/родительского<br>\r\n                позиционированного эл-та (не сохраняет простраство в потоке данных)<br>\r\n            fixed -  позиция относительно окна браузера, остаётся на месте<br>\r\n                даже при прокрутке браузера</td>\r\n    </tr>\r\n    <tr>\r\n        <td>top/right/bottom/left</td>\r\n        <td>элементы со свойством position</td>\r\n        <td>-</td>\r\n        <td>длина/%/auto</td>\r\n        <td>p { position: relative; }<br>\r\n            еm { position: absolute<br>\r\n                top: ЗОрх;<br>\r\n                left: бОрх;<br>\r\n                background-color: fuchsia; }</td>\r\n        <td>Задаёт смещение (отступ). Top сместит вниз, left сместит вправо.<br>\r\n            В указанном примере смещение эл-та em  будет относительно родительского p,<br>\r\n            т.к он тоже со свойством position. Если бы у абзаца не было позиционирования,<br>\r\n            em смещался бы относительно окна браузера.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>z-index</td>\r\n        <td>элементы со свойством position</td>\r\n        <td>-</td>\r\n        <td>число/auto</td>\r\n        <td>#A { z-index: 10;<br>\r\n            position: absolute;<br>\r\n            top: 200px;<br>\r\n            left: 200px; }<br>\r\n            #B { z-index: 5;<br>\r\n            position: absolute;<br>\r\n            top: 225px;<br>\r\n            left: 175px; }</td>\r\n        <td>Задаёт, какой элемент будет отображаться сверху при наложении элементов друг на друга.<br>\r\n            Чем больше число, тем больше приоритет. В примере А будет отображаться поверх B.</td>\r\n    </tr>\r\n</table>\r\n\r\n<!-- **************************************************************************** Фон ****************************************************************************** -->\r\n\r\n<h2 id=\"fon\"> Фон</h2>\r\n\r\n<table class=\"with_border\">\r\n    <tr><th>Свойство</th>                   <th>Применение</th> <th>Наследование</th>    <th>Значения</th>        <th>Пример</th>                         <th>Примечания</th></tr>\r\n    <tr><td colspan=\"5\">Бэкграунд<td></tr>\r\n    <tr>\r\n        <td>background-color</td>\r\n        <td>все эл-ты</td>\r\n        <td>-</td>\r\n        <td>значение цвета/transparent</td>\r\n        <td></td>\r\n        <td>задаёт цвет фона</td>\r\n    </tr>\r\n    <tr>\r\n        <td>opacity</td>\r\n        <td>все эл-ты</td>\r\n        <td>-</td>\r\n        <td>0 - 1</td>\r\n        <td>h2 { color: green;<br>\r\n                 background: white;<br>\r\n                 opacity: .5; }</td>\r\n        <td>прозрачность всего элемента</td>\r\n    </tr>\r\n    <tr>\r\n        <td>background-image</td>\r\n        <td>все эл-ты</td>\r\n        <td>-</td>\r\n        <td>url-address</td>\r\n        <td>body { background-image: url(star.gif),<br>\r\n                                     url(image2.png); }</td>\r\n        <td>фоновое изображение (можно указывать неск-ко)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>background-repeat</td>\r\n        <td>все эл-ты</td>\r\n        <td>-</td>\r\n        <td>repeat/repeat-x(y)/no-repeat</td>\r\n        <td>body { background-image: url(star.gif);<br>\r\n                   background-repeat: repeat-y;}</td>\r\n        <td>управляет автозаполнением фона.<br>\r\n            В примере отрисует только одну вертикальную полосу из изображений.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>background-position</td>\r\n        <td>все эл-ты</td>\r\n        <td>-</td>\r\n        <td>длина/%/left/center/right/<br>\r\n            top/bottom</td>\r\n        <td>{ background-position: left bottom; }<br>\r\n            { background-position: 10px 200px; }<br>\r\n            { background-position: 10% 85%; }</td>\r\n        <td>управляет местоположением начального рисунка</td>\r\n    </tr>\r\n    <tr>\r\n        <td>background-attachment</td>\r\n        <td>все эл-ты</td>\r\n        <td>-</td>\r\n        <td>scroll/fixed</td>\r\n        <td>{ background-attachment: fixed; }</td>\r\n        <td>Прокрутка фонового рисунка. В данном примере<br>\r\n            рисунок прокручиваться не будет.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>background-clip</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>border-box/padding-box/<br>\r\n            content-box</td>\r\n        <td></td>\r\n        <td>Управляет автозаполнением.<br>\r\n            Можно ограничить заполнение отступами и границами</td>\r\n    </tr>\r\n    <tr>\r\n        <td>background-size</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>длина/%/auto/cover/contain</td>\r\n        <td>{ background-size: cover; }</td>\r\n        <td>Задаёт размер изображения</td>\r\n    </tr>\r\n    <tr>\r\n        <td>background-origin</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>border-box/padding-box/<br>\r\n            content-box</td>\r\n        <td></td>\r\n        <td>Задаёт точку начала отсчёта для параметра background-position</td>\r\n    </tr>\r\n    <tr>\r\n        <td>background</td>\r\n        <td colspan=\"3\">сокращение для объединения перечисленных свойств в любом порядке</td>\r\n        <td>{ background: background-color background-image<br>\r\n            background-repeat background-attachment background-position; }<br><br><br>\r\n\r\n\r\n            body { background:url(image1.png) left top no-repeat,<br>\r\n            url(image2.png) center center no-repeat,<br>\r\n            url(image3 .png) right bottom no-repeat;}</td>\r\n        <td>Порядок неважен, НО для position задаётся сначала горизонтальное положение,<br>\r\n            а заним СРАЗУ должно идти вертикальное.<br>\r\n            Неуказанные свойства получают автоматическое значение.<br><br>\r\n\r\n            А вот так можно задавать одновременно несколько<br>\r\n            изображений и параметров к ним.\"</td>\r\n    </tr>\r\n    <tr><td colspan=\"5\">Градиенты<td></tr>\r\n    <tr>\r\n        <td>linear-gradient</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>угол направления в градусах (180deg)<br>\r\n            либо зарезервированные слова (to top/to right<br>\r\n            /to bottom/to left + начальный/конечный/промежуточные цвета</td>\r\n        <td>{ background-image: linear-gradient (180deg, yellow,<br>\r\n            orange 25%, blue); }</td>\r\n        <td>\"Вместо рисунка можно задать градиент цвета<br>\r\n            (linear - векторный, из одной точки в указанном направлении).<br>\r\n            180deg=to bottom, 90deg=to right.<br>\r\n            Можно задавать промежуточные цвета (orange 25%)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>radial-gradient</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>(closest-side, farthest-side, closest-corner,<br>\r\n            farthest-corner, cover, contain).</td>\r\n        <td>background-image: radial-gradient(center contain yellow green);</td>\r\n        <td>Радиальный (из точки во все стороны вокруг). Задаются начальный-конечный цвета, границы</td>\r\n    </tr>\r\n</table>\r\n\r\n\r\n<!-- **************************************************************************** Шрифты ****************************************************************************** -->\r\n<h2 id=\"font\"> Шрифты</h2>\r\n\r\n<table class=\"with_border\">\r\n    <tr><th>Свойство</th>                   <th>Применение</th> <th>Наследование</th>    <th>Значения</th>        <th>Пример</th>                         <th>Примечания</th></tr>\r\n    <tr>\r\n        <td>font-family</td>\r\n        <td>все эл-ты</td>  \r\n        <td>+</td>                \r\n        <td>Название</td>\r\n        <td>p { font-family: sans-serif, Veranda, \"Trebuchet MS\"; }</td>\r\n        <td>отдельные шрифты - с большой буквы<br>\r\n            семейство шрифтов - с маленькой<br>\r\n            если есть спец. символы (пробел) - кавычки</td>\r\n    </tr>\r\n    <tr>\r\n        <td>font-size</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>число<br>%<br>xx-small/x-small<br>small/medium/large<br>x-large/xx-large<br>smaller/larger</td>\r\n        <td>h1 { font-size: 1.5em; }<br>\r\n            h1 { font-size: 150%; }<br>\r\n            strong { font-size: lerger; }</td>\r\n        <td>Лучше использовать относительные единицы em/rem</td>\r\n    </tr>\r\n    <tr>\r\n        <td>font-weight<br>(полужирный)</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>normal/bold/bolder/lighter<br>\r\n            100/200/…/900</td>\r\n        <td></td>\r\n        <td>Как правило используются только значения bold и normal</td>\r\n    </tr>\r\n    <tr>\r\n        <td>font-style</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>normal/italic/oblique</td>\r\n        <td></td>\r\n        <td>italic&oblique почти всегда одно и то же</td>\r\n    </tr>\r\n    <tr>\r\n        <td>font-variant</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>normal/small-caps</td>\r\n        <td></td>\r\n        <td>малые заглавные буквы</td>\r\n    </tr>\r\n    <tr>\r\n        <td>font</td>\r\n        <td colspan=\"3\">{ font: style weight variant size/line-height font-family }</td>\r\n        <td>р { font: lem sans-serif; }</td>\r\n        <td>сокращённый обобщённый вариант<br>\r\n            !строгий порядок<br>\r\n            !обязательны font-size и font-family<br>\r\n            остальное можно не указывать, НО опущенные параметры примут значение normal</td>\r\n        </tr>\r\n    <tr>\r\n        <td>color</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>имя цвета, значение RGB</td>\r\n        <td>h1 { color: gray; }<br>\r\n            h1 { color: #666; }<br>\r\n            h1 { color: rgb(102,102,102; }</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>line-height</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>число, ед. измерений, %</td>\r\n        <td>p { line-height: 2; }<br>\r\n            p { line-height: 2em; }<br>\r\n            p { line-height: 200%; }</td>\r\n        <td>Высота строки. Текст будет в центре по высоте.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>text-indent</td>\r\n        <td>ячейки таблицы и<br>блочные эл-ты</td>\r\n        <td>+</td>\r\n        <td>длина, проценты</td>\r\n        <td>p#1 { text-indent: 2em; }<br>\r\n            p#1 { text-indent: 25%; }<br>\r\n            p#1 { text-indent: -35px; }</td>\r\n        <td>Задаёт отступ ПЕРВОЙ строки</td>\r\n    </tr>\r\n    <tr>\r\n        <td>text-align</td>\r\n        <td>ячейки таблицы и блочные эл-ты</td>\r\n        <td>+</td>\r\n        <td>left/right/center/<br>\r\n            justify (ширине)</td>\r\n        <td>p { text-align: right; }</td>\r\n        <td>Выравнивание текста </td>\r\n    </tr>\r\n    <tr>\r\n        <td>text-decoration</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>none/underline/overline/<br>\r\n            line-through/blink</td>\r\n        <td>a { text-decoration: none; }</td>\r\n        <td>Под-/над-/зачеркивание и мерцание текста</td>\r\n    </tr>\r\n    <tr>\r\n        <td>text-transform</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>none/capitalize/lowercase/<br>\r\n            uppercase</td>\r\n        <td>p { text-transform: capitalize; }</td>\r\n        <td>делает все буквы заглавными/прописными<br>\r\n            capitalize - Каждая Первая Буква Слова Большая</td>\r\n    </tr>\r\n    <tr>\r\n        <td>letter-spacing<br>\r\n            word-spacing</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>normal/длина</td>\r\n        <td>p { letter-spacing: 2em; }<br>\r\n            p {word-spacing: 8px; }</td>\r\n        <td>меняет расстояние между отдельными буквами/словами</td>\r\n    </tr>\r\n       <tr>\r\n        <td>text-shadow</td>\r\n        <td>все эл-ты</td>\r\n        <td>+</td>\r\n        <td>смещ. по горизонтали,<br>\r\n            смещ. по вертикали,<br>\r\n            радиус размытия, цвет</td>\r\n        <td>h1 { text-shadow: .2em .2em .05em silver; }<br>\r\n            h2 {text-shadow: -.3em -.3em; }</td>\r\n        <td>тень для текста, обязательны только смещения,<br>\r\n            остальные параметры можно опустить</td>\r\n    </tr>\r\n\r\n</table>\r\n\r\n<!-- **************************************************************************** Стили элементов ****************************************************************************** -->\r\n\r\n<h2 id=\"style\"> Стили элементов</h2>\r\n\r\n<table class=\"with_border\">\r\n    <tr><th>Свойство</th>                   <th>Применение</th> <th>Наследование</th>    <th>Значения</th>        <th>Пример</th>                         <th>Примечания</th></tr>\r\n    <tr><td colspan=\"5\">Списки<td></tr>\r\n    \r\n    <tr>\r\n        <td>list-style-type</td>\r\n        <td>ul, ol, li</td>\r\n        <td>+</td>\r\n        <td>none/disc/circle/square/decimal<br>\r\n            /lower-alpha/upper-alpha/<br>\r\n            lower(upper)-latin(roman, greek)</td>\r\n        <td>li { list-style-type: circle; }</td>\r\n        <td>изменяет значки элементов списков, чаще всего<br>\r\n            для отключения значков</td>\r\n    </tr>\r\n    <tr>\r\n        <td colspan=\"4\">display: list-item</td>\r\n        <td>p { display: list-item; }</td>\r\n        <td>заставляет считать что угодно элементом списка<br>\r\n            (а значит можно использовать list-style)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>list-style-position</td>\r\n        <td>ul, ol, li</td>\r\n        <td>+</td>\r\n        <td>inside/outside</td>\r\n        <td>p { display: list-item;<br>\r\n                list-style-position: inside; }</td>\r\n        <td>управляет расположением маркера (внутри/снаружи) элемента списка</td>\r\n    </tr>\r\n    <tr>\r\n        <td>list-style-image</td>\r\n        <td>ul, ol, li</td>\r\n        <td>+</td>\r\n        <td>url-address</td>\r\n        <td>li { list-style-image: url(\'images/pic.gif\');<br>\r\n                 list-style-type: disc; }</td>\r\n        <td>задаёт свой маркер через url,<br>\r\n            желательно указывать альтернативу через list-style-type</td>\r\n    </tr>\r\n    <tr>\r\n        <td>list-style</td>\r\n        <td colspan=\"3\">сокращение для объединения перечисленных свойств в любом порядке</td>\r\n        <td>ul { list-style: url(\'images/pic.gif\') <br>\r\n                 circle outside; }</td>\r\n        <td>Всё в одном, порядок перечисления неважен</td>\r\n    </tr>\r\n <tr><td colspan=\"5\">Таблицы<td></tr>\r\n    <tr>\r\n        <td>border-collapse</td>\r\n        <td>table, th, tr, td</td>\r\n        <td>+</td>\r\n        <td>collapse, separate, inherit</td>\r\n        <td>border-collapse: collapse;</td>\r\n        <td>collapse - между ячейками одна линия<br>\r\n            separate - у каждой ячейки свои границы</td>\r\n    </tr>\r\n    <tr>\r\n        <td>border-spacing</td>\r\n        <td>table</td>\r\n        <td>-</td>\r\n        <td>px, initial, inherit</td>\r\n        <td>table { border-collapse: separate;<br>\r\n            border-spacing: 10px 20px; }</td>\r\n        <td>задаёт пустое расстояние между границами ячейки</td>\r\n    </tr>\r\n    <tr>\r\n        <td>empty-cells</td>\r\n        <td>table</td>\r\n        <td>+</td>\r\n        <td>show, hide, inherit<br>\r\n            initial, unset</td>\r\n        <td>table { empty-cells: show; }</td>\r\n        <td>Показывать или нет пустые ячейки.<br>\r\n            Если для ячейки задан фон, а для таблицы задано border-collapse,<br>\r\n            то ячейка не будет скрыта.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>table-layout</td>\r\n        <td>table</td>\r\n        <td>+</td>\r\n        <td>auto, fixed, initial, inherit</td>\r\n        <td>table { table-layout: fixed; }</td>\r\n        <td>Как распределяется ширина таблицы между шириной ячеек.</td>\r\n    </tr>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!-- **************************************************************************** Плавность и переходы *************************************************************** -->\r\n\r\n<h2 id=\"transit\"> Плавность и переходы</h2>\r\n\r\n<table class=\"with_border\">\r\n    <tr><th>Свойство</th>                   <th>Применение</th> <th>Наследование</th>    <th>Значения</th>        <th>Пример</th>                         <th>Примечания</th></tr>\r\n        <tr>\r\n        <td>transition-property</td>\r\n        <td>другие свойства элемента <br>\r\n            (см. полный список в интернете)</td>\r\n        <td>-</td>\r\n        <td>-</td>\r\n        <td>a. smooth { transition-property: background-color;<br>\r\n                transition-duration: 0.3s;<br>\r\n                background-color: mediumblue; }<br>\r\n                a.smooth:hover, a.smooth: focus {<br>\r\n                background-color: red; }</td>\r\n        <td>Для плавных переходов. Указывает свойство, которое будет меняться со временем<br>\r\n            при определённом событии. В данном случае будет меняться фоновый цвет при наведении<br>\r\n            курсора на ссылку.<br>\r\n            Transition-property: all - для изменения всех указанных значений</td>\r\n    </tr>\r\n    <tr>\r\n        <td>transition-duration</td>\r\n        <td>время перехода</td>\r\n        <td>-</td>\r\n        <td>секунды/милисекунды</td>\r\n        <td></td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>transition-timing-function</td>\r\n        <td>скорость перехода</td>\r\n        <td>-</td>\r\n        <td>ease/linear/ease-in/ease-out/<br>\r\n            ease-in-out/step-start/step-end/<br>\r\n            steps/cubic-bezier(#,#,#,#)</td>\r\n        <td>a. smooth { transition-property: background-color;<br>\r\n            transition-duration: 0.3s;<br>\r\n            transition-timing-function: ease-in-out; }</td>\r\n        <td>linear - равномерно<br>\r\n            ease-in - сначала медленно, потом ускоряется<br>\r\n            В общем функция изменения скорости. Много малополезной инфы - гугли</td>\r\n    </tr>\r\n    <tr>\r\n        <td>transition-delay</td>\r\n        <td>задержка</td>\r\n        <td>-</td>\r\n        <td>секунды/милисекунды</td>\r\n        <td>а.smooth { transition-property: opacity;<br>\r\n            transition-duration: .05s;<br>\r\n            transition-timing-function: ease-out;<br>\r\n            transition-delay: 2s; }<br>\r\n            a.smooth:hover, a.smooth: focus {<br>\r\n            background-color: red; }<br>\r\n            a.smooth:active { opacity: 0; }</td>\r\n        <td>Задержка анимации. В примере кнопка-ссылка становится прозрачной спустя 2s</td>\r\n    </tr>\r\n    <tr>\r\n        <td>transition</td>\r\n        <td colspan=\"3\">transition: св-во продолжительность тайминг задержка;</td>\r\n        <td>a.smooth {<br>\r\n            - webkit-transition: background-color 0.3 sease - in-out 0.2s;<br>\r\n            - moz-transition: background-color 0.3 sease - in-out 0.2s;<br>\r\n            - o-transition: background-color 0.3 sease - in-out 0.2s;<br>\r\n            - ms-transition: background-color 0.3 sease - in-out 0.2s;<br>\r\n            transition: background-color 0.3 sease - in-out 0.2s; }</td>\r\n        <td>Сокращенное св-во. Можно указывать не все значения. Если указано одно время -<br>\r\n            это продолжительность. Продолжительность должна быть до задержки</td>\r\n    </tr>\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>а.smooth {<br>\r\n            transition-property: background-color, color, letter-spacing;<br>\r\n            transition-duration: 0.3s, 2s, 0.3s;<br>\r\n            transition-timing-function: ease-out, ease-in, ease-out; }<br>\r\n            a:hover , a:focus { background-color: red;<br>\r\n            letter-spacing: Зрх;<br>\r\n            color: black; }<br>\r\n            ________________________________________<br>\r\n            a.smooth {<br>\r\n            transition: background-color 0.3 sease-out,<br>\r\n            color2sease - in,<br>\r\n            letter-spacing 0.3 sease - out; }</td>\r\n        <td>Примеры изменения сразу нескольких свойств за раз.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>transform: rotate</td>\r\n        <td>к преобразуемым элементам</td>\r\n        <td>-</td>\r\n        <td>градусы</td>\r\n        <td>transform: rotate(-10deg);</td>\r\n        <td>Наклон элемента относительно центральной оси</td>\r\n    </tr>\r\n    <tr>\r\n        <td>transform-origin</td>\r\n        <td>к преобразуемым элементам</td>\r\n        <td>-</td>\r\n        <td>%/значение длины/left/right/<br>\r\n            top/bottom/center</td>\r\n        <td>transform-origin: center top;<br>\r\n            transform-origin: 50%, 0%;</td>\r\n        <td>Задает исходную точку, вокруг которой будет предобразование (по умолчанию - центр объекта)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>transform: translateX<br>\r\n            transform: translateY<br>\r\n            transform: translate</td>\r\n        <td>к преобразуемым элементам</td>\r\n        <td>-</td>\r\n        <td>длина/%</td>\r\n        <td>transform: translate(90px, 60рх);</td>\r\n        <td>Смещение объекта относительно исходного положения<br>\r\n            Если указано одно значение - это всегда Х</td>\r\n    </tr>\r\n    <tr>\r\n        <td>transform: scaleX<br>\r\n            transform: scaleY<br>\r\n            transform: scale</td>\r\n        <td>к преобразуемым элементам</td>\r\n        <td>-</td>\r\n        <td>коэффициент</td>\r\n        <td>a img {<br>\r\n            transform: scale(2,.5); }<br>\r\n            transform: scale(.75);</td>\r\n        <td>Изменение размеров объекта.<br>\r\n            Если указано одно значение - применяется к Х и У</td>\r\n    </tr>\r\n    <tr>\r\n        <td>transform: scewX<br>\r\n            transform: scewY<br>\r\n            transform: scew</td>\r\n        <td>к преобразуемым элементам</td>\r\n        <td>-</td>\r\n        <td>градусы</td>\r\n        <td>a img { transform: skewX(1 5deg); }<br>\r\n            a img { transform: skewY(3 0deg); }<br>\r\n            a img { transform: skew(15deg, 30deg); }</td>\r\n        <td>Скос элемента по оси.<br>\r\n            Если указано одно значение - это всегда Х</td>\r\n    </tr>\r\n    <tr>\r\n        <td colspan=\"4\">короткая запись нескольких преобразований за раз для transform</td>\r\n        <td>img:hover, img: focus {\r\n            transform: scale(1.5) rotate(-5deg) translate(50px,30px); }</td>\r\n        <td>Просто перечисляем свойства и значения в скобках через пробел<br>\r\n            Важен порядок перечисления<br>\r\n            Нужно перечислять для всех состояний (hover/focus/active…)</td>\r\n    </tr>\r\n\r\n\r\n</table>    \r\n\r\n\r\n<!-- Шаблон строки таблицы\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n    </tr>\r\n-->','2022-11-15','FRONTEND/css table',21,4),(51,'Databases','Индексы','indeksy','Позволяют значительно сократить время поиска нужного значения в таблице/сортировку значений <i>(а значит и нагрузку на сервер)</i>, но немного увеличивают объём данных таблиц, а также время записи новых значений в таблицу.<br>\r\nДля разных БД бывают разные индексы, но основные из них, которые встречаются повсеместно:\r\n\r\n- Primary Key (уникальный id`шник для каждой записи, расставляется автоматически, часто и ForeignKey)\r\n- Index B-tree (сортирует значение на диапазоны, а значит не нужно проглядывать всю таблицу - находим сначала нужный диапазон, потом ищем в нём. Эффективней всего для чисел, но можно и буквы и даже слова)\r\n- Unique (говорит, что значение уникальное, а значит дальше искать в таблице смысла нет. При нахождении значения прекращает поиск дальше)\r\n- Hash (лучше всего для больших текстовых полей. Можно захэшировать это значение (хэш всегда одной длины) и искать по короткому хэшу, а не по длинному значению)\r\n- Full Text (весь текст разбивается на уникальные слова, для слов создаются пометки, где эти слова находятся)\r\n\r\n<i>!!! Для небольших таблиц (несколько сотен тысяч записей) SQL может игнорировать расставленные индексы, т.к. это мало и проще пройтись по таблице, чем строить деревья индексов.</i>\r\n\r\n### Что стоит индексировать\r\n\r\nВопрос философский, но рекомендуется делать индексы там, где есть запросы:\r\n\r\n1. <b>WHERE</b> col1<b>=</b>...\r\n1. <b>GROUP BY</b>\r\n1. для полей, по которым идёт JOIN ... <b>ON</b> <i>col</i>\r\n1. <i>возможно стоит подумать над</i> <b>ORDER BY</b>\r\n1. <i>возможно стоит подумать над</i> <b>WHERE</b> col1<b>неравенства (>, <, =>, ...)</b>...\r\n\r\n### Что <u>не</u> стоит индексировать:\r\n\r\n1. <b>WHERE</b> col1 <b>LIKE</b>...\r\n1. поля в <b>HAVING</b>\r\n1. поля, которые <u>постоянно</u> обновляются (<b>UPDATE</b>, <b>INSERT</b>(возможно))','2022-11-16','DATABASES/индексы',13,4),(52,'Django','DEBUG_toolbar','debug_toolbar','Удобный инструмент для разработки и отладки. Покажет много полезной и подробной информации для каждого запроса: поля запроса, какие static-files использовались, какие запросы ушли в БД и сколько понадобилось на них времени, время загрузки DOM и кэш, сигналы и пр.\r\n\r\n### Установка и настройка\r\n\r\n- Скачиваем приложение: `pip install django-debug-toolbar`\r\n- В <i>settings.py</i> добавляем его в <b>INSTALLED_APPS</b>:\r\n\r\n> <pre>\r\nINSTALLED_APPS = [\r\n    \'pages\',\r\n    \'django.contrib.postgres\',\r\n    <b>\'debug_toolbar\'</b>,\r\n    ...\r\n> </pre>\r\n\r\n- В <i>settings.py</i> добавляем новое <b>MIDDLEWARE</b> (первым или как можно ближе к началу списка): \r\n\r\n> <pre>\r\nMIDDLEWARE = [\r\n    <b>\'debug_toolbar.middleware.DebugToolbarMiddleware\'</b>,\r\n    \'django.middleware.security.SecurityMiddleware\',\r\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\r\n    ...\r\n> </pre>\r\n\r\n- В <i>settings.py</i> добавляем workaround для работы toolbar в docker:\r\n\r\n\r\n> <pre>\r\ndef show_toolbar(request):\r\n    return True\r\n<br>\r\nDEBUG_TOOLBAR_CONFIG = {\r\n    \'SHOW_TOOLBAR_CALLBACK\': show_toolbar,\r\n}\r\n> </pre>\r\n\r\n\r\n\r\n\r\n- Добавляем в <i>settings.py</i> настройки ip`s, с которыми он будет работать (мы хотим, чтобы работал только в отладке на тестовом окружении, а не на проде):\r\n\r\n> <pre>\r\n<b>INTERNAL_IPS</b> = [ \r\n    \'127.0.0.1\',                                            - лучше указать все, если есть необходимость работы в докер\r\n    \'localhost\',\r\n    \'0.0.0.0\', \r\n    ]\r\n> </pre>\r\n\r\n- Настройки основного <i>urls.py</i>:\r\n\r\n\r\n> <pre>\r\nimport <b>debug_toolbar</b>\r\nfrom django.urls import path, <b>include</b>\r\n...\r\n<b>urlpatterns</b> = [\r\n    path(\'login/\', views.PagesLogin.as_view(), name=\'login\'),\r\n    <b>path(\'\\_\\_debug\\_\\_/\', include(debug_toolbar.urls)),</b>               - рекомендованное название\r\n> </pre>\r\n\r\n---\r\n\r\n### Готово, можно использовать!','2022-11-16','DJANGO/debug_toolbar',4,4),(53,'Django','Примеры популярных моделей с пояснениями полей','primery-populiarnykh-modelei-s-poiasneniiami-polei','## Пример модели профиля с привязкой к User:\r\n\r\n\r\n\r\n> <pre>\r\nfrom django.db import models\r\nfrom django.conf import <b>settings</b>                                      - универсальная завязка за моделью пользователя. Если нужен <u>стандартный user django</u>, есть метод проще:\r\nfrom django.contrib.auth.models import <b>User</b>                           - встроенная модель пользователя в django подходит для большинства случаев\r\n<br>\r\nclass Profile(models.Model):\r\n    user = models.OneToOneField(settings.AUTH_USER_MODEL,             - завязка за User по <b>OneToOneField</b>\r\n        on_delete=models.CASCADE, related_name=\"profile\')\r\n    date_of_birth = models.DateField(blank=True, null=True)\r\n    photo = models.ImageField(upload_to=\'users/%Y/%m/%d/\',\r\n        blank=True)<br>\r\n    def \\_\\_str\\_\\_(self):\r\n        return \'Profile for user {}\'.format(self.user.username)	\r\n> </pre>\r\n\r\n---\r\n\r\n## Пример модели для изображений:\r\n\r\n\r\n> <pre>\r\nfrom django.db import models\r\nfrom django.conf import settings\r\nfrom django.utils.text import slugify                                 - сделать slug из указанного поля\r\nfrom unidecode import unidecode                                       - slug не работает с кириллицей, поэтому кириллицу нужно сначала перебить в латиницу (нужно устанавливать отдельно)\r\n<br>\r\nclass Image(models.Model):\r\n    user = models.ForeignKey(settings.AUTH_USER_MODEL,                - привязка к юзеру, который сохранил фотографию\r\n        related_name=\'images_created\', on_delete=models.CASCADE)\r\n    users_like = models.ManyToManyField(settings.AUTH_USER_MODEL,     - Many-to-Many, пользователи, лайкнувшие фото\r\n        related_name=\'images_liked\', blank=True)\r\n    title = models.CharField(max_length=200)\r\n    slug = models.SlugField(max_length=200, blank=True)               - для создания красивой ссылки на картинку на нашем сайте\r\n            url = models.URLField()                                   - оригинальный URL картинки\r\n    <b>image</b> = models.<b>ImageField</b>(upload_to=\'images/%Y/%m/%d/\')           - поле для хранения изображения\r\n    description = models.TextField(blank=True)\r\n    created = models.DateField(auto_now_add=True,\r\n        <b>db_index=True</b>)                                                - добавит индекс, ускоряет поиск django в разных queryset<br>	\r\n    def \\_\\_str\\_\\_(self):\r\n        return self.title<br>	\r\n    def <b>save</b>(self, \\*args, \\*\\*kwargs):                                  - перезаписываем материнский save(), чтобы автоматически создавать slug\r\n        if not self.slug:\r\n            self.slug = slugify(unidecode(self.title))                - делаем slug\r\n            super().save(\\*args, \\*\\*kwargs)                             - возвращаем родительский метод со всеми его действиями\r\n> </pre>\r\n\r\n---\r\n\r\n## Пример модели подписок(followers). \r\n\r\nПользователь (User) подписывается на пользователя, т.е. отношения между сущностями одной модели.<br>\r\nДля этого нужно добавить <u>промежуточную модель и поле в оригинальную модель</u>.<br>\r\n\\+ в промежуточную модель можно добавлять доп. информацию\r\n	\r\n#### Промежуточная модель\r\n\r\n\r\n> <pre>\r\nclass Contact(models.Model):\r\n    user_from = models.ForeignKey(\'auth.User\',                        - !!! Мы не импортируем models.User. Обращаемся как-то так\r\n        related_name=\'rel_from_set\', on_delete=models.CASCADE)\r\n    user_to = models.ForeignKey(\'auth.User\',                          - ссылки на двух пользователей, сущностей одной модели\r\n        related_name=\'rel_to_set\', on_delete=models.CASCADE)\r\n    created = models.DateTimeField(auto_now_add=True,                 - дополнительная информация\r\n         db_index=True)	\r\n> </pre>\r\n\r\n\r\n\r\n#### Добавляем поле в основную модель:\r\n\r\n\r\n> <pre>\r\nfollowing = models.ManyToManyField(<b>\'self\'</b>,                            - \'self\' указывает, что поле замыкается само на себя\r\n    <b>through</b>=Contact,                                                  - так вручную указывается промежуточная таблица, когда модель замыкается сама на себя\r\n    related_name=\'followers\',\r\n    <b>symmetrical=False</b>)                                                - несимметричный ManyToManyField (если подписан один, это не значит, что есть обратная подписка\r\n> </pre>\r\n\r\n---\r\n\r\n## Модель activity stream через <i>contenttypes</i>\r\n\r\nМодель может связывать пользователя с другими разными объектами (разных моделей). Это может быть другой пользователь(like/follow), загруженная картинка.<br>\r\nМожно сделать универсальную привязку к любому объекту через модель ContentType\r\n\r\n\r\n> <pre>\r\nfrom django.db import models\r\nfrom django.contrib.contenttypes.models import <b>ContentType</b>            - универсальный контейнер для привязки к любому типу данных\r\nfrom django.contrib.contenttypes.fields import <b>GenericForeignKey</b>      - связывает выбранный тип данных и конкретный инстанс этого типа данных\r\n<br>\r\nclass Action(models.Model):\r\n    user = models.ForeignKey(\'auth.User\',\r\n        related_name=\'actions\', db_index=True,\r\n        on_delete=models.CASCADE)\r\n    verb = models.CharField(max_length=255)\r\n    <b>target_ct</b> = models.ForeignKey(<b>ContentType</b>,                        - model, с которой будет связь (User/Image/Post...)\r\n        blank=True, null=True, related_name=\'target_obj\',\r\n        on_delete=models.CASCADE, <b>limit_choices_to</b>={\'model__in\':      - ограничить привязку к определённым моделям\r\n            (\'user\', \'image\')})\r\n    <b>target_id</b> = models.<b>PositiveIntegerField</b>(null=True,                - id-шник нужного user/image/post...\r\n        blank=True, db_index=True)\r\n    <b>target = GenericForeignKey(\'target_ct\', \'target_id\')</b>              - так происходит объединение. Поле собирает информацию о нужной модели и нужной сущности этой модели\r\n                                                                        !!!Для этого поля нет записи в БД. Оно как функция, собирающая всё в одно целое\r\n> </pre>\r\n\r\n---\r\n\r\n## Пример модели с TextChoices - удобный способ организации выбора из нескольких вариантов. Класс в классе\r\n\r\n\r\n\r\n> <pre>\r\nclass Auto(models.Model):<br>\r\n    model_name = models.CharField(max_length=100, unique=True)\r\n    vendor = models.CharField(max_length=100)<br>\r\n    <b>class FuelChoices(models.TextChoices)</b>:                                 - класс в классе. Позже будем работать с данными как с атрибутами этого класса\r\n        GAS = \'gas\'\r\n        DIESEL = \'diesel\'\r\n        ELECTRO = \'electro\'\r\n        PETROL = \'petrol\'\r\n        HYBRID = \'hybrid\'<br>\r\n    fuel = models.CharField(max_length=25, <b>choices=FuelChoices.choices</b>,    - вот так ссылаемся на на возможные опции \r\n        <b>default=FuelChoices.PETROL</b>)                                        - обращаемся как к атрибуту класса. По умолчанию будет \'petrol\'\r\n\r\n> </pre>\r\n\r\n#### Очень удобно, если эти же choices нужно использовать где-то ещё:\r\n\r\n\r\n> <pre>\r\nfrom cars.models import Auto                                               - импортим класс модели<br>\r\ndef check_characteristics_field(field_value: dict):\r\n    car_specs = {\'fuel\': <b>Auto.FuelChoices.values</b>}                          - пользуемся опциями\r\n    ...\r\n> </pre>\r\n\r\n\r\n\r\n\r\n---\r\n\r\n## Пример soft-delete mixin`a\r\n\r\n\r\n\r\n> <pre>\r\nclass SoftDeleteMixin(models.Model):                                       - микрокласс, который будем <i>подмешивать</i> другим классам<br>\r\n    is_active = models.BooleanField(default=True)                          - поле, которое добавится другим классам при подмешивании<br>\r\n    class Meta:\r\n        <b>abstract = True</b>                                                    - инструкция, что этот класс не нужно создавать в БД<br>\r\n    <b>def delete</b>(self, is_soft=True, \\*args, \\*\\*kwargs):                       - переписываем оригинальный метод под свои нужды\r\n        if is_soft:                                                        - вместо реального удаления помечаем, что объект будет неактивным\r\n            self.is_active = False\r\n            self.save()\r\n        else:\r\n            <b>super().delete(\\*args, \\*\\*kwargs)</b>                                - возвращаем нормальное поведение метода\r\n<br>\r\nclass Dealer(CommonFieldsParent, <b>SoftDeleteMixin</b>):                         - класс будет содержать поля и функционал миксина\r\n    ...\r\n> </pre>\r\n\r\n---\r\n\r\n## Monkey patching\r\n\r\nДобавить поле в модель \"на лету\" (monkey patch). <i>Не рекомендуется. Используется когда нельзя изменять модель своими полями (default User)</i>\r\n\r\n<b>Добавляем своё поле в  модель User:</b>\r\n\r\n\r\n> <pre>\r\nfrom django.contrib.auth.models import User\r\n<br>\r\nUser.<b>add_to_class</b>(\'following\',                                        - эта запись <b>не принадлежит никакому классу!!!</b> Мы просто используем общий для всех моделей метод\r\n    models.ManyToManyField(\'self\', through=Contact,                     просто функция, которая добавит поле динамически\r\n    related_name=\'followers\', symmetrical=False))\r\n> </pre>\r\n\r\n---','2022-11-21','DJANGO/orm и базы данных/models/примеры популярных моделей с пояснениями полей',22,3),(54,'Django','Model inheritance | наследование моделей','model-inheritance-nasledovanie-modelei','Для создания похожих моделей, которые будут наследовать костяк от какой-то общей модели. Похоже на наследование классов.<br>\r\nБывают 3х видов:\r\n\r\n+ <b>abstract-model</b>: не включается в базу. В базе есть только child-модели, наследующие от этой abstract. Пример:\r\n\r\n\r\n>> <pre>\r\nfrom django.db import models\r\n<br>\r\nclass BaseContent(models.Model):\r\n    title = models.CharField(max_length=100)\r\n    created = models.DateTimeField(auto_now_add=True)<br>	\r\n    class Meta:\r\n        <b>abstract = True</b>                                     - указываем, что это абстракция в Meta<br>	\r\nclass Text(<b>BaseContent</b>):                                    - будет иметь поля title, created, body\r\n    body = models.TextField()\r\n>> </pre>\r\n\r\n+ <b>multi-tabe inheritance</b>: для parent и child будут созданы таблицы в БД. Django автоматически добавить OneToOneField в child\r\n\r\n\r\n>> <pre>\r\nfrom django.db import models\r\n<br>\r\nclass BaseContent(models.Model):\r\n	title = models.CharField(max_length=100)\r\n	created = models.DateTimeField(auto_now_add=True)\r\n<br>\r\nclass Text(<b>BaseContent</b>):\r\n	body = models.TextField()\r\n>> </pre>\r\n\r\n+ <b>proxy-model</b>: для изменения поведения основной модели (добавить функционал/изменить отображение). Дополнительной таблицы в БД <u>не будет</u>.\r\n\r\n\r\n\r\n>> <pre>\r\nfrom django.db import models\r\nfrom django.utils import timezone\r\n<br>\r\nclass BaseContent(models.Model):\r\n    title = models.CharField(max_length=100)\r\n    created = models.DateTimeField(auto_now_add=True)<br>	\r\nclass OrderedContent(<b>BaseContent</b>):\r\n    class Meta:\r\n        <b>proxy = True</b>                                        - обозначим как <b>proxy</b> в Meta\r\n        ordering = [\'created\']                              - отличное от оригинальной модели отображение<br>\r\n    def created_delta(self):                                - дополнительный метод, которого нет в оригинальной модели\r\n        return timezone.now() - self.created\r\n>> </pre>\r\n\r\n---\r\n\r\n## Пример abstract-модели для разного типа контента:\r\n\r\n\r\n> <pre>\r\nclass ItemBase(models.Model):\r\n    owner = models.ForeignKey(User,\r\n        related_name=<b>\'%(class)s_related\'</b>,                   - крутой <b>placeholder</b> для разных типов контента. Теперь можно у owner искать по именам\r\n        on_delete=models.CASCADE)                             text_related, file_related, image_related и т.д.\r\n    title = models.CharField(max_length=250)\r\n    created = models.DateTimeField(auto_now_add=True)\r\n    updated = models.DateTimeField(auto_now=True)<br>	\r\n    class Meta:\r\n        <b>abstract = True</b><br>\r\n    def \\_\\_str\\_\\_(self):\r\n        return self.title\r\n<br>\r\nclass Text(<b>ItemBase</b>):                                       - у каждой модели есть как общие поля с ItemBase, так и свои уникальные\r\n	content = models.TextField()\r\nclass File(<b>ItemBase</b>):\r\n	file = models.FileField(upload_to=\'files\')\r\nclass Image(<b>ItemBase</b>):\r\n	file = models.FileField(upload_to=\'images\')\r\nclass Video(<b>ItemBase</b>):\r\n	url = models.URLField()\r\n> </pre>','2022-11-21','DJANGO/orm и базы данных/models/model inheritance | наследование моделей',22,3),(55,'Django','Своё поле | сustom field','svoio-pole-sustom-field','Можно сделать своё поле для модели с расширенным функционалом.<br>\r\nНапример поле-счётчик, который будет учитывать предыдущий пронумерованный контент.<br>\r\n<br>\r\nНужно в папке приложения создать новый файлик для полей: <i>fields.py</i>:\r\n\r\n> <pre>\r\nfrom django.db import models\r\nfrom django.core.exceptions import ObjectDoesNotExist\r\n<br>\r\nclass OrderField(models.<b>PositiveIntegerField</b>):                             - наследуем от PositiveIntegerField. Будем расширять его функционал\r\n    def \\_\\_init\\_\\_(self, for_fields=None, \\*args, \\*\\*kwargs):\r\n        self.for_fields = for_fields                                       - дополнительный пар-тр: массив полей, по которым ведём счёт\r\n        super().\\_\\_init\\_\\_(\\*args, \\*\\*kwargs)<br>\r\n    <b>def pre_save</b>(self, model_instance, add):                               - перезаписываем оригинальный метод\r\n        if getattr(model_instance, self.attname) is None:                  - получить значение поля в его модели по его имени\r\n            try:\r\n                qs = self.model.objects.all()                              - получаем все объекты\r\n                if self.for_fields:                                        - начинаем фильтровать, если указаны другие поля\r\n                    query = {field: getattr(model_instance, field)\\        - составляем словарь для дополнительной фильтрации\r\n                        for field in self.for_fields}\r\n                    qs = qs.filter(**query)                                - фильтруем с учётом доп. данных\r\n                last_item = qs.latest(self.attname)                        - получаем последний итем из отфильтрованных\r\n                value = last_item.order + 1									\r\n            except ObjectDoesNotExist:\r\n                value = 0\r\n            setattr(model_instance, self.attname, value)\r\n                return value\r\n        else:\r\n            return super().pre_save(model_instance, add)\r\n> </pre>\r\n\r\n<i>Теперь это поле можно использовать в моделях:</i>\r\n\r\n> <pre>\r\nfrom <b>.fields</b> import <b>OrderField</b><br>\r\nclass Module(models.Model):\r\n    # ...\r\n    <b>order = OrderField</b>(blank=True, for_fields=[\'course\'])\r\n> </pre>','2022-11-21','DJANGO/orm и базы данных/models/своё поле | сustom field',22,3),(56,'Django','Свой object manager','svoi-object-manager','Когда в коде часто встречаются длинные однотипные запросы к базе данных с кучей фильтров и условий, имеет смысл заменить стандартный object manager <i>objects</i> на свой собственный,\r\nкуда можно включить все эти фильтры и условия.<br>\r\nСвоего рода рефакторинг.<br>\r\n\r\n<i>models.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom django.db import models<br>\r\nclass PublishedManager(<b>models.Manager</b>):                     - кастомный object manager. Отдельный класс, лежит там же, где и модели\r\n    def get_queryset(self):                                 - нужно всего лишь переписать метод <b>get_queryset()</b>\r\n        return super().get_queryset().\r\n            <b>filter(status=\'published\')</b>                      - просто в хвост добавляем наши фильтры и условия<br>\r\n<br>\r\nclass Post(models.Model):                                   - модель, для которой будем использовать своя менеджер\r\n    ...fields...\r\n    <b>objects</b> = models.Manager()                              - стандартный object manager, указываем его, т.к. мы добавили ещё и свой кастомный\r\n    <b>published = PublishedManager()</b>                          - наш кастомный object manager для вывода постов со статусом published\r\n> </pre>\r\n\r\nТеперь вместо длинного запроса `Post.objects.filter(status=\'published\')` можно писать укороченный вариант: `Post.published.all()`','2022-11-21','DJANGO/orm и базы данных/models/свой object manager',22,3),(57,'Django','Примеры используемых полей класса','primery-ispolzuemykh-polei-klassa','Один абстрактный класс модели, нафаршированный разными полями с некоторыми часто встречаемыми параметрами, опциями в Meta и популярными методами.\r\nКрутая [документация](https://docs.djangoproject.com/en/4.1/ref/models/) по моделям в Django.\r\n\r\n\r\n\r\n> <pre>\r\nfrom django.db import models\r\nfrom django.utils import timezone\r\nfrom django.contrib.auth.models import User\r\nfrom django.urls import reverse                                                 - для создания каноничных ссылок на каждый объект\r\nfrom django.core.validators import MinValueValidator, \\                         - валидаторы поля, ограничивающие минимальное и максимальное значение\r\n	MaxValueValidator\r\n<br>\r\n<b>class PublishedManager</b>(models.Manager):                                         - кастомный object manager, чтобы удобнее вытягивать данные из базы данных\r\n	def get_queryset(self):\r\n		return super(PublishedManager, \r\n			self).get_queryset().filter(\r\n				status=\'published)\r\n<br>\r\nclass Post(models.Model):                                                       - просто класс из учебного примера, который оброс нужными и ненужными полями.\r\n--------------------------------------------------------------------------- Ключи -----------------------------------------------------------------------------------------<br>\r\n    author = models.<b>ForeignKey</b>(User,                                            - внешний ключ для one-to-many, many-to-one\r\n        <b>on_delete</b>=models.CASCADE,                                               - при удалении user\\`a удалятся все его посты (есть и другие варианты, например SET_NULL)\r\n        <b>related_name</b>=\'blog_posts\')                                              - обратная связь. Для поиска постов по автору (User.blog_posts.all() выдаст все посты этого юзера)\r\n                                                                                  без related_name было бы User.post_set.all()\r\n    users_like = models.<b>ManyToManyField</b>(settings.AUTH_USER_MODEL,               - Many-to-Many автоматически создаст доп. таблицу в БД. Можно создать свою и указать вручную через\r\n        related_name=\'images_liked\', blank=True)                                  <b>through</b>, можно замкнуть на себя (<i>\'self\'</i> вместо AUTH_USER). Пример см. [тут](http://rivallar.pythonanywhere.com/page/53/)<br>\r\n    user = models.<b>OneToOneField</b>(settings.AUTH_USER_MODEL,                       - внешний ключ для OneToOne. Не слишком популярен, т.к. часто замедляет запросы в БД\r\n        on_delete=models.CASCADE, related_name=\'123\')\r\n<br>\r\n---------------------------------------------------------------------------- Простые поля ----------------------------------------------------------------------------------<br>\r\n    title = models.<b>CharField</b>(max_length=250)                                    - обычное небольшое поле символов\r\n    body = models.<b>TextField</b>()                                                   - большое текстовое поле\r\n    slug = models.<b>SlugField</b>(max_length=250,                                     - поле для генерации удобных ссылок\r\n        <b>unique_for_date</b>=\'publish\')                                              - исключает повторы для одной и той же даты (поле <i>publish)</i>.<br>\r\n                                                                                  Т.е. не будет 2 одинаковых slug для одной и той же даты в <i>publish</i>\r\n    publish = models.<b>DateTimeField</b>(<b>default</b>=timezone.now,                        - поле времени и даты с автозаполнением\r\n        <b>auto_now_add</b>=True,                                                      - записать автоматически при создании объекта\r\n        <b>auto_now</b>=True)                                                          - переписать каждый раз при изменении объекта\r\n    publish2 = models.<b>DateField</b>()                                               - только дата\r\n    publish3 = models.<b>TimeField</b>()                                               - только время\r\n    active = models.<b>BooleanField</b>(default=True)                                  - Boolean поле<br>\r\n    total_likes = models.<b>PositiveIntegerField</b>(default=0)                        - положительное целочисленное поле. По умолчанию будет 0\r\n    int_range = models.<b>IntegerField</b>(                                            - просто целочисленное поле\r\n        <b>validators</b>=[MinValueValidator(0), MaxValueValidator(100)])              - так к полю добавляются дополнительные валидаторы\r\n    price = models.<b>DecimalField</b>(<i>max_digits</i>=6,                                   - хранит числа в формате питоновского <i>decimal</i>. <u>Обязательны оба параметра</u>.\r\n        <i>decimal_places</i>=2)                                                         В этом примере задано 6 цифр: 4 до запятой и 2 после\r\n    url = models.<b>URLField</b>()	                                                   - поле для хранения URL-ссылок (по идее встроены доп. валидаторы к текстовому полю)\r\n    image = models.<b>ImageField</b>(<i>upload_to</i>=\'images/%Y/%m/%d/\')                     - поле для картинок и куда их сохранять\r\n    mail = models.<b>EmailField</b>(max_length=254)                                    - текстовое поле с проверкой на валидность email\r\n    buyer_discounts = models.<b>JSONField(default=dict</b>, blank=True,                - очень крутое поле для хранения данных в JSON. Можно запихать неструктурированное что угодно\r\n                               null=True, validators=[check_discount_field])\r\n<br>\r\n------------------------------------------------------------------------------- Поля с выбором --------------------------------------------------------------------------------------<br>\r\n    <b>STATUS_CHOICES</b> = (                                                          - так описываются опции из которые можно будет выбирать в других полях. Это <b>не поле!!!</b>\r\n        (\'draft\', \'Draft\'),                                                     - кортеж из фактического значения, и того, что будет видно пользователю (например в форме)\r\n        (\'published\', \'Published\'),                                               !!!Можно делать через класс!!! (см. в примерах)\r\n            )\r\n    status = models.CharField(max_length=10,                                    - так делаются <b>поля с выбором</b> из указанных опций\r\n        <b>choices</b>=STATUS_CHOICES,                                                 - завязка на опции для выбора\r\n        default=\'draft\')\r\n<br>\r\n------------------------------------------------------------------------------- object manager`ы ------------------------------------------------------------------------------------<br>	\r\n    objects = models.Manager()                                                  - стандартный object manager, указываем его, т.к. мы добавили ещё и свой кастомный\r\n    published = PublishedManager()                                              - наш кастомный object manager для вывода постов со статусом published\r\n<br>\r\n--------------------------------------------------------------------------------- META -----------------------------------------------------------------------------------------------<br>\r\n    class Meta:                                                                 - встроенный класс для удобного отображения информации\r\n        ordering = (\'-publish\',)                                                - выводить информацию по убыванию даты публикации\r\n        verbose_name = \'post\'\r\n        verbose_name_plural = \'posts\'                                           - как называть объект в единичном и множественном числе\r\n        index_together = ((\'id\', \'slug\'),)                                      - индексировать БД по двум полям. Ускоряет работу\r\n        <br>\r\n        <b>constraints</b> = [                                                         - [список](https://docs.djangoproject.com/en/4.1/ref/models/constraints/) мета-классов для введения доп. ограничений и проверок\r\n            <b>models.UniqueConstraint</b>(<i>fields</i>=[\'field1\', \'field2\'],                - проверит, чтобы сочетание значений двух полей было уникальным\r\n                name=\'Must be unique\')]\r\n<br>\r\n--------------------------------------------------------------------------------- Методы -----------------------------------------------------------------------------------------------<br>	\r\n    def \\_\\_str\\_\\_(self):                                                          - что показывать при print(model_object)\r\n        return self.title<br>\r\n    <b>def get_absolute_url(self)</b>:                                                 - сгенерировать ссылку на объект (чтобы посмотреть его <i>detail view</i>\r\n        return <b>reverse</b>(<i>\'blog:post_detail\'</i>,                                      - <b>reverse</b> собирает из нужного <i>url</i> из <i>urls.py</i> \r\n            <b>args</b>=[self.publish.year,                                              и аргументов ссылку на <i>detail.view</i> объекта\r\n            self.publish.month,\r\n            self.publish.day,\r\n            self.slug])<br>\r\n    <b>def clean</b>(self):                                                            - тут можно реализовывать свои проверки, которые требуют данные из других источников. \r\n        if self.profile.balance < self.max_price:                                !<u>сам не вызывается! Используй <i>full_clean()</i> в <i>save</i></u>\r\n            raise ValidationError({\'max_price\': \'error msg\'})                   - прикрепит ошибку к нужному полю<br>\r\n    <b>def save</b>(self, \\*args, \\*\\*kwargs):                                            - хороший способ что-то досоздать, дополнительно проверить, переделать при сохранении объекта в БД\r\n        self.<b>full_clean()</b>                                                       - запустит дополнительные проверки в методах <i>clean</i>\r\n        if not self.slug:\r\n            self.slug = slugify(unidecode(self.title))\r\n        super().save(\\*args, \\*\\*kwargs)			\r\n> </pre>','2022-11-21','DJANGO/orm и базы данных/models/примеры используемых полей класса',22,3),(58,'Django','Импорты','importy','# На случай, если ты забыл откуда импортируется эта штука ;) \r\n\r\n\r\n<table>\r\n    <tr><td>authenticate</td>                               <td>from django.contrib.auth import authenticate</td></tr>\r\n\r\n    <tr><td>CreateView</td>                                 <td>from django.views.generic.edit</td></tr>\r\n\r\n    <tr><td>DeleteView</td>                                 <td>from django.views.generic.edit</td></tr>\r\n\r\n    <tr><td>forms</td>                                      <td>from django import forms</td></tr>\r\n\r\n    <tr><td>get_object_or_404</td>                                      <td>from django.shortcuts import get_object_or_404</td></tr>\r\n\r\n    <tr><td>HttpResponse</td>                               <td>from django.http import HttpResponse</td></tr>\r\n\r\n    <tr><td>inlineformset_factory</td>                      <td>from django.forms.models import inlineformset_factory</td></tr>\r\n    \r\n    <tr><td>ListView</td>                                   <td>django.views.generic.list</td></tr>\r\n    <tr><td>login</td>                                      <td>from django.contrib.auth import login</td></tr>\r\n    <tr><td>LoginView/LogoutView</td>                       <td>from django.contrib.auth.views import LoginView</td></tr>\r\n    <tr><td>LoginRequiredMixin</td>                         <td>from django.contrib.auth.mixins import LoginRequiredMixin</td></tr>\r\n    <tr><td>login_required</td>                             <td>from django.contrib.auth.decorators import login_required</td></tr>\r\n\r\n    <tr><td>modelform_factory</td>                          <td>from django.forms.models import modelform_factory</td></tr>\r\n    <tr><td>MaxValueValidator</td>                          <td>from django.core.validators</td></tr>\r\n    <tr><td>MinValueValidator</td>                          <td>from django.core.validators</td></tr>\r\n\r\n    <tr><td>PasswordChangeView</td>                         <td>from django.contrib.auth.views import PasswordChangeView</td></tr>\r\n    <tr><td>PasswordResetView</td>                          <td>from django.contrib.auth.views import PasswordResetView</td></tr>\r\n    <tr><td>PermissionRequiredMixin</td>                    <td>from django.contrib.auth.mixins import PermissionRequiredMixin</td></tr>\r\n\r\n    <tr><td>redirect</td>                                   <td>from django.shortcuts import redirect</td></tr>\r\n    <tr><td>render</td>                                     <td>from django.shortcuts import render</td></tr>\r\n    <tr><td>reverse_lazy</td>                               <td>from django.urls import reverse_lazy</td></tr>\r\n\r\n    <tr><td>settings</td>                                   <td>from django.conf import settings</td></tr>\r\n    <tr><td>static</td>                                     <td>from django.conf.urls.static import static</td></tr>\r\n\r\n    <tr><td>TemplateResponseMixin</td>                      <td>from django.views.generic.base import TemplateResponseMixin</td></tr>\r\n\r\n    <tr><td>View</td>                                       <td>from django.views.generic.base import View</td></tr>\r\n\r\n    <tr><td>UpdateView</td>                                 <td>from django.views.generic.edit</td></tr>\r\n    <tr><td>User</td>                                       <td>django.contrib.auth.models</td></tr>\r\n    <tr><td>UserCreationForm</td>                           <td>django.contrib.auth.forms</td></tr>\r\n    \r\n</table>\r\n\r\n<!--\r\n    <tr><td></td><td></td></tr>\r\n-->','2022-11-23','DJANGO/импорты',4,4),(59,'Django','Свой authentication view & свой User','svoi-authentication-view-svoi-user','### Задача:\r\n\r\n1. Сделать форму для получения от пользователя логина и пароля.\r\n2. Аутентифицировать пользователя \r\n3. Проверить на active\r\n4. Залогинить и начать аутентифицированную сессию\r\n\r\nСоздаём в проекте новое приложение <i>accounts</i> (в БД ничего не создаётся, используем уже встроенную модель django user):\r\n> `python manage.py startapp accounts`<br>\r\n> `python manage.py migrate`                                 \r\n\r\n<i>login_form</i> в <i>forms.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom django import forms<br>\r\nclass LoginForm(forms.Form):\r\n    username = forms.CharField()\r\n    password = forms.CharField(<b>widget=forms.PasswordInput</b>)  - виджет, скрывающий отображение пароля (будут точки вместо символов)\r\n> </pre>\r\n\r\n<i>login_view</i> в <i>views.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom django.http import HttpResponse\r\nfrom django.shortcuts import render\r\nfrom django.contrib.auth import authenticate, login\r\nfrom .forms import LoginForm\r\n<br>\r\ndef user_login(request):\r\n    if request.method == \'POST\':\r\n        form = LoginForm(request.POST)\r\n        if form.is_valid():\r\n            cd = form.cleaned_data\r\n            user = <b>authenticate</b>(request,                    - возвращает объект <b>user</b> из БД (если он там есть по предоставленным данным)\r\n                username=cd[\'username\'],\r\n                password=cd[\'password\'])\r\n            if user is not None:\r\n                if user.<b>is_active</b>:                          - проверка на то, что он активен (не заблокирован и пр.)\r\n                    <b>login</b>(request, user)                    - помещаем найденного юзера в http-сессию (логин)\r\n                    return HttpResponse(\'Authenticated \'\\\r\n                        \'successfully\')\r\n                else:\r\n                    return HttpResponse(\'Disabled account\')\r\n            else:\r\n                return HttpResponse(\'Invalid login\')\r\n    else:\r\n        form = LoginForm()\r\n        return render(request, \'account/login.html\', {\'form\': form})\r\n> </pre>\r\n\r\nMain <i>urls.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom django.conf.urls import path, include\r\nfrom django.contrib import admin\r\n<br>\r\nurlpatterns = [\r\n    path(\'admin/\', admin.site.urls),\r\n    <b>path(\'account/\', include(\'account.urls\')),</b>\r\n    ]\r\n> </pre>\r\n\r\naccounts_app <i>urls.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom django.urls import path\r\nfrom . import views\r\n<br>\r\nurlpatterns = [\r\n    path(\'login/\', views.user_login, name=\'login\'),\r\n    ]\r\n> </pre>\r\n\r\nСоздаём html-template <i>login.html</i> в <i>templates/accounts/</i>\r\n\r\n---\r\n\r\n### Можно создавать свою кастомную модель пользователя .<br>\r\n\r\n\r\nДля большей гибкости. Но так делают довольно редко, т.к. это очень трудозатратно и есть нюансы при интеграции сторонних приложений, которым нужен user<br>\r\nНужно унаследовать от класса <i>AbstractUser</i> и почитать [документацию](https://docs.djangoproject.com/en/2.0/topics/auth/customizing/#substituting-a-custom-user-model) :)','2022-11-25','DJANGO/authentification & registration/свой authentication view & свой user',23,3),(60,'Django','Class-based authentication views (build-in)','class-based-authentication-views-build-in','В Django есть много полезных встроенных views для мэнеджмента аккаунтов пользователей ([документация](https://docs.djangoproject.com/en/2.0/topics/auth/default/#all-authentication-views)):<br>\r\n\r\n1. <b>LoginView</b>\r\n2. <b>LogoutView</b>\r\n3. <b>PasswordChangeView</b>\r\n4. <b>PasswordChangeDoneView</b>\r\n5. <b>PasswordResetView</b>                                 - генерирует токен и отправляет его на почту пользователя\r\n6. <b>PasswordResetDoneView</b>                             - говорит пользователю, что пароль отправлен на почту\r\n7. <b>PasswordResetConfirmView</b>                          - форма смены пароля, после того как абонент перешёл по ссылке из почты (с токеном)\r\n8. <b>PasswordResetCompleteView</b>                         - подтверждение смены пароля\r\n\r\nВсе они лежат тут: django.contrib.auth.views (импорт)\r\n\r\n---\r\n\r\n# Система аутентификации силами Django\r\n\r\n- Создаём новое приложение <i>accounts</i> (добавляем в настройки, мигрируем) <b>!!!Нужнжо добавлять выше приложения админа!!!</b>, т.к. там тоже есть регистрация, которая перебьёт нашу\r\n- Подключаем его urlы к основному <i>urls.py</i>\r\n\r\n> <pre>\r\nfrom django.conf.urls import path, include\r\nfrom django.contrib import admin\r\n<br>\r\nurlpatterns = [\r\n    path(\'admin/\', admin.site.urls),\r\n    <b>path(\'account/\', include(\'account.urls\')),</b>\r\n    ]\r\n> </pre>\r\n\r\n- Создаём и заполняем <i>urls.py</i> в самом приложении <i>accounts</i>:\r\n\r\n\r\n> <pre>\r\nfrom django.urls import path, <b>reverse_lazy</b>                            - чтобы указывать явно куда перенаправлять после успешных смен пароля                  \r\nfrom django.contrib.auth import views as auth_views                   - импортим все сразу, т.к. их будет много\r\nfrom . import views<br>\r\nurlpatterns = [\r\n    path(\'login/\', auth_views.LoginView.as_view(), name=\'login\'),\r\n    path(\'logout/\', auth_views.LogoutView.as_view(), name=\'logout\'),\r\n    path(\'password_change/\',                                          -!!!Лучше делать сразу пачками (PasswordChange/PasswordChangeDone) и их html. \r\n        auth_views.PasswordChangeView.as_view(                         (тогда не зацепит админские views и html)\r\n            <b>success_url=reverse_lazy</b>(                                 - без явно указанного параметра перенаправления что-то тупит\r\n                \'accounts:password_change_done\')),\r\n            name=\'password_change\'),\r\n    path(\'password_change/done/\',\r\n        auth_views.PasswordChangeDoneView.as_view(),\r\n        name=\'password_change_done\'),\r\n    path(\'password_reset/\',\r\n        auth_views.PasswordResetView.as_view(\r\n        success_url=reverse_lazy(\'accounts:password_reset_done\')),\r\n        name=\'password_reset\'),\r\n    path(\'password_reset/done/\',\r\n        auth_views.PasswordResetDoneView.as_view(),\r\n        name=\'password_reset_done\'),\r\n    path(\'reset/<uidb64\\>/<token\\>/\',\r\n        auth_views.PasswordResetConfirmView.as_view(\r\n        success_url=reverse_lazy(\'accounts:password_reset_complete\')),\r\n        name=\'password_reset_confirm\'),\r\n    path(\'reset/done/\',\r\n        auth_views.PasswordResetCompleteView.as_view(),\r\n        name=\'password_reset_complete\'),\r\n    #path(\'\', <b>include</b>(\'django.contrib.auth.urls\')),                   - <b>вместо</b> всех  путей выше можно использовать <i>полностью</i> дефолтную систему джанги\r\n    path(\'\', views.dashboard, name=\'dashboard\'),                      - страничка аккаунта пользователя    \r\n    ]\r\n> </pre>\r\n\r\n---\r\n\r\n- HTML-темплэйты будем хранить тут (встроенные views по умолчанию ищут именно в этой папке): <i>templates/registration/</i><br>\r\nТут будут лежать: \r\n> + <i>login.html\r\n> + logged_out.html\r\n> + password_change_form.html\r\n> + password_change_done.html\r\n> + password_reset_form.html\r\n> + password_reset_email.html\r\n> + password_reset_done.html\r\n> + password_reset_confirm.html\r\n> + password_reset_complete.html</i>\r\n\r\nМожно использовать уже встроенные в Django html-templates. Для этого нужно в <i>urls.py</i> приложения закомментить все views регистрации и добавить встроенные:\r\n\r\n\r\n> <pre>\r\nfrom django.urls import path, <b>include</b>\r\n...\r\nurlpatterns = [\r\n    ...\r\n    path(\'\', include(\'django.contrib.auth.urls\')),          - полностью дефолтная аутентификация силами Django\r\n    ]\r\n> </pre>\r\n\r\nБольше информации по встроенным темплэйтам в [документации](https://github.com/django/django/blob/stable/2.0.x/django/contrib/auth/urls.py)\r\n\r\n \r\n\r\n\r\n\r\n## Пример <i>login.html</i>-темплэйта:\r\n\r\n\r\n> <pre>\r\n{% extends \"base.html\" %}\r\n{% block title %}Log-in{% endblock %}\r\n{% block content %}\r\n    <h1\\>Log-in</h1\\>\r\n    {% if form.errors %}\r\n        <p\\>Your username and password didn\'t match. Please try again.</p\\>\r\n    {% else %}\r\n    <p\\>Please, use the following form to log-in:</p\\>\r\n    {% endif %}\r\n    <div class=\"login-form\"\\>\r\n        <form action=\"{% url \'login\' %}\" method=\"post\"\\>\r\n            {{ <b>form</b>.as_p }}                                                     - по умолчанию это AuthenticationForm из django.contrib.auth.forms                                           \r\n            {% csrf_token %}\r\n            <b><input type=\"hidden\" name=\"next\" value=\"{{ next }}\" /\\></b>             - ссылка. Если задана, после регистрации пользователя перенаправит на эту ссылку\r\n            <p\\><input type=\"submit\" value=\"Log-in\"\\></p\\>\r\n        </form\\>\r\n    </div\\>\r\n{% endblock %}\r\n> </pre>\r\n\r\n## Пример <i>password_change_form.html</i>:\r\n\r\n> <pre>\r\n{% extends \"base.html\" %}\r\n{% block title %}Change you password{% endblock %}\r\n{% block content %}\r\n    <h1\\>Change you password</h1\\>\r\n    <p\\>Use the form below to change your password.</p\\>\r\n    <form action=\".\" method=\"post\"\\>\r\n        {{ form.as_p }}\r\n        <p\\><input type=\"submit\" value=\"Change\"\\></p\\>\r\n        {% csrf_token %}\r\n    </form\\>\r\n{% endblock %}\r\n> </pre>\r\n\r\n## Пример <i>password_reset_form.html</i>:\r\n\r\n> <pre>\r\n{% extends \"base.html\" %}\r\n{% block title %}Reset your password{% endblock %}\r\n{% block content %}\r\n    <h1\\>Forgotten your password?</h1\\>\r\n    <p\\>Enter your e-mail address to obtain a new password.</p\\>\r\n    <form action=\".\" method=\"post\"\\>\r\n        {{ form.as_p }}                                               - форма попросит ввести e-mail\r\n        <p\\><input type=\"submit\" value=\"Send e-mail\"\\></p\\>\r\n        {% csrf_token %}\r\n    </form\\>\r\n{% endblock %}\r\n> </pre>\r\n\r\n## Пример <i>password_reset_email.html</i>, который используется для рендеринга письма на почту пользователю:\r\n\r\n\r\n> <pre>\r\nSomeone asked for password reset for email {{ email }}. Follow the link\r\nbelow:\r\n{{ protocol }}://{{ domain }}{% url \"password_reset_confirm\" uidb64=uid token=token %} - ссылка, которая обратно вернёт на сайт из почты\r\nYour username, in case you\'ve forgotten: {{ user.get_username }}\r\n> </pre>\r\n\r\n## Пример <i>password_reset_confirm.html</i>:\r\n\r\n\r\n> <pre>\r\n{% extends \"base.html\" %}\r\n{% block title %}Reset your password{% endblock %}\r\n{% block content %}\r\n    <h1\\>Reset your password</h1\\>\r\n    {% if validlink %}                                                          - проверка на валидность ссылки. Это переменная, которую добавляет PasswordResetConfirmView\r\n        <p\\>Please enter your new password twice:</p\\>\r\n        <form action=\".\" method=\"post\"\\>\r\n            {{ form.as_p }}\r\n            {% csrf_token %}\r\n            <p\\><input type=\"submit\" value=\"Change my password\" /\\></p\\>\r\n        </form\\>\r\n    {% else %}\r\n        <p\\>The password reset link was invalid, possibly because it has\r\n        already been used. Please request a new password reset.</p\\>\r\n    {% endif %}\r\n{% endblock %}\r\n> </pre>\r\n\r\n\r\n\r\n\r\n---\r\n\r\n## Настройки в <i>settings.py</i> для перенаправлений (при регистрации/дерегистрации):\r\n\r\nДля перенаправления можно использовать как hard-coded urls, так и их обратное имя <i>(name в urls.py)</i>\r\n\r\n> <pre>\r\nLOGIN_REDIRECT_URL = \'dashboard\'        - куда перенаправлять по умолчанию, если в <i>LoginView</i> не передавался параметр <i>next</i>\r\nLOGIN_URL = \'login\'                     - автоматическое перенаправление на страницу авторизации для views, прикрытых <i>@login_required</i>\r\nLOGOUT_URL = \'logout\'                   - перенаправление при логауте\r\n> </pre>','2022-11-25','DJANGO/authentification & registration/class-based authentication views (build-in)',23,3),(61,'Django','EMAIL-BACKEND','email-backend','## Делаем заглушку, чтобы письма выводились в консоль (удобно при разработке):\r\n\r\nВ <i>settings.py</i> просто добавляем EMAIL_BACKEND: \r\n\r\n> `EMAIL_BACKEND = \'django.core.mail.backends.console.EmailBackend\'`','2022-11-25','DJANGO/email-backend',4,4),(62,'Django','Registration','registration','## Пример своей формы для регистрации\r\n\r\n> <pre>\r\nfrom django.contrib.auth.models import User\r\n<br>\r\nclass UserRegistrationForm(forms.ModelForm):\r\n    password = forms.CharField(label=\'Password\',\r\n        <b>widget=forms.PasswordInput)</b>                                   - виджет для отображения пароля точечками              \r\n    password2 = forms.CharField(label=\'Repeat password\',\r\n        widget=forms.PasswordInput)<br>\r\n    class Meta:\r\n        model = User\r\n        fields = (\'username\', \'first_name\', \'email\')<br>\r\n    def <b>clean_password2</b>(self):                                        - своя функция проверки поля формы (свой валидатор)\r\n        cd = self.cleaned_data\r\n        if cd[\'password\'] != cd[\'password2\']:\r\n            raise forms.ValidationError(\'Passwords don\\\'t match.\')\r\n        return cd[\'password2\']\r\n> </pre>\r\n\r\nНо можно использовать и встроенную <i>UserCreationForm</i>, которая находится в `django.contrib.auth.forms` и делает примерно то же самое\r\n\r\n\r\n## Пример view для регистрации:\r\n\r\n> <pre>\r\nfrom .forms import UserRegistrationForm\r\nfrom .models import <b>Profile</b>                                           - если нам недостаточно инфы в стандартной модели User и мы хотим к ней подключить свой профиль\r\n<br>\r\ndef register(request):\r\n    if request.method == \'POST\':\r\n        user_form = UserRegistrationForm(request.POST)\r\n        if user_form.is_valid():\r\n            new_user = user_form.<b>save(commit=False)</b>                   - мы хотим сохранить пароль зашифрованным, поэтому сразу не сохраняем пользователя в базу\r\n            new_user.<b>set_password</b>(                                    - специальная функция, которая поддерживает шифрование пароля\r\n                user_form.cleaned_data[\'password\'])\r\n            new_user.save()\r\n            <b>Profile.objects.create(user=new_user)</b>                     - при создании нового пользователя создаём ещё и пустой профиль для него\r\n            return render(request, \'account/register_done.html\',\r\n                {\'new_user\': new_user})\r\n    else:\r\n        user_form = UserRegistrationForm()\r\n        return render(request, \'account/register.html\',\r\n            {\'user_form\': user_form})\r\n> </pre>\r\n\r\n## Пример view для редактирования пользовательской информации:\r\n\r\n\r\n> <pre>\r\nfrom .forms import LoginForm, UserRegistrationForm, \\\r\n    <b>UserEditForm, ProfileEditForm</b>                                     - формы редактирования user\'a и его профиля                                    \r\n<br>\r\n@login_required\r\ndef edit(request):\r\n    if request.method == \'POST\':\r\n        user_form = UserEditForm(instance=request.user,\r\n            data=request.POST)\r\n        profile_form = ProfileEditForm(\r\n            <b>instance=request.user.profile, data=request.POST,</b>         - у нас две формы за раз. Так указываем явно что в какое поле записывать\r\n            <b>files=request.FILES</b>)                                      - это видимо для обработки картинки (фото в профиль)\r\n        if user_form.is_valid() and profile_form.is_valid():\r\n            user_form.save()\r\n            profile_form.save()\r\n    else:\r\n        user_form = UserEditForm(<b>instance=request.user</b>)               - т.к. мы редактируем информацию, отдаём в темплэйт уже заполненную форму, а не пустую\r\n        profile_form = ProfileEditForm(\r\n            instance=request.user.profile)\r\n    return render(request, \'account/edit.html\', {\'user_form\': user_form,\r\n        \'profile_form\': profile_form})\r\n> </pre>\r\n\r\n<i>!!!Не забудь добавить путь в urls.py приложения accounts:</i> `path(\'edit/\', views.edit, name=\'edit\'),`\r\n\r\n## Пример html-темплэйта edit.html:\r\n\r\n> <pre>\r\n{% extends \"base.html\" %}<br>\r\n{% block title %}Edit your account{% endblock %}\r\n{% block content %}\r\n    <h1\\>Edit your account</h1\\>\r\n    <p\\>You can edit your account using the following form:</p\\>\r\n    <form action=\".\" method=\"post\" <b>enctype=\"multipart/form-data\"</b>\\>    - этот параметр нужен, если в форме есть файлы\r\n        {{ user_form.as_p }}\r\n        {{ profile_form.as_p }}                                      - вот так просто вставляем две формы в одну\r\n        {% csrf_token %}\r\n        <p\\><input type=\"submit\" value=\"Save changes\"\\></p\\>\r\n    </form\\>\r\n{% endblock %}\r\n> </pre>','2022-11-28','DJANGO/authentification & registration/registration',23,3),(63,'Django','Работа с изображениями','rabota-s-izobrazheniiami','Обычно в продакшн-среде за работу с картинками отвечает сервер (например Nginx).<br>\r\nЧтобы работать с изображениями во время разработки/отладки (когда settings.DEBUG = True) нужно внести след. настройки:\r\n\r\n- Устанавливаем <b>Pillow</b>: `pip install Pillow`\r\n- Добавляем настройки в <i>settings.py</i>:\r\n\r\n> <pre>\r\n<b>MEDIA_URL</b> = \'/media/\'\r\n<b>MEDIA_ROOT</b> = os.path.join(BASE_DIR, \'media/\')\r\n> </pre>\r\n\r\n- Добавляем настройки в основной <i>urls.py</i>:\r\n\r\n> <pre>\r\nfrom django.conf import settings\r\nfrom django.conf.urls.static import static\r\n<br>\r\nurlpatterns = [\r\n    path(\'admin/\', admin.site.urls),\r\n    path(\'account/\', include(\'account.urls\')),\r\n    ...\r\n    ]\r\n<br>\r\n<b>if settings.DEBUG</b>:\r\n    urlpatterns += static(settings.MEDIA_URL,\r\n        document_root=settings.MEDIA_ROOT)\r\n> </pre>','2022-11-28','DJANGO/работа с изображениями',4,4),(64,'Django','drag`n`drop перестановка объектов','dragndrop-perestanovka-obektov','### Клёвый drad\\`n\\`drop способ поменять порядок следования объектов контента с помощью django-braces, javascript (jQuery UI)&AJAX\r\n\r\n- Установить <b>django-braces</b> - коллекция сторонних mixins для большей функциональности\r\n- Делаем view, который будет заниматься перестановкой (<i>не забудь сделать для него url!</i>):\r\n\r\n> <pre>\r\nfrom <b>braces.views</b> import <i>CsrfExemptMixin</i>,                                  - чтобы делать post-request без формирования csrf-токена\r\n    <i>JsonRequestResponseMixin</i>                                               - для работы с JSON	\r\nclass ModuleOrderView(CsrfExemptMixin,\r\n    JsonRequestResponseMixin, View):<br>\r\n    <b>def post</b>(self, request):\r\n        for id, order in self.request_json.items():                        - в post-request`e вернётся словарь из id элемента и его нового порядкового номера (order)\r\n            Module.objects.filter(id=id,                                   - просто находим объект по id и обновляем его порядковый номер\r\n                course__owner=request.user).<b>update</b>(order=order)\r\n        return self.render_json_response({\'saved\': \'OK\'})\r\n> </pre>\r\n\r\n- Нужный код из html-темплэйта:\r\n\r\n> <pre>\r\n`<script\r\n    src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\">          - нужен обычный jquery     \r\n</script>`\r\n`<script \r\n    src=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\">     - ui для отрисовки перетаскивания\r\n</script>`\r\n<br>\r\n`{% block content %}                                                                  - дальше кусок кода, который объяснит что откуда берётся в javascript ниже                                        \r\n    {% with course=module.course %}\r\n        <h1>Course \"{{ course.title }}\"</h1>\r\n        <div class=\"contents\">\r\n            <h3>Modules</h3>\r\n                <ul id=\"modules\">                                                    - мы будем искать этот список и работать с его элементами (children)\r\n                    {% for m in course.modules.all %}\r\n                        <li data-id=\"{{ m.id }}\" {% if m == module %}                - вот так на лету присваиваем элементу списка атрибут (его id в БД). Воспользуемся в скрипте\r\n                            class=\"selected\"{% endif %}>\r\n                            <a href=\"{% url \"module_content_list\" m.id %}\">\r\n                                <span>\r\n                                    Module <span class=\"order\">{{ m.order|add:1 }}</span>\r\n                                </span>\r\n                                <br>\r\n                                {{ m.title }}\r\n                            </a>\r\n                        </li>\r\n                    {% empty %}\r\n                        <li>No modules yet.</li>\r\n                    {% endfor %}\r\n                </ul>\r\n{% endblock %}`\r\n{% block domready %}\r\n    $(\'#modules\').sortable({                                               - ищем элементы списка с классом modules и применяем к ним функцию sortable\r\n        stop: function(event, ui) {                                        - когда объект перетянули, пересчитываем порядок и формируем словарь\r\n            modules_order = {};\r\n            $(\'#modules\').children().each(function(){                      - пересчитываем порядковый номер каждого элемента\r\n                modules_order[$(this).data(\'id\')] = $(this).index();       - словарь id в БД: порядковый номер в модуле\r\n            });\r\n    $.ajax({                                                               - ajax-запрос\r\n        type: \'POST\',\r\n        url: \'{% url \"module_order\" %}\',\r\n        contentType: \'application/json; charset=utf-8\',\r\n        dataType: \'json\',\r\n        data: JSON.stringify(modules_order)\r\n        });\r\n       }\r\n    });\r\n{% endblock %}\r\n> </pre>','2022-12-06','DJANGO/разные крутые фишки/drag`n`drop перестановка объектов',24,3),(65,'Django','base.html','basehtml','# Неплохой шаблон для создания base.html в своих проектах:\r\n\r\n><pre>\r\n{% load staticfiles %}                                                          - загружаем статику и свои templatetags, если есть\r\n{% load custom_template_tags %}\r\n`<!DOCTYPE html>\r\n<html>\r\n<head>                                                                          - в голове обычно грузят {% block title %}, CSS, шрифты, favico и иногда скрипты\r\n    <meta charset=\"utf-8\" />\r\n    <title>{% block title %}{% endblock %}</title>                         \r\n    <link href=\"{% static \"css/base.css\" %}\" rel=\"stylesheet\">\r\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"\r\n        {% static \'images/favicon.png\' %}\"/>\r\n    <link href=\"https://fonts.cdnfonts.com/css/pricedown\" rel=\"stylesheet\">\r\n    <script src={% static \'js/jQuer.js\' %}></script>                            - (в примере почему-то было без внешних кавычек)\r\n</head>`\r\n`<body>\r\n    <div id=\"header\">                                                           - в base.html сгружают все элементы, которые повторяются на всех html: шапку, side-bar и пр.\r\n        <a href=\"/\" class=\"logo\">Educa</a>\r\n        <ul class=\"menu\">\r\n        {% if request.user.is_authenticated %}\r\n            <li><a href=\"{% url \"logout\" %}\">Sign out</a></li>\r\n        {% else %}\r\n            <li><a href=\"{% url \"login\" %}\">Sign in</a></li>\r\n        {% endif %}\r\n        </ul>\r\n    </div>\r\n    <div id=\"content\">                                                          - основной контент, который будет уникальным для каждой страницы\r\n        {% block content %}\r\n        {% endblock %}\r\n    </div>\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/                  - так грузят скрипты со сторонних ресурсов\r\n        3.3.1/jquery.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            {% block domready %}                                                - блок для работы скриптов (тут проверка, что html загрузился полностью и можно исполнять сценарии)\r\n            {% endblock %}\r\n        });\r\n    </script>\r\n</body>`\r\n`</html>`\r\n></pre>','2022-12-19','DJANGO/templates/base.html',6,3),(66,'Django','Стандартные class-based views','standartnye-class-based-views','# Стандартные встроенные в django views для просмотра, редактирования и удаления объектов.\r\n\r\nДокументация [тут](https://docs.djangoproject.com/en/2.0/topics/class-based-views/intro/)\r\n\r\n### ListView с перезаписанной функцией grt_queryset()\r\n\r\n> <pre>\r\nfrom django.views.generic.list import <b>ListView</b>                        - для отображения <i>списка</i> объектов\r\nfrom .models import Course<br>\r\nclass ManageCourseListView(<b>ListView</b>):\r\n    <b>model</b> = Course                                                    - модель\r\n    <b>template_name</b> = \'courses/manage/course/list.html\'                 - путь до html-ки\r\n    <b>def get_queryset</b>(self):                                           - по дефолту отобразит все объекты модели. Так переписываем метод, чтобы отображал то, что нам нужно\r\n        qs = super().get_queryset()\r\n        return qs.filter(owner=self.request.user)\r\n> </pre>\r\n\r\n### ListView с pagination\r\n\r\n\r\n> <pre>\r\nclass PostListView(ListView):                                         \r\n    queryset = Post.published.all()                                   - если queryset статичный. В противном случае используем функцию, как в примере выше\r\n    <i>model = Post</i>                                                      - альтернатива queryset выше (вызовет встроенную функцию get_queryset())                                          \r\n    context_object_name = \'posts\'                                     - своё название списка, который пойдёт в контекст. По умолчанию object_list\r\n    paginate_by = 3                                                   - встроенный paginator, покажет 3 объекта на странице. Передаёт в контекст переменную <b>page_obj</b>\r\n    template_name = \'blog/post/list.html\'\r\n> </pre>\r\n\r\n### DeleteView\r\n\r\nВ <i>urls.py</i> в пути нужно <u>обязательно указать <b><pk\\></b></u>: `path(\'delete_account/<pk>/\', views.AccountDeleteView.as_view(), name=\'delete_account\')`\r\n\r\n> <pre>\r\nfrom django.views.generic.edit import DeleteView\r\n<br>\r\nclass AccountDeleteView(DeleteView, LoginRequiredMixin):              - принимает только POST, миксин разрешает только зарегистрированным пользователям   \r\n    model = User                                                      - модель по которой будет queryset с переданным pk\r\n    success_url = reverse_lazy(\'accounts:logout\')                     - куда перенаправлять после успешного удаления\r\n    template_name = \'accounts/delete_account.html\'                    - темплэйт с формой на подтверждение удаления <i>(в форме должна быть только кнопка submit и csrf-токен)</i>\r\n> </pre>','2022-12-19','DJANGO/views/стандартные class-based views',25,3),(67,'Django','Mixins','mixins','# <i>\"Примесь\"</i> к class-based view, которая расширяет его функционал.\r\n\r\nОбычно пишутся в views.py. В них лежит доп. функционал, которого нет в исходном классе или который планируется использовать в нескольких классах. Например проверки на владельца.<br>\r\nДокументация [тут](https://docs.djangoproject.com/en/2.0/topics/class-based-views/mixins/).<br>\r\nНиже примеры полезных <i>mixins</i>:\r\n\r\n\r\n> <pre>\r\nfrom django.urls import reverse_lazy\r\nfrom django.views.generic.list import ListView\r\nfrom django.views.generic.edit import CreateView, UpdateView, \\\r\n    DeleteView\r\nfrom django.contrib.auth.mixins import <b>LoginRequiredMixin, \\          \r\n    PermissionRequiredMixin</b><br>                                           - встроенные миксины для проверки на право менять что-то\r\nfrom .models import Course\r\n<br>\r\nclass <b>OwnerMixin</b>(object):                                             - отфильтрует в выборке только объекты текущего пользователя\r\n    def get_queryset(self):\r\n        qs = super().get_queryset()\r\n        return qs.<b>filter(owner=self.request.user)</b>\r\n<br>\r\nclass <b>OwnerCourseMixin(OwnerMixin, LoginRequiredMixin)</b>:               - миксин на миксине. Отфильтрует и владельца (родитель) и модель и проверит пользователя\r\n    model = Course\r\n    fields = [\'subject\', \'title\', \'slug\', \'overview\']\r\n    success_url = reverse_lazy(\'manage_course_list\')\r\n<br>\r\nclass <b>OwnerEditMixin</b>(object):                                         - при редактировании объекта добавит информацию о юзере, который его редактирует\r\n    def <b>form_valid</b>(self, form):\r\n        form.instance.owner = self.request.user\r\n        return super().form_valid(form)\r\n<br>\r\nclass OwnerCourseEditMixin(<b>OwnerCourseMixin, OwnerEditMixin</b>):         - собираем 2 миксина в один и дополняем полями, нужными для create и edit-views\r\n    fields = [\'subject\', \'title\', \'slug\', \'overview\']\r\n    success_url = reverse_lazy(\'manage_course_list\')\r\n    template_name = \'courses/manage/course/form.html\'\r\n<br>\r\nclass ManageCourseListView(<b>OwnerCourseMixin, ListView</b>)                - примешиваем миксин к встроенному классу               \r\n    <b>template_name</b> = \'courses/manage/course/list.html\'                 - всё остальное уже указано в <i>OwnerCourseMixin</i>               \r\n<br>\r\nclass CourseCreateView(<b>PermissionRequiredMixin, OwnerCourseEditMixin, \r\n    CreateView</b>):                                                      \r\n    <b>permission_required = \'courses.add_course\'</b>                        - проверка на право создания\r\n<br>\r\nclass CourseUpdateView(<b>PermissionRequiredMixin, OwnerCourseEditMixin,\r\n    UpdateView</b>):\r\n     <b>permission_required = \'courses.change_course\'</b>                    - проверка на право редактирования\r\n<br>\r\nclass CourseDeleteView(<b>PermissionRequiredMixin, OwnerCourseMixin,\r\n    DeleteView</b>):                 \r\n    template_name = \'courses/manage/course/delete.html\'               - дополняем необходимую для <i>DeleteView</i> информацию\r\n    success_url = reverse_lazy(\'manage_course_list\')\r\n    <b>permission_required = \'courses.delete_course\'</b>                     - проверка на право удаления\r\n> </pre>','2022-12-19','DJANGO/views/mixins',25,3),(68,'Django','Formsets | Формсеты','formsets-formsety','## Для работы сразу с несколькими одинаковыми формами\r\n\r\nПомогает отобразить сразу несколько одинаковых форм на одной странице. По сути надстройка над формой, которая делает много однотипных форм за раз. Очень удобно!<br>\r\nДокументация про <i>[formsets](https://docs.djangoproject.com/en/2.0/topics/forms/formsets/)</i> и <i>[model formsets](https://docs.djangoproject.com/en/2.0/topics/forms/modelforms/#model-formsets.)</i>.<br>\r\n\r\n### Создаются там же, где и все формы - файл <i>forms.py</i> (но можно и в views для динамического изменения параметров, например extra):\r\n\r\n\r\n> <pre>\r\nfrom django import forms\r\nfrom django.forms.models import <b>inlineformset_factory</b>\r\nfrom .models import Course, Module\r\n<br>\r\nModuleFormSet = inlineformset_factory(Course,\r\n    <b>Module</b>,                                                 - !формы для модулей!, которые относятся к конкретному <i>Course</i>\r\n    fields=[\'title\', \'description\'],                        - всё очень похоже на обычную ModelForm                                                            \r\n    widgets={...},\r\n    <b>extra=2</b>,                                                - количество пустых дополнительных форм\r\n    <b>can_delete</b>=True)                                        - добавит чекбокс для удаления сразу нескольких объектов при редактировании                                        \r\n> </pre>\r\n\r\n### View для такого formset`а:\r\n\r\n\r\n> <pre>\r\nfrom django.shortcuts import redirect, get_object_or_404\r\nfrom django.views.generic.base import TemplateResponseMixin, View\r\nfrom .forms import ModuleFormSet\r\n<br>\r\nclass CourseModuleUpdateView(<b>TemplateResponseMixin</b>, View):  - отвечает за рендеринг темплэйта и возврат http-response  \r\n    <b>template_name</b> = \'courses/manage/module/formset.html\'    - обязателен для <i>TemplateResponseMixin</i>\r\n    <b>course</b> = None                                           - мы его получим позже<br>\r\n    <b>def get_formset</b>(self, data=None):                       - функция от <i>View</i>, даёт нужный formset\r\n        return ModuleFormSet(instance=<b>self.course</b>,          - нужно указывать курс, к которому будут относится наши редактируемые модули\r\n            data=data)\r\n        \\#return ModuleFormSet(                             - <b>queryset</b> задаст нужную выборку/пустой formset\r\n            <b>queryset=Category.objects.none()</b>)<br>\r\n    <b>def dispatch</b>(self, request, pk):                        - это рутер от <i>View</i>. Возьмёт request и в зависимости от метода(POST/GET) делегирует его соотв. функции.\r\n        <b>self.course = get_object_or_404(Course,</b>               Мы его перезаписали, чтобы получить в нём нужный <i>course</i>\r\n            id=pk, owner=request.user)\r\n            return super().dispatch(request, pk)<br>\r\n    <b>def get</b>(self, request, \\*args, \\*\\*kwargs):                - для get получаем пустой formset с уже известным курсом и отдаём его на рендеринг\r\n        formset = self.get_formset()\r\n        return self.render_to_response({\'course\': self.course,\r\n            \'formset\': formset})<br>\r\n    <b>def post</b>(self, request, \\*args, \\*\\*kwargs):\r\n        formset = self.get_formset(data=request.POST)       - берём formset и заполняем данными из post\r\n        if <b>formset.is_valid()</b>:                              - проверяет <u>ВСЕ</u> формы\r\n            <b>cd = formset.cleaned_data</b>                       - <u>список</u> из словарей каждой формы\r\n            for item in formset.cleaned_data:               - цикл для перебора форм\r\n                item[\'form_field\']...\r\n            <b>formset.save()</b>                                  - метод для сохранения всех форм разом\r\n            return redirect(\'manage_course_list\')\r\n        return self.<b>render_to_response</b>({\'course\': self.course,    - функция от <i>TemplateResponseMixin</i> для передачи контекста и рендеринга\r\n            \'formset\': formset})\r\n> </pre>\r\n\r\n### URL и темплейт:\r\n\r\n\r\n> <pre>\r\npath(\'<b><pk\\></b>/module/\',                                       - pk для нахождения курса, к которому пришиты модули\r\n    views.CourseModuleUpdateView.as_view(),\r\n    name=\'course_module_update\'),\r\n> </pre>\r\n\r\n\r\n> <pre>\r\n{% extends \"base.html\" %}\r\n{% block title %}\r\n    Edit \"{{ course.title }}\"\r\n{% endblock %}\r\n{% block content %}\r\n    `<h1>Edit \"{{ course.title }}\"</h1>\r\n    <div class=\"module\">\r\n        <h2>Course modules</h2>\r\n        <form action=\"\" method=\"post\">\r\n            {{ formset }}                                   - в форму вкладываем <i>formset</i> (можно пробежать циклом по формам {% for form in formset %})\r\n            {{ formset.management_form }}                     и специальную скрытую форму (контролирует пар-ры формсета)\r\n            {% csrf_token %}\r\n            <input type=\"submit\" class=\"button\" \r\n                value=\"Save modules\">\r\n        </form>\r\n    </div>`\r\n{% endblock %}\r\n> </pre>\r\n\r\n<hr>\r\n\r\n### Для более гибких настроек можно сделать базовый Formset и переписать его методы:\r\n\r\n\r\n> <pre>\r\nfrom django.forms import <b>BaseModelFormSet</b>                   - от него наследуют все формсеты\r\nfrom django.forms import modelformset_factory\r\n<br>\r\nclass BaseDeleteCategoryFormset(BaseModelFormSet):\r\n    <b>def add_fields</b>(self, form, index):                      - добавляем доп. поля в форму\r\n        super().add_fields(form, index)\r\n        <b>form.fields[\'check\']</b> = forms.BooleanField(\r\n            label=\'\', required=False)\r\n<br>\r\nDeleteCategoryFormset = modelformset_factory(Category,\r\n    <b>formset=BaseDeleteCategoryFormset</b>, extra=0,             - указываем базовый формсет\r\n    fields=(\'title\', \'category_group\', \'id\'),\r\n    widgets={\'title\': forms.HiddenInput,\r\n    \'category_group\': forms.HiddenInput})\r\n> </pre>','2022-12-19','DJANGO/формы/formsets | формсеты',16,3),(69,'Django','Универсальный менеджер контента','universalnyi-menedzher-kontenta','В CMS зачастую к одному объекту могут быть привязаны объекты разных типов. Например учебный модуль может содержать разный контент: изображения, текст, документы и пр.<br>\r\nВесь этот контент нужно как-то редактировать. Оптимальным решением будет создание универсального view для создания и редактирования объектов всех типов:\r\n\r\n## Views.py:\r\n\r\n\r\n> <pre>\r\nfrom django.forms.models import <b>modelform_factory</b>                               - в зависимости от класса объекта выдаст нужную форму\r\nfrom django.apps import <b>apps</b>                                                    - для получения нужного класса модели\r\nfrom .models import Module, Content\r\n<br>\r\nclass ContentCreateUpdateView(TemplateResponseMixin, View):                     - для создания и редактирования. <u>Не забудь импортировать эти миксины</u>\r\n    module = None                                                               \r\n    model = None                                                                - эти данные возьмём в диспатчере\r\n    obj = None\r\n    template_name = \'courses/manage/content/form.html\'<br>\r\n    <b>def get_model</b>(self, model_name):                                            - передаём имя модели и если такое есть, получаем класс модели\r\n        if model_name in [\'text\', \'video\', \'image\', \'file\']:\r\n            return <b>apps.get_model</b>(app_label=\'courses\',\r\n                model_name=model_name)\r\n        return None                                                             - если такого нет<br>\r\n    <b>def get_form</b>(self, model, \\*args, \\*\\*kwargs):                              - отдаст нужную форму с нужными полями в зависимости от полученного класса модели\r\n        Form = modelform_factory(model, exclude=[\'owner\',\r\n            \'order\', \'created\', \'updated\'])\r\n        return Form(*args, **kwargs)<br>\r\n    <b>def dispatch</b>(self, request, module_id, model_name, id=None):                - получаем из request module, model и obj и передаём запрос дальше в post/get\r\n        self.module = get_object_or_404(Module,\r\n            id=module_id,\r\n            course__owner=request.user)\r\n        self.model = self.get_model(model_name)\r\n        <b>if id</b>:                                                                  - если есть id, то это объект, который редактируют, а не новый\r\n            self.obj = get_object_or_404(self.model,\r\n                id=id, owner=request.user)\r\n        return super().dispatch(request, module_id, model_name, id)<br>\r\n    <b>def get</b>(self, request, module_id, model_name, id=None):\r\n        form = self.get_form(self.model, <b>instance=self.obj</b>)                     - запихиваем в форму объект, который редактируем (если он есть)\r\n        return self.render_to_response({\'form\': form,\r\n            \'object\': self.obj})<br>\r\n    <b>def post</b>(self, request, module_id, model_name, id=None):\r\n        form = self.get_form(self.model, instance=self.obj,\r\n            data=request.POST, files=request.FILES)\r\n        if form.is_valid():\r\n            obj = form.save(commit=False)\r\n            obj.owner = request.user\r\n            obj.save()\r\n        <b>if not id</b>:                                                              - новый объект, для него ещё нужно создать Content object\r\n            Content.objects.create(module=self.module, item=obj)\r\n            return redirect(\'module_content_list\', self.module.id)\r\n        return self.render_to_response({\'form\': form,\r\n            \'object\': self.obj})\r\n<br>\r\nclass ContentDeleteView(View):                                                  - отдельный view для удаления контента\r\n    def post(self, request, id):\r\n        content = get_object_or_404(Content,\r\n            id=id, module__course__owner=request.user)\r\n        module = content.module\r\n        content.item.delete()\r\n        content.delete()\r\n        return redirect(\'module_content_list\', module.id)\r\n> </pre>\r\n\r\n## Urls.py:\r\n\r\n\r\n> <pre>\r\npath(\'module/<int:module_id\\>/content/<model_name\\>/<b>create</b>/\',\r\n    views.ContentCreateUpdateView.as_view(),                                    - две записи на один и тот же View\r\n    name=\'module_content_create\'),                                              - для создания нового\r\npath(\'module/<int:module_id\\>/content/<model_name\\>/<b><id\\></b>/\',\r\n    views.ContentCreateUpdateView.as_view(),\r\n    name=\'module_content_update\'),                                              - для редактирования существующего\r\npath(\'content/<int:id\\>/delete/\', views.ContentDeleteView.as_view(),\r\n    name=\'module_content_delete\'),                                              - для удаления\r\n> </pre>','2022-12-19','DJANGO/views/универсальный менеджер контента',25,3),(70,'Django','Создание и настройка формы','sozdanie-i-nastroika-formy','Формы обычно создают в папке конкретного приложения в файле <i>forms.py</i>.<br>\r\nМогут создаваться как на базе уже существующей модели из <i>models.py</i>/других источников (<b>forms.ModelForm</b>), так и с нуля (<b>forms.Form</b>).\r\n\r\n### Пример ModelForm:\r\n\r\n\r\n> <pre>\r\nfrom django import forms                                              - обязательный импорт для работы с формами               \r\nfrom django.contrib.auth.models import User                           - модель, на основе которой будет сделана форма\r\n<br>\r\nclass UserEditForm(forms.ModelForm):\r\n    phone = forms.CharField(label=\'Телефон\')                          - можно добавить поле, которого изначально нет в модели<br>               \r\n    class Meta:                                                       - для ModelForm почти все настройки будут в сабклассе <b>Meta</b>\r\n        model = User                                                  - указываем модель, на базе которой строится форма\r\n        fields = (\'username\', \'first_name\', \'last_name\', \'email\')     - можно указать только нужные поля,\r\n        <b>exclude</b> = (\'field1\', \'field2\')                                  а можно исключить ненужные (альтернатива)<br>\r\n        labels = {                                                    - а вот так <i>можно управлять вспомогательной информацией и отображением формы</i>\r\n            \'first_name\': \'Имя:\',\r\n            \'last_name\': \'Фамилия:\',\r\n            \'email\': \'E-mail:\'\r\n            }\r\n        help_texts = {\r\n            \'username\': \'\'\r\n            }\r\n        widgets = {\r\n            \'name\': Textarea(attrs={\'cols\': 80, \'rows\': 20}),\r\n        }\r\n        error_messages = {\r\n            \'name\': {\r\n                \'max_length\': _(\"This writer\'s name is too long.\"),\r\n            },\r\n        }\r\n> </pre>','2022-12-20','DJANGO/формы/создание и настройка формы',16,3),(71,'FrontEnd','Javascript basics','javascript-basics','# Основы синтаксиса, типов данных языка и того, что на нём можно делать\r\n\r\n### Способы использования:\r\n\r\n+ Встраиваем прямо в HTML-код (для маленьких скриптов):\r\n\r\n>> <pre>\r\n<script\\>\r\n    ... код JavaScript\r\n</script\\>\r\n>> </pre>\r\n\r\n+ Подгружаем из отдельного файла: `<script src=\"my_script.js\"></ script>`\r\n\r\n### Немного о синтаксисе\r\n\r\n- Язык чувствителен к регистру\r\n- Пробелы и отступы игнорируются\r\n- Каждая инструкция заканчивается точкой с запятой (<b>;</b>) function()<b>;</b> <i>(похоже уже необязательно)</i>\r\n- <b>//</b> Однострочный комментарий. Закончится автоматически при переходе на новую строку\r\n- <b>/\\*</b> Многострочный комментраний.<br>\r\n    Его нужно закрывать так: <b>\\*/</b>\r\n\r\n### Переменная\r\n\r\n`var foo = 5;` - <b>var</b> делает переменную локальной (будет видна только внутри функции). Без <b>var</b> - глобальная, будет видна во всём сценарии.\r\n\r\nИмя переменной должно:\r\n\r\n> 1. начинаться с буквы или нижнего подчёркивания (_)\r\n> 2. состоять из лат. букв, цифр и _\r\n> 3. не должно содержать пробелов\r\n> 4. не должно быть спец-символов\r\n\r\n### Типы данных\r\n\r\n> <table>\r\n    <tr><td><b>undefined</b></td>                                  <td>-	var foo; //объявили переменную, но не задали значение</td></tr>\r\n    <tr><td><b>null</b></td>                                       <td>- var foo = null; //то же что и undefined</td></tr>\r\n    <tr><td><b>число</b></td>                                      <td>- можно работать с мат. символами + - / * ...</td></tr>\r\n    <tr><td><b>строка</b></td>                                     <td>- var foo = \"word\"; //можно использовать одинарные или двойные кавычки</td></tr>\r\n    <tr><td><b>логическое</b></td>                                 <td>- <b>true/false</b> <u>(без кавычек)</u></td></tr>    \r\n> </table>\r\n\r\n### Массивы\r\n\r\n> `var foo = [null, 5, \"5\", false];` (можно вкладывать разные типы данных)\r\n\r\nДоступ к эл-там массива начинается с нуля: foo[0] - это null<br>\r\n<b>`foo.lenght`</b> - вычислит длину массива\r\n\r\n### Инкременты\r\n\r\n\r\n<table>\r\n    <tr><td>+=</td>                                         <td>- прибавить значение к самому себе</td></tr>\r\n    <tr><td>++</td>                                         <td>- +1</td></tr>\r\n    <tr><td>++X</td>                                        <td>- СНАЧАЛА X увеличится на 1, потом будут сделаны вычисления всей оставшейся формулы</td></tr>\r\n    <tr><td>X++</td>                                        <td>- СНАЧАЛА вычислится формула со старым значением X, потом значение X увеличится на 1</td></tr>\r\n    <tr><td>--</td>                                         <td>- -1</td></tr>    \r\n</table>\r\n\r\n\r\n\r\n### Операторы сравнения\r\n\r\n\r\n> <table>\r\n    <tr><td><b>=</b></td>                                   <td> - присвоить значение. <u>!Это не оператор!!!</u></td></tr>\r\n    <tr><td><b>==</b></td>                                  <td> - в javascript такое сравнение числа и строки (\"5\" == 5); выдаст true</td></tr>\r\n    <tr><td><b>===</b></td>                                 <td> - идентичность (равно и относится к тому же типу данных) (\"5\" == 5); выдаст false</td></tr>\r\n    <tr><td><b>!=</b></td>                                  <td> - классическое неравенство</td></tr>\r\n    <tr><td><b>!==</b></td>                                 <td> - Неидентичность</td></tr>\r\n    <tr><td><b>> < \\>= <=</b></td>                          <td> - обычные больше/меньше и пр.</td></tr>    \r\n> </table>\r\n\r\n### Условные операторы\r\n\r\n<table>\r\n    <tr><td>&&</td>                                         <td> - логическое И</td></tr>\r\n    <tr><td>||</td>                                         <td>- логическое ИЛИ</td></tr>\r\n    <tr><td>!</td>                                          <td>- логическое НЕ</td></tr>\r\n</table>\r\n\r\n> <pre>\r\nif (true) {\r\n    ... код\r\n    }		\r\nif (условие) {\r\n    ... код\r\n    } <b>else</b> {\r\n    ... код\r\n    }\r\n> </pre>\r\n\r\n### Циклы\r\n\r\n    for(задаём переменную; проверяем условие; изменяем значение переменной;) { \r\n		... выполняем действия\r\n		}\r\n    Пример: for (var i = 0; i<=5; i++) {\r\n			alert(i);\r\n			} // выведет построчно 0,1,2,3,4,5\r\n\r\n> <pre>\r\nfor...in- для обхода свойств объекта (словари?)<br>\r\nvar user = {\r\n    name: \'Alice\',\r\n    age: 25,\r\n    country: \'Russia\'\r\n    };<br>		\r\nfor (var property in user) {\r\n    alert(property+\' : \'+user[property]);\r\n}<br>		\r\nwhile                                                       - Условие проверяется в начале цикла. Цикл может не выполниться ни разу<br>		\r\nvar i=1;\r\nwhile (var i<10) {\r\n    alert(i);\r\n    i++;\r\n    }<br>				\r\ndo...while                                                  - Условие проверяется в конце цикла. Цикл отработает минимум 1 раз<br>	\r\nvar i=0;\r\ndo {\r\n    i++;\r\n    alert(i);\r\n    } while (i<5);\r\n> </pre>','2022-12-29','FRONTEND/javascript/javascript basics',26,3),(72,'Python','datetime','datetime','> <i>Работает с датой как с классом. Есть несколько классов с учётом даты и времени, только даты, только времени. Умеет суммировать и отнимать даты, количество дней/времени и пр. от даты и получать новый объект даты.</i>\r\n\r\n## Классы (они разные):\r\n\r\n+ <b>datetime.date</b>(year, month, day) - <u>только</u> дата.\r\n+ <b>datetime.time</b>(hour=0, minute=0, second=0, microsecond=0, tzinfo=None) - стандартное время без даты\r\n+ <b>datetime.datetime</b>(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None) - комбинация даты и времени.\r\n+ <b>datetime.tzinfo</b> - абстрактный базовый класс для информации о временной зоне (например, для учета часового пояса и / или летнего времени).\r\n+ <b>datetime.timedelta</b>(days=...) - разница между двумя моментами времени, с точностью до микросекунд. Получается, когда от даты отнимают дату. Можно её добавлять/отнимать от другого класса времени, чтобы получить новый объект класса даты/времени.\r\n\r\n## Полезные методы:\r\n\r\n<table>\r\n    <tr><td>datetime.<b>today()</b></td>                    <td>- объект datetime из текущей даты и времени</td></tr>\r\n    <tr><td>datetime.<b>now</b>(tz=None)</td>               <td>- то же самое, что и выше</td></tr>\r\n    <tr><td>datetime.<b>combine</b>(date, time)</td>        <td>- объединить объекты даты и времени в объект datetime</td></tr>\r\n    <tr><td>datetime.<b>strptime</b>(date_string, format)</td><td>- преобразует строку в datetime</td></tr>\r\n    <tr><td>datetime.<b>replace</b>(year, month...)</td>    <td>- заменить один объект даты другим</td></tr>\r\n    <tr><td>datetime.<b>today().today()</b></td>            <td>- получить текущее время</td></tr>\r\n    <tr><td>datetime.<b>utcnow()</b></td>                   <td>- получить текущее время в utc</td></tr>\r\n    <tr><td>datetime.<b>utcfromtimestamp</b>(time)</td>     <td>- преобразовать время (например, полученное как time.time()) в формат datetime\r\n    \r\n        \r\n</table>\r\n\r\n### Заметки:\r\n\r\nОбъекты можно складывать и отнимать, а также прибавлять <i>timedelta</i><br>\r\nИз объектов можно получать конкретные значения времени, дня, года и пр.: `x = y.year`<br>\r\nНемного больше информации можно найти [тут](https://pythonworld.ru/moduli/modul-datetime.html)','2023-01-06','PYTHON/полезные модули/datetime',27,3),(73,'Django','test_urls.py','test_urlspy','## Тестируем urls.py\r\n\r\nСмысл в том, чтобы убедиться, что каждый url приводит к нужному view:\r\n\r\n\r\n\r\n> <pre>\r\nfrom django.test import SimpleTestCase\r\nfrom django.urls import resolve, reverse                                        - функции для получения view из url name и наоборот                \r\nfrom app.views import view_as_func, ViewAsClass\r\n<br>\r\nclass TestUrls(SimpleTestCase):\r\n<br>\r\n    <b>def test_view_as_func_resolved(self)</b>:                                       - не забываем про говорящие красивые названия\r\n        url = reverse(\'view_as_func_name\')\r\n        <b>self.assertEquals</b>(resolve(url).<b>func</b>, view_as_func)                      - просто сравниваем саму функцию с тем, что получилось из резолва url<br>                    \r\n    <b>def ViewAsClass_resolved(self)</b>:\r\n        url = reverse(\'ViewAsClass_name\', <b>args=[\'some-slug\']</b>)                   - если url идёт с параметрами\r\n        self.assertEquals(resolve(url).<b>func.view_class</b>, ViewAsClass)            - для class-based views нужно к резолву добавить ещё и </i>.view_class<i>\r\n> </pre>','2023-01-13','DJANGO/тесты/test_urls.py',19,3),(74,'Django','test_views.py','test_viewspy','# Тестируем наши views:\r\n\r\n\r\n\r\n> <pre>\r\nfrom django.test import TestCase, <b>Client</b>                                        - клиент будет генерить запросы на сервер, но это не единственный способ\r\nfrom django.urls import reverse\r\nfrom budget.models import Project, Category, Expense\r\nimport json\r\n<br>\r\nclass TestViews(TestCase):\r\n<br>\r\n    <b>def setUP(self):</b>                                                            - удобно перед тестами делать общий метод, который делает настройки для всех тестов\r\n        self.client = Client()\r\n        self.project1 = Project.object.create(...)<br>\r\n    <b>def test_project_list_GET(self)</b>:                                            - это list-метод, будет отдавать список чего-то. Нужен только <i>get</i>\r\n        response = self.client.get(reverse(\'list\'))\r\n        self.assertEquals(response.status_code, 200)                            - смотрим, чтобы ответный код был 200\r\n        self.<b>assertTemplateUsed</b>(response, \'budget/project-list.html\')           - проверяет, что был использован нужный html-темплэйт<br>\r\n     <b>def test_project_detail_POST_adds_new_expense(self)</b>:                       - проверит добавление объекта в БД методом POST\r\n        Category.objects.create(project=self.project1, name=\'developement\')\r\n        response = self.client.POST(reverse(\'detail_url\'), {\r\n            \'category\': \'developement\',\r\n            \'title\': \'expense1\'})\r\n        self.assertEquals(response.status_code, <b>302</b>)                            - многие views при успешной отработке делают redirect\r\n        self.assertEquals(self.project1.expenses.first().title, \'expense1\')     - лезем в БД и проверяем, что объект создался<br>\r\n     <b>def test_project_detail_POST_no_data(self)</b>:                                - дополнительные проверки для POST, когда он пришёл без данных и ничего не должно быть добавлено в БД\r\n        response = self.client.POST(reverse(\'detail_url\'))                      - без словаря с данными\r\n        self.assertEquals(response.status_code, <b>302</b>)\r\n        self.assertEquals(self.project1.expenses.<b>count()</b>, 0)                    - смотрим, что количество не поменялось<br>\r\n     <b>def test_project_detail_DELETE_deletes_expense(self)</b>:                      - тестим удаление\r\n        category = Category.objects.create(...)\r\n        expense = Expense.objects.create(...)                                   - заготовочка, которую будем удалять\r\n        response = self.Client.delete(\'url\', json.dumps({\'id\': 1}))\r\n        self.assertEquals(response.status_code, 204)\r\n        self.assertEquals(self.project1.expenses.<b>count()</b>, 0)                    - удалили заготовленную информацию, стало 0  \r\n> </pre>','2023-01-13','DJANGO/тесты/test_views.py',19,3),(75,'Django','test_models.py and test_forms.py','test_modelspy-and-test_formspy','# Тестим модели в БД:\r\n\r\n\r\n\r\n> <pre>\r\nfrom django.test import TestCase\r\nfrom budget.models import Project, Category, Expense\r\n<br>\r\nclass TestModels(TestCase):<br>\r\n    def setUP(self):\r\n        self.project1 = Project.objects.create(\r\n            name=\'Project 1\',\r\n            budget=10000\r\n            )<br>\r\n    def test_project_is_assigned_slug_on_creation(self):                        - в модели есть автоматический slugify. Проверяем, что slug создался при создании объекта\r\n        self.assertEquals(self.project1.slug, \'project-1\')<br>\r\n    def test_budget_left(self):                                                 - тест функции внутри модели, которая высчитывает остаток\r\n        category = Category.objects.create(...)\r\n        expense = Expense.objects.create(amount=3000, ...)\r\n        self.assertEquals(self.project1.budget_left, 7000)                      - мы добавили расходов на 3k, ожидаем, что в бюджете останется 10k - 3k = 7k\r\n> </pre>\r\n\r\n<hr>\r\n\r\n# Тестим формы:\r\n\r\n> <pre>\r\nfrom django.test import SimpleTestCase\r\nfrom budget.forms import ExpenseForm\r\n<br>\r\nclass TestForms(SimpleTestCase):\r\n<br>\r\n    def test_expense_form_with_valid_data(self):                                - проверка на валидность валидной формы\r\n        form = ExpenseForm(data={\'valid\': \'data\'})\r\n        self.assertTrue(form.is_valid())<br>\r\n    def test_expense_form_no_data(self):                                        - проверка на валидность формы с незаполненными полями\r\n        form = ExpenseForm(data={})\r\n        self.assertFalse(form.is_valid())\r\n        self.assertEquals(len(form.errors), 3)                                  - нужно заполнить 3 поля => при валидации будет 3 ошибки\r\n> </pre>','2023-01-13','DJANGO/тесты/test_models.py and test_forms.py',19,3),(76,'Python','Telegram-bot на telebot','telegram-bot-na-telebot','### Устанавливаем нужный фреймворк:\r\n\r\n    pip install pyTelegramBotAPI\r\n\r\n### Получаем токен для бота\r\n\r\n- находим в телеграме бота BotFather\r\n- в диалоге с ботом даём команду <b>/newbot</b> и вводим запрашиваемые данные (имя бота и пр.)\r\n- после заполнения нужной инфы бот выдаст сообщение с токеном\r\n- также можно указать дополнительные настройки для бота через команды /setname, /setdescription, /setuserpic и пр.\r\n\r\nДокументацию по боту можно найти [тут](https://core.telegram.org/bots/features)\r\n\r\n### Собственно пример бота с комментариями:\r\n\r\n> <pre>\r\nimport telebot                                                                  - да, импортим так, а не как устанавливали\r\nfrom telebot import types\r\n<br>\r\nimport bot_settings                                                             - вынес настройки и api в отдельные файлы\r\nimport bot_api_calls<br>\r\nbot = telebot.TeleBot(bot_settings.TELEGRAM_TOKEN)                              - передаём боту токен<br>\r\nclass Expense:                                                                  - класс нужен, если мы хотим создать цепочку действий и нужно что-то запоминать из ответов юзера\r\n    def \\_\\_init\\_\\_(self, price, comment=None, category=None):\r\n        self.price = price\r\n        self.comment = comment<br>\r\nexpenses = {}                                                                   - тут будем складывать инстансы нашего класса<br>\r\ndef <b>make_buttons</b>(\\*args, if_inline=False):                                       - в этой функции можно посмотреть как создавать кнопки для бота\r\n    if not if_inline:\r\n        markup = types.<b>ReplyKeyboardMarkup</b>(                                     - для кнопок <u>вне диалога</u>. При нажатии возвращают в диалог текст на кнопке\r\n            resize_keyboard=True, row_width=3)                                  - параметры для красивого отображения и кол-ва кнопок в ряду\r\n        markup.add(\'Имя кнопки\', \'Ещё кнопка\', \\*args)                           - так добавляются кнопки <u>вне диалога</u> (<i>каждая кнопка - строка с названием на ней</i>)\r\n    else:\r\n        markup = types.<b>InlineKeyboardMarkup</b>()                                   - кнопки <u>в диалоге</u>. При нажатии делают что-то (передают данные, редиректят на сайт и пр.)\r\n        categories_list = args[0]\r\n        button_list = [types.<b>InlineKeyboardButton</b>(                              - первый параметр кнопки - надпись на ней, второй бывает разным. В данном случае данные, которые\r\n            <b>item[\'title\'], callback_data=item[\'id\']</b>)                            попадут в другую функцию\r\n                for item in categories_list]\r\n        markup.add(\\*button_list)\r\n    return markup                                                               - возвращаем объект, заполненный кнопками\r\n<br>\r\n<b>@bot.message_handler</b>(<i>commands=[\'start\']</i>)                                        - декоратор для обработки ответов. Какой тип обрабатывать в скобках. В данном случае <i>комманды</i>\r\ndef to_start(message, hint=\'Возвращаюсь в начальное меню\'):                      (начинаются со слэша)\r\n    markup = make_buttons(\'Внести расходы\', \'Добавить категорию\')\r\n    bot.<b>send_message</b>(message.chat.id, hint, reply_markup=markup)                - текстовый ответ пользователю в диалоге. Нужен chat_id и текст (не пустой) + опциональные параметры\r\n                                                                                 (в данном случае высылаем ещё и кнопки)<br>\r\n@bot.message_handler(commands=[\'register\'])                                     - в функции показано <u>как можно запросить контактные данные абонента</u>\r\ndef request_phone_number(message):\r\n    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)\r\n    button_phone = types.<b>KeyboardButton</b>(text=\"Отправить номер телефона\",\r\n                                        <b>request_contact=True</b>)                   - просто специальный тип кнопки\r\n    keyboard.add(button_phone)\r\n    bot.send_message(message.chat.id, \'Укажи телефон\', reply_markup=keyboard)\r\n<br>\r\n@bot.message_handler(<b>content_types=[\'contact\']</b>)                                 - так обрабатывается полученный контакт от пользователя\r\ndef site_registration(message):\r\n    phone_number = <b>message.contact</b>.phone_number                                 - там есть много чего: телефон, имя-фамилия и пр.\r\n    chat_id = message.chat.id\r\n    ...\r\n<br>\r\n@bot.message_handler(<b>content_types=[\'text\']</b>)                                    - так обрабатываются простые текстовые ответы пользователя\r\ndef process_expense_record(message):                                            - в этой функции показано, <u>как организовывать цепочку последовательных действий</u>\r\n    if message.text == \'123\':\r\n        ...\r\n        exp_item = Expense(price=price)                                             - сохраняем данные из ответа пользователя в объявленном ранее классе\r\n        if len(expense_details) > 1:\r\n            exp_item.comment = expense_details[1]\r\n            expenses[message.chat.id] = exp_item                                - запихиваем их в ранее созданный словарь\r\n        bot.send_message(message.chat.id, <b>\'Спрашиваем ещё что-то у юзера\')</b>      - ответ будет обработан не в общем порядке, а функцией, указанной ниже\r\n        bot.<b>register_next_step_handler</b>(message,                                 - указываем, что ответ будет обработан спец. функцией\r\n            <i>callback_send_expense_to_server</i>)                                    - специальная функция для обработки ответа из этой функции\r\n    bot.<b>clear_step_handler_by_chat_id</b>(chat_id=chat)                             - если нужно <u>прервать цепочку действий</u>\r\n<br>\r\n<b>@bot.callback_query_handler(func=lambda call: True)</b>                             - так обрабатываются callback`и (нетекстовый ответ абонента, например нажал спец. кнопку)\r\ndef callback_send_expense_to_server(call):\r\n    chat = <b>call.message.chat.id</b>                                                 - так получаем chat_id\r\n    if expenses.get(chat):\r\n        category = <b>call.data</b>                                                    - так достаём данные, если они передавались в callback (см. про кнопки с данными выше)\r\n        if category != \'Обратно в меню\':\r\n            bot.<b>answer_callback_query</b>(<i>callback_query_id=call.id</i>,                - передаст юзеру всплывающую подсказку, что данные обрабатываются. <i>!Передаём не chat_id\r\n                text=\'Отправка записи на сервер\')                                а call_id!</i>\r\n            bot.send_message(chat, result)\r\n            ...\r\n<br>\r\n@bot.message_handler(\r\n    <b>content_types=[\'sticker\', \'pinned_message\', \'photo\', \'audio\']</b>)              - ещё типы данных, которые можно обработать\r\ndef get_user_photo(message):\r\n    bot.send_message(message.chat.id, \'Крутое фото!\', <b>parse_mode=\'html\'</b>)        - для вывода предварительно красиво оформленного текста\r\n<br>\r\n<b>bot.polling(none_stop=True)</b>                                                     - запуск бота\r\n\r\n\r\n> </pre>','2023-02-01','PYTHON/боты/telegram-bot на telebot',29,3),(77,'Miscellaneous','Git Flow','git-flow','<b>git-flow</b> — это набор расширений git предоставляющий высокоуровневые операции над репозиторием для поддержки модели ветвления.\r\n\r\nЕсли чего-то нет - почитай [тут](https://www.atlassian.com/ru/git/tutorials/comparing-workflows/gitflow-workflow#:~:text=Git%2Dflow%20%E2%80%94%20%D0%B0%D0%BB%D1%8C%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%B0%D1%8F%20%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C%20%D0%B2%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F,%D0%92%D0%B8%D0%BD%D1%81%D0%B5%D0%BD%D1%82%D0%BE%D0%BC%20%D0%94%D1%80%D0%B8%D1%81%D1%81%D0%B5%D0%BD%D0%BE%D0%BC%20%D0%BD%D0%B0%20%D1%81%D0%B0%D0%B9%D1%82%D0%B5%20nvie.)\r\n\r\n### Настрйока\r\n\r\n1. Устанавливаем доп. утилиту для Linux: `sudo apt-get install git-flow`\r\n2. `git init` внутри нужного репозитория\r\n3. `git flow init` там же - автоматически создаст ветку <i>develop</i> либо же `git branch develop`, если не используем git flow\r\n\r\n### Работа\r\n\r\n1. Убедиться, что есть ветка <i>develop</i>\r\n2. Создаём отдельную ветку для каждой фичи: `git flow feature start feature_branch`<br>\r\nили без gitflow: `git checkout develop` & `git checkout -b feature_branch`\r\n3. Для слияния фичи в ветку <i>develop</i>: `git flow feature finish feature_branch`<br>\r\nили без gitflow: `git checkout develop` & `git merge feature_branch`\r\n3. Для публикации фичи на отдалённом сервере (чтобы могли и коллеги пользоваться): `git flow feature publish MYFEATURE`\r\n3. Для скачивания фичи с оталённого сервера: `git flow feature pull origin MYFEATURE`\r\n3. Для отслеживания фичи: `git flow feature track MYFEATURE`\r\n4. Для создания релиза: `git flow release start 0.1.0`<br>\r\nбез gitflow: `git checkout develop` & `git checkout -b release/0.1.0`\r\n5. Завершаем релиз: `git flow release finish \'0.1.0\'`<br>\r\nили: `git checkout main` & git `merge release/0.1.0` (нужно её также слить с develop)\r\n6. Hotfix - делается на основе <i>main</i>, а не <i>develop</i>: `git flow hotfix start hotfix_branch`<br>\r\nили: `git checkout main` & `git checkout -b hotfix_branch`\r\n7. Слияние hotfix с ветками <i>main</i> и <i>develop</i>: `git flow hotfix finish hotfix_branch`<br>\r\nили: \r\n\r\n>> <pre>\r\ngit checkout main\r\ngit merge hotfix_branch\r\ngit checkout develop\r\ngit merge hotfix_branch\r\ngit branch -D hotfix_branch\r\n>> </pre>\r\n\r\n\r\n\r\n### Ещё пара примеров работы по gitflow с фичами, релизами и hotfix\'ами\r\n\r\n\r\n> <pre>\r\ngit checkout main\r\ngit checkout -b develop\r\ngit checkout -b feature_branch\r\n...work happens on feature branch\r\ngit checkout develop\r\ngit merge feature_branch\r\ngit checkout main\r\ngit merge develop\r\ngit branch -d feature_branch\r\n> </pre>\r\n\r\n\r\n> <pre>\r\ngit checkout main\r\ngit checkout -b hotfix_branch\r\n...work is done commits are added to the hotfix_branch\r\ngit checkout develop\r\ngit merge hotfix_branch\r\ngit checkout main\r\ngit merge hotfix_branch\r\n> </pre>','2023-02-06','MISCELLANEOUS/git flow',8,4),(78,'Databases','Настройка redis для проекта','nastroika-redis-dlia-proekta','## Настраиваем Redis\r\n\r\n1. Скачиваем и устанавливаем redis под свою ОС\r\n2. В вирт. окружении python устанавливаем прокладку для работы с redis: `pip install redis`\r\n3. В <i>settings.py</i> добавляем настройки:\r\n\r\n        REDIS_HOST = \'localhost\'\r\n        REDIS_PORT = 6379\r\n        REDIS_DB = 0\r\n\r\n4. Запустить redis-сервер перед запуском django-проекта. Например для linux: `src/redis-server`\r\n\r\n<hr>\r\n\r\n\r\n\r\n> <pre>\r\nsrc/redis-server <b>--port</b> <i>6379</i>                                - запустить сервер на конкретный порт. 6379 - стандартный, можно не указывать\r\nsrc/<b>redis-cli</b>                                               - запустит shell для redis                                    \r\n> </pre>\r\n\r\nПолезные ссылки: [команды](https://redis.io/commands), [типы данных](https://redis.io/topics/data-types)','2023-02-18','DATABASES/redis/настройка redis для проекта',30,3),(79,'Databases','Работа с redis в терминале (команды)','rabota-s-redis-v-terminale-komandy','## Сперва нужно провести подготовку:\r\n\r\n- запустить сервер: `src/redis-server`\r\n- импортировать в терминал \"прокладку\" для python: `import redis`\r\n- импортировать из проекта настройки для redis: `from django.conf import settings`\r\n- инициировать объект с которым будем работать (подключение к БД):\r\n\r\n\r\n>> <pre>\r\nr = redis.StrictRedis(host=settings.REDIS_HOST, port=settings.REDIS_PORT, db=settings.REDIS_DB)\r\n>> </pre>\r\n\r\n## Список популярных комманд:\r\n\r\n\r\n\r\n<table>\r\n    <tr><td>r.<b>set</b>(\'foo\', \'bar\')</td>                 <td>- добавит словарь с ключём \'foo\'</td></tr>\r\n    <tr><td>r.<b>get</b>(\'foo\')</td>                        <td>- возьмёт значение по ключу</td></tr>\r\n    <tr><td>r.<b>delete</b>(\'foo\')</td>                     <td>- удалит ключ/значение</td></tr>\r\n    <tr><td><b>rpush()/lpush()</b></td>                     <td>- вставить новую запись в словарь в начало или конец</td></tr>\r\n    <tr><td><b>lpop()/rpop()</b></td>                       <td>- вырезать запись из словаря</td></tr>\r\n    <tr><td><b>ltrim()</b></td>                             <td>- обрезать словарь (контроль длины)</td></tr>\r\n    <tr><td><b>expire()/expireat()</b></td>                 <td>- задать время, когда запись удалится из базы</td></tr>\r\n    <tr><td><b>exist</b></td>                               <td>- проверить, есть ли запись в БД</td></tr>\r\n    <tr><td><br></td><td></td></tr>\r\n    <tr><td>r.<b>incr</b>(\'image:{}:views\'.format(image.id))</td><td>- добавит увеличит словарь-счётчик \'image:3:views\':0</td></tr>\r\n    <tr><td>r.<b>zincrby</b>(\'image_ranking\', 1, image.id)</td><td>- словарь, в котором пишутся объекты и их счётчик</td></tr>\r\n    <tr><td>r.<b>zrange</b>(\'image_ranking\', 0, -1, desc=True)[:10]</td><td>- срез словаря выше от первого эл-та(0) до последнего(-1)</td></tr>\r\n    <tr><td></td><td></td></tr>\r\n    <tr><td>r.<b>zunionstore</b>(tmp_key, keys)</td><td>- делает один новый общий zincr для нескольких индивидуальных zincr(по ключам). Нужен новый ключ, где это всё хранится (tmp_key)</td></tr>\r\n     <tr><td>r.<b>zrem</b>(tmp_key, *product_ids)</td><td>- удалить из общего zincr конкретные записи</td></tr>\r\n    \r\n</table>\r\n\r\n <tr><td></td><td></td></tr>','2023-02-18','DATABASES/redis/работа с redis в терминале (команды)',30,3),(80,'Databases','Примеры использования redis','primery-ispolzovaniia-redis','### Система рекомендаций товаров к текущей покупке\r\n\r\nБудем хранить счётчики <b>zincrby</b> типа <i>продукт - с_чем_купил - сколько_раз</i> и выводить самые популярные.<br>\r\nТ.к. релятивную базу не используем, сделаем всё через отдельный класс в отдельном файле.<br>\r\n\r\n#### Создаём файл <i>recomender.py</i> в каталоге нужного приложения:\r\n\r\n\r\n> <pre>\r\nimport redis\r\nfrom django.conf import settings\r\nfrom .models import Product\r\n<br>\r\nr = redis.StrictRedis(host=settings.REDIS_HOST,                                           - коннект к базе\r\n		port=settings.REDIS_PORT,\r\n		db=settings.REDIS_DB)<br>\r\nclass <b>Recommender</b>:\r\n    def <b>get_product_key</b>(self, id):                                                        - будет использовано для создания/получения нужного ключа\r\n        return \'product:{}:purchased_with\'.format(id)<br>	\r\n    def <b>products_bought</b>(self, products):                                                  - наполняет базу новыми парами \"объект куплен с объектом\"\r\n        product_ids = [p.id for p in products]                                            - база работает тупо с id`шниками\r\n        for product_id in product_ids:                                                    - это продукты в корзине покупок\r\n            for with_id in product_ids:\r\n                if product_id != with_id:\r\n                    r.<b>zincrby</b>(self.get_product_key(product_id),                           - создаём новую запись или увеличиваем счётчик для уже существующей\r\n				amount=1, with_id)                                                          записи типа {продукт: (продукт1, 5 раз), (продукт2, 3 раза))<br>						\r\n    def <b>suggest_products_for</b>(self, products, max_results=6):                              - вытаскиваем информацию с базы\r\n        product_ids = [p.id for p in products]\r\n            if len(products) == 1:\r\n                suggestions = r.<b>zrange</b>(                                                   - если в корзине только 1 продукт, просто берём топ записей, сформированных zincr\r\n                    self.<b>get_product_key</b>(product_ids[0]),\r\n                        0, -1, desc=True)[:max_results]\r\n	    else:\r\n                flat_ids = \'\'.join([str(id) for id in product_ids])                       - если в корзине несколько покупок, формируем новый ключ для всех купленных продуктов (получим \r\n                tmp_key = \'tmp_{}\'.format(flat_ids)                                         новый zincr, куда войдут все zincr для всех ключей)\r\n                keys = [self.get_product_key(id) for id in product_ids]                   - собираем все ключи для купленных продуктов\r\n                r.<b>zunionstore</b>(tmp_key, keys)                                              - так объединяются все записи zincrby для всех собранных ключей под именем нового ключа\r\n                r.<b>zrem</b>(tmp_key, *product_ids)                                             - убираем предложения, которые и так уже есть в корзине\r\n                suggestions = r.<b>zrange</b>(tmp_key, 0, -1,                                    - вытягиваем нужный рэндж\r\n				desc=True)[:max_results]\r\n                r.<b>delete</b>(tmp_key)                                                         - удаляем временный ключ, чтобы не засорял базу (уже не нужен)\r\n		suggested_products_ids = [int(id) for id in suggestions]                          - <u>в redis только строки</u>! Конвертим в int\r\n		suggested_products = list(Product.objects.filter(id__in=suggested_products_ids))  - <u>в redis только id</u>! Получаем по ним объекты\r\n		suggested_products.sort(key=lambda x: suggested_products_ids.index(x.id))         - сортируем объекты по индексу(первыми идут более популярные предложения)\r\n		return suggested_products<br>\r\n    def <b>clear_purchases</b>(self):                                                            - обнулить все записи в redis (на всякий случай)\r\n        for id in Product.objects.values_list(\'id\', flat=True):\r\n            r.<b>delete</b>(self.get_product_key(id))\r\n\r\n> </pre>\r\n\r\n#### В нужный файл views импортим наш класс и ипользуем его методы:\r\n\r\n\r\n> <pre>\r\nfrom .recommender import Recommender<br>\r\ndef <b>product_detail</b>(request, id, slug):\r\n	...\r\n	<b>r = Recommender()</b>\r\n	recommended_products = <b>r.suggest_products_for</b>([product], 4)\r\n	...\r\n	return render(request, \'shop/product/detail.html\', {\'product\': product,\r\n		\'cart_product_form\': cart_product_form,\r\n		\'recommended_products\': recommended_products})\r\n> </pre>','2023-02-18','DATABASES/redis/примеры использования redis',30,3),(81,'Python','Установка и настройка PyTest','ustanovka-i-nastroika-pytest','### Установка\r\n\r\n> <pre>\r\npip install pytest                                          - чистый pytest\r\npip install pytest-django                                   - чистый pytest + надстройка для django\r\n> </pre>\r\n\r\n### Настройка\r\n\r\n1. Создаём новый файлик c настройками в корне проекта <i>pyrest.ini</i>:\r\n\r\n\r\n> <pre>\r\n[pytest]\r\n<b>DJANGO_SETTINGS_MODULE</b> = yourproject.settings               - ссылка на настройки нашего проекта<br>\r\n<b>python_files</b> = tests.py test_\\*.py *_tests.py               - маска для файлов, которые будут ассоциированы с pytest<br>\r\n<b>markers</b> =                                                   - свои кастомные маркеры для тестов\r\n    slow: slow running test<br>\r\n<b>addopts</b> = -rP                                               - так можно автоматически добавлять опции к команде pytest (будет выводить принты)\r\n> </pre>\r\n\r\n2. Создаём проверочный тестовый файлик <i>test_1.py</i>, чтобы убедиться, что всё работает:\r\n\r\n\r\n> <pre>\r\nimport pytest\r\n<br>\r\ndef <b>test</b>_example():                                         - все тесты должны начинаться с <i>test</i>\r\n    print(test1)\r\n    assert 1 == 1\r\n> </pre>\r\n\r\n3. В терминале из корня проекта даём команду `pytest\' - должно заработать\r\n\r\n\r\n\r\n### Расположение тестов\r\n\r\nЕсть 2 подхода:\r\n\r\n- Папка с тестами приложения лежит в самой директории приложения\r\n- Общая папка для тестов в корне проекта с подпапками для разных кейсов\r\n\r\n\r\n### Немного команд и команд с опциями:\r\n\r\n\r\n\r\n<table>\r\n    <tr><td>pytest</td>                                     <td>- запустить pytest</td></tr>\r\n    <tr><td>pytest <b>-x</b></td>                           <td>- тесты будут идти до первого фэйла. На нём и остановятся</td></tr>\r\n    <tr><td>pytest <b>-rP</b></td>                          <td>- вывести сообщения из <i>print()</i>, если такие есть в тесте</td></tr>\r\n    <tr><td>pytest <i>tests.py</i></td>                     <td>- указать конкретный файл с тестами/директорию где их искать. Запустит только его, а не все тесты</td></tr>\r\n    <tr><td>pytest <i>tests.py::<b>test1</b></i></td>       <td>- конкретный тест конкретного файла</td></tr>\r\n    <tr><td>pytest <b>-m \"slow\"</b></td>                    <td>- запустить только тесты, помеченные маркером <i>slow</i></td></tr>\r\n    \r\n</table>\r\n\r\n### Marks/маркеры\r\n\r\nМожно помечать тесты специальными декораторами, которые отложат/скипнут/как-то пометят/сделают что-то ещё с тестом:\r\n\r\n\r\n\r\n> <pre>\r\n@pytest.mark.<b>skip</b>                                           - скипнуть\r\n@pytest.mark.<b>skipif</b>(                                        - скипнуть по условию\r\n    sys.platform == \'darwin\',\r\n    reason=\'don`t work on mac\')\r\n@pytest.mark.<b>xfail(strict=True)</b>                             - пометить, что провалится. Если есть необязательный <i>strict=True</i>, тест засчитается, только если он fail.\r\n> </pre>\r\n\r\n---\r\n\r\n### Скипы и xfail`s:\r\n\r\n\r\n\r\n> <pre>\r\nif not sys.platform.startswith(\'win\'):                           - глобальное условие в начале модуля\r\n    <b>pytest.skip</b>(\'skipping whole module\',                         - в скобках комментарий\r\n        <b>allow_module_level=True</b>)                                 - эта опция позволяет пропустить <u>весь модуль</u>\r\n<br>\r\nrequirement = pytest.<b>mark.skipif</b>(sys.platform == \'win32\',        - скип как декоратор. Назначаем переменной.\r\n    reason=\'skipped for win32\')\r\n<b>@requirement</b>                                                     - используем переменную как декоратор\r\ndef test_decorator_skipif():\r\n    ...\r\n<br>\r\n<b>@pytest.mark.skip</b>(reason=\'always skipped test\')                  - тест, который всегда будет пропущен\r\ndef test_skip(my_gift):\r\n<br>\r\n@pytest.mark.parametrize(\r\n    \"check\",\r\n    [True, False])\r\ndef test_check_skip(my_gift, check):\r\n    <b>if not check</b>:                                                - скип по условию внутри самого теста.\r\n        <b>pytest.skip</b>(\'check failed\')\r\n    assert my_gift.wrapping_paper() == 58\r\n<br>\r\n<b>@pytest.mark.skipif</b>(sys.platform == \'win32\',                     - скип по условию внутри декоратора\r\n    reason=\'skipped for win32\')\r\ndef test_platform_skip():\r\n    assert True\r\n<br>\r\n<b>@pytest.mark.skip</b>(reason=\'scip whole class\')                     - можно скипать целый класс, а не тесты по отдельности\r\nclass TestClassSkip:\r\n    def test_func(self):\r\n        assert True\r\n    def test_func2(self):\r\n        assert True\r\n<br>\r\n<b>@pytest.mark.xfail</b>                                               - тест пометится проваленным в любом случае, но проверен будет\r\ndef test_failing_func():\r\n    print(\'doing_test\')\r\n    assert True                                                  - в зависимости от результата теста будет Xpassed (X) или xfailed (x)\r\n<br>\r\n@pytest.mark.xfail(<b>run=False</b>)                                    - <i>run=False</i> укажет интерпретатору даже не заходить в этот тест. Пометится как х (xfailed)\r\ndef test_failing_func2():\r\n    print(\'never see this message\')                              - сюда интерпретатор не зайдёт, поэтому сообщения никто не увидит\r\n    assert True\r\n<br>\r\n@pytest.mark.parametrize(\r\n    \"check\",\r\n    [True,                                                       - даст ошибку F, т.к. strict=True\r\n     False])                                                     - xfailed, т.к. тест упал\r\n@pytest.mark.xfail(<b>strict=True</b>, reason=\'strict test\')            - тест <u>обязан</u> провалиться. Если не провалится - будет Fail\r\ndef test_failing_func_strict(check):\r\n    assert check\r\n<br>\r\n@pytest.mark.xfail(<b>sys.platform == \'mac\'</b>,                        - будет работать как xfail, если удовлетворит условие (xpassed). Если не удовлетворит - обычный тест\r\n    reason=\'fail with check and reason\')     \r\ndef test_failing_func_reason():\r\n    assert True\r\n<br>\r\n@pytest.mark.xfail(<b>raises=RuntimeError</b>, reason=\'errors raising\') - Так проверяем на срабатывание исключений. Xpassed без ошибок, xfail c нужной ошибкой, Fail с неправильной ошибкой\r\ndef test_except():\r\n    raise RuntimeError\r\n    assert True\r\n<br>\r\n@pytest.mark.xfail(raises=RuntimeError,\r\n    reason=\'errors raising\', <b>strict=True</b>)                        - xfail если нужная ошибка, Fail <u>в остальных случаях</u>.\r\ndef test_except_2():\r\n    raise RuntimeError\r\n    assert True\r\n> </pre>','2023-02-19','PYTHON/полезные модули/pytest/установка и настройка pytest',31,3),(82,'Python','Pytest fixtures','pytest-fixtures','<b><i>fixture</i></b> - функция, которая подготавливает среду для теста: коннект к БД, вытягивание оттуда данных, подготовка начальных данных и пр.<br>\r\nМаркируется специальным декоратором: `@pytest.fixture`<br>\r\nКак правило живёт в отдельном файле <i>conftest.py</i>(<u>не забудь в него заимпортировать pytest</u>)\r\n\r\n\r\n\r\n> <pre>\r\n@pytest.<b>fixture</b>                                             - указываем, что эта функция <i>fixture</i>. (<i>В таком режиме она будет запускаться каждый раз при вызове в каждом тесте</i>)\r\n@pytest.fixture<b>(scope=\"session\")</b>                            - так она будет вызвана 1 раз и переиспользована в разных тестах\r\ndef fixture_1():\r\n    print(\'This is fixture\')\r\n    return 1                                                - возвращает какие-то данные\r\n<br>\r\ndef test_1(<b>fixture_1</b>):                                      - в функцию теста передаём функцию фикстуры\r\n    num = fixture_1                                         - получаем данные из фикстуры в нужном тесте\r\n    assert num == 1\r\n<br>\r\n@pytest.fixture\r\ndef yield_fixture():                                        - можно сделать так, чтобы fixture сделала что-то в конце теста\r\n    print(\'Before\')\r\n    <b>yield</b> 333                                               - yield возвращает что-то для теста\r\n    print(\'After test\')                                     - действия после завершения теста\r\n\r\n> </pre>\r\n\r\n<h3>Разновидности Scopes:</h3>\r\n\r\n<table>\r\n    <tr><td>@pytest.fixture()</td>                          <td> - функция запуститься каждый раз, когда её вызовут</td></tr>\r\n    <tr><td>@pytest.fixture(scope=<b>module</b>)</td>       <td> - запустится только один раз для всего модуля когда её вызовут впервые. При втором вызове запускаться не будет. Результат работы будет переиспользован</td></tr>\r\n    <tr><td>@pytest.fixture(<b>autouse=True</b>)</td>       <td> - запускается <u>для каждого теста, даже если этого никто не просит</u>. Не рекомендуется.</td></tr>\r\n    <tr><td>@pytest.fixture<b>(scope=\"session\")</b></td>    <td> - <u>уточнить! Для всей сессии</u>.\r\n</table>\r\n\r\n\r\n<hr>\r\n\r\n### Fixture factory\r\n\r\nЧтобы динамически создавать информацию для тестов. Например пользователей модели User с разными параметрами. Так не нужно под каждый тест писать новую fixture<br>\r\nПолучим меньше кода.\r\n\r\n> <pre>\r\n@pytest.fixture\r\ndef new_user_factory(<b>db</b>):                                   - это factory. Ей будут пользоваться другие fixture чтобы создавать пользователей. \r\n    <b>def create_app_user(</b>                                    - внутри factory создаём ещё одну функцию (прям как у декоратора)\r\n        username,\r\n        password = None,\r\n        first_name = \"default_first_name\",                  - внутренняя функция принимает атрибуты нового юзера. Что не указано использует занч. по умолчанию\r\n        email = \"default@email.com\",\r\n        is_staff = False,\r\n        ...):\r\n        user = User.objects.create_user(                    - создаём нового юзера, передав параметры из функции\r\n            username = username,\r\n            password = password,\r\n            first_name =first_name,\r\n            is_staff = is_staff)\r\n        <b>return</b> user                                         - внутренняя функция возвращает нужную информацию (объект нового юзера)\r\n    <b>return</b> <i>create_app_user</i>                                  - внешняя, как и в декораторе, возвращает внутреннюю функцию\r\n<br>\r\n@pytest.fixture                                             - эта fixture будет использовать вышеописанный factory\r\ndef new_user(db, <b>new_user_factory</b>):                         - передаём и БД и фактори\r\n    return <b>new_user_factory</b>(\"test_user\",                    - вызываем переданную фактори, которая вызовет внутр. функцию, которая вернёт объект юзера. Указываем параметры для юзера\r\n        \"password\", \"Name\")\r\n<br>\r\ndef test_new_user(new_user):                                - а это пример теста, который использует fixture, которая использует factory\r\n    print(new_user.first_name)\r\n    assert new_user.first_name = \"Name\"\r\n> </pre>\r\n\r\n<hr>\r\n\r\n### Factory boy\r\n\r\nУстановка: `pipenv install pytest-factoryboy`<br>\r\nЗаодно устанавливаем <i>faker</i> - будет генерить ложные данные для тестов: `pipenv install Faker`<br>\r\nFactory обычно живут в отдельном файле <i>factories.py</i>:\r\n\r\n\r\n> <pre>\r\nimport <b>factory</b>\r\nfrom faker import Faker\r\nfake = Faker()\r\n<br>\r\nfrom django.contrib.auth.models import User\r\nfrom core.app1 import models                                          - наши модели нашего приложения\r\n<br>\r\nclass <b>UserFactory</b>(<i>factory.django.DjangoModelFactory</i>):\r\n    class <b>Meta:</b>\r\n        model = <b>User</b>\r\n<br>\r\n    name = \'default_name\'                                             - параметры по умолчанию при генерации объектов, которые можно переписать\r\n    is_staff = True\r\n    first_name = <b>fake.name()</b>                                          - сгенерит рандомное имя (!!!Будет генерить постоянно одинаковое имя)\r\n    name = <b>factory.Faker</b>(\'first_name\')                                - вот так будет выдавать каждый раз рандомное имя\r\n    date = <b>fake.date_between(<i>start_date=\'-20y\',\r\n        end_date=\'today\'</i>)</b>                                             - сгенерит рандомную дату, параметры в скобках необязательны\r\n<br>\r\nclass <b>CategoryFactory</b>(<i>factory.django.DjangoModelFactory</i>):             - пример фактори своей модели <u>с ключами на другие модели</u>\r\n    class <b>Meta:</b>\r\n        model = models.Category\r\n    name = \'django\'\r\n<br>\r\nclass <b>ProductFactory</b>(<i>factory.django.DjangoModelFactory</i>):             - пример фактори связанной ключами\r\n    class <b>Meta:</b>\r\n        model = models.Product\r\n    title = \'product_title\'\r\n    category = <b>factory.SubFactory(CategoryFactory)</b>                    - вот так ссылаемся на другую модель \r\n    description = fake.text()\r\n    \r\n> </pre>\r\n\r\n#### Нужно внести настройки factories в <i>conftest.py</i>:\r\n\r\n\r\n> <pre>\r\nimport pytest<br>\r\nfrom pytest_factoryboy import register\r\nfrom tests.factories import UserFactory, ProductFactory, CategoryFactory\r\n<br>\r\n<b>register</b>(ProductFactory)   \r\n<b>register</b>(CategoryFactory)\r\n<b>register</b>(UserFactory)                                              - !!!<u>fixtures будут вызываться в файле тестов и называться user_factory</u>!!!\r\n\r\n> </pre>\r\n\r\n#### Как использовать в тестах:\r\n\r\n\r\n> <pre>\r\n@pytest.mark.django_db\r\ndef test_new_user(<b>user_factory</b>):\r\n    print(user_factory.username)                                      - фактори дала объект юзера. Так можем с ним взаимодействовать\r\n    user = user_factory.<b>build()</b>                                       - так можно <u>создать</u> новый объект (не сохранить)\r\n     user = user_factory.<b>create()</b>                                     -  <u>создать и сохранить в бд</u> новый объект\r\n<br>\r\ndef test_product(product_factory):\r\n    product = product_factory.build()\r\n> </pre>\r\n\r\n#### Но обычно создание объектов выносится в fixtures, которые живут в conftest.py:\r\n\r\n> <pre>\r\n@pytest.fixture\r\ndef new_user(<b>db</b>, user_factory):                                       - <b>db</b> - то же что и маркер @pytest.mark.django_db\r\n    user = user_factory.create()\r\n    return user\r\n> </pre>\r\n\r\n\r\n<hr>\r\n\r\n### Как тестировать большое кол-во параметров за раз:\r\n\r\nФайл <i>тестов</i>:\r\n\r\n\r\n> <pre>\r\nimport pytest\r\nfrom core.app.models import Product                                   - модель, которую будем тестировать\r\n<br>\r\n<b>@pytest.mark.parametrize(</b>                                             - маркер того, что мы будем генерить кучу объектов с разными параметрами\r\n    \"title, category, description, slug...<b>validity</b>\",                  - параметры передаются одной <b>str</b>. !!!Последний параметр - <u>ожидаемый результат создания объекта</u>.\r\n    [\r\n        (\"your_title\", 1, \"descr\", \"sl-ug\"...<b>True</b>),                   - наборы параметров для создания объектов\r\n        (\"your_title2\", 2, \"descr2\", \"sl_ug\"...<b>False</b>),\r\n    ],\r\n    )\r\n<b>def test_product_instance(db, product_factory,</b>                        - тест, который будет создавать объекты. Нужно передать доступ к базе(аналогично маркеру), фактори\r\n    title, category, description, slug...validity):                     и параметры для объекта<br>\r\n    test = product_factory(                                           - создаём объекты через factory\r\n        title = title,\r\n        category_id = category,\r\n        description = description,\r\n        slug = slug,\r\n        ...                                                           - validity сюда уже не указываем\r\n        )<br>\r\n    item = Product.objects.all().count()                              - считаем сколько создало. <i>Всегда будет 1, т.к. после каждого теста тестовые данные удаляются</i><br>\r\n    <b>assert item == validity</b>                                           - при успехе item = 1, а 1 это True\r\n\r\n> </pre>\r\n\r\n#### Ещё один пример тестирования формы:\r\n\r\n> <pre>\r\n<b>@pytest.mark.parametrize(</b>\r\n    \"user_name, email, password, password2, validity\",\r\n    [\r\n        (\"user1\", \"mail@mail.com\", \"123a\", \"123a\", True),\r\n        (\"user1\", \"mail@mail.com\", \"123a\", \"\", False),\r\n        (\"user1\", \"mail@mail.com\", \"123a\", \"123b\", False),\r\n    ],\r\n    )\r\n@pytest.mark.django_db\r\ndef test_create_account(client, user_name, email, password, password2, validity):\r\n    form = RegistrationForm(\r\n        data={\r\n            \"user_name\": user_name,\r\n            \"email\": email,\r\n            \"password\": password,\r\n            \"password2\": password2,\r\n        },\r\n    )\r\n    assert <b>form.is_valid() is validity</b>\r\n\r\n> </pre>\r\n\r\n#### Пример отправки формы на сервер (тестим view) - используем <i>client</i>:\r\n\r\n\r\n> <pre>\r\n<b>@pytest.mark.parametrize(</b>\r\n    \"user_name, email, password, password2, validity\",\r\n    [\r\n        (\"user1\", \"mail@mail.com\", \"123a\", \"123a\", 200),              - будем отправлять post-запросы на сервер. В качестве ответов - статус коды            \r\n        (\"user1\", \"mail@mail.com\", \"123a\", \"\", 400),\r\n        (\"user1\", \"mail@mail.com\", \"123a\", \"123b\", 400),\r\n    ],\r\n    )\r\n@pytest.mark.django_db\r\ndef test_create_account(client, user_name, email,\r\n        password, password2, validity):\r\n    response = client.post(\"/account/register/\",                      - делаем запрос\r\n        data={\r\n            \"user_name\": user_name,\r\n            \"email\": email,\r\n            \"password\": password,\r\n            \"password2\": password2,\r\n        },\r\n    )\r\n    assert <b>response.status_code() == validity</b>\r\n\r\n> </pre>','2023-02-19','PYTHON/полезные модули/pytest/pytest fixtures',31,3),(83,'Python','Примеры тестов в Django','primery-testov-v-django','### Работа с БД\r\n\r\n\r\n> <pre>\r\nimport pytest\r\nfrom django.contrib.auth.models import User\r\n<br>\r\n<b>pytestmark = pytest.mark.django_db</b>                          - даст доступ к бд для <u>всех</u> тестов сразу. Не нужно будет помечать декоратором каждый\r\n<br>\r\n<b>@pytest.mark.django_db</b>                                      - этот декоратор нужен, если мы хотим в тестовой функции получить данные из БД проекта. <u>Создаст тестовую БД на время теста</u>\r\ndef test_user_create():\r\n    User.objects.create(...)\r\n    assert User.objects.count() == 1\r\n<br>\r\n@pytest.fixture()                                           - кейс, где нужно получить доступ к базе в fixture\r\ndef user_1(<b>db</b>):                                             - передаём db в функцию фикстуры\r\n    user = User.objects.create_user(\"test_user\")\r\n    return user<br>          \r\ndef check_password(<i>user_1</i>):\r\n    assert user_1.username == \"test_user\"\r\n> </pre>\r\n\r\n---\r\n\r\n### Так можно тестировать Celery:\r\n\r\n\r\n> <pre>\r\n\\# conftest.py\r\nfrom myproject.celery import celeryapp\r\n<br>\r\n@pytest.fixture(scope=\'module\')\r\ndef celery_app(request):\r\n    celeryapp.conf.update(CELERY_ALWAYS_EAGER=True)\r\n    return celeryapp\r\n<br>\r\n\\# test_tasks.py\r\ndef test_some_task(celery_app):\r\n    ...\r\n> </pre>','2023-02-19','PYTHON/полезные модули/pytest/примеры тестов в django',31,3),(84,'Django','Настройка','nastroika','### Нужно установить сам Celery и какой-нибудь из его message-broker\r\n\r\n`pipenv install celery`<br>\r\n`sudo apt-get install rabbitmq-server -y --fix-missing` - это брокер rabbitMQ.<br>\r\n\r\n<i>В django часто ещё используют <b>redis</b> (см. отдельные статьи по нему)</i><br>\r\n\r\nrabbitMQ можно запускать/гасить вот так:\r\n\r\n> `sudo rabbitmq-server` / `sudo rabbitmqctl stop`\r\n\r\n### Настройка в проекте\r\n\r\n- В папке самого проекта <i>(там где settings.py)</i> создаём новый файлик <i>celery.py</i>:\r\n\r\n> <pre>\r\nimport os\r\nfrom celery import Celery\r\n<br>\r\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'<b>autosaloon</b>.settings\')          - имя проекта<br>\r\napp = Celery(\'autosaloon\')                                                      - инстанс celery для проекта\r\napp.config_from_object(\'django.conf:settings\', namespace=\'CELERY\')              - чтобы пихать настройки celery в <i>settings.py</i> проекта\r\napp.autodiscover_tasks()                                                        - чтобы celery автоматически собирал таски <u>(файлы <i>tasks.py</i>)</u> по всему проекту\r\n> </pre>\r\n\r\n- Пример настроек celery + redis в <i>settings.py</i>:\r\n\r\n\r\n> <pre>\r\nREDIS_HOST = \'127.0.0.1\'                                                        - для docker скорее всего будет 0.0.0.0 \r\nREDIS_PORT = \'6379\'\r\nCELERY_BROKER_URL = \'redis://\' + REDIS_HOST + \':\' + REDIS_PORT + \'/0\'           - для автоматического подключения redis в качестве брокера\r\nCELERY_BROKER_TRANSPORT_OPTIONS = {\'visibility_timeout\': 3600}\r\nCELERY_RESULT_BACKEND = \'redis://\' + REDIS_HOST + \':\' + REDIS_PORT + \'/0\'\r\nCELERY_ACCEPT_CONTENT = [\'application/json\']\r\nCELERY_TASK_SERIALIZER = \'json\'\r\nCELERY_RESULT_SERIALIZER = \'json\'\r\n> </pre>\r\n\r\n- Нужно отредактировать <i>__init__.py</i> опять же в той же папке проекта:\r\n\r\n\r\n> <pre>\r\n\\#from \\_\\_future\\_\\_ import absolute_import, unicode_literals                  - странная настройка, но иногда встречается. Пробуй, если без неё не работает\r\nfrom .celery import app as celery_app<br>\r\n\\_\\_all\\_\\_ = (\'celery_app\',)\r\n> </pre>\r\n\r\n### Пример таски в каком-нибудь приложении проекта\r\n\r\nВ директории приложения создаём файлик <i>tasks.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom autosaloon.celery import app                                               - подгружаем инстанс нашего Celery\r\nfrom .service import send                                                       - это функция, которая будет вызываться через celery\r\n<br>\r\n@app.task                                                                       - есть несколько видов таких декораторов под разные цели, см. доки\r\ndef send_spam_email(user_email):\r\n    send(user_email)\r\n> </pre>\r\n\r\n### Как вызывать таску\r\n\r\n- Из какой-нибудь <i>view</i>:\r\n\r\n\r\n> <pre>\r\nfrom .tasks import send_spam_email\r\n<br>\r\nclass TestView(CreateView):\r\n    ...\r\n    send_spam_email.<b>delay</b>(email)                                                - delay скажет, что не нужно дожидаться окончания работы этой функции.\r\n> </pre>\r\n\r\n### Запуск worker - обработчик тасков celery\r\n\r\nНаходясь в основной директории проекта <i>(там где manage.py)</i> дать команду: `celery -A autosaloon worker -l info`<br>\r\nгде <b>autosaloon</b> - имя инстанса celery из файла <i>celery.py</i>, -l info - вывод результата в консоль\r\n\r\n<hr>\r\n\r\n### Celery beat - для периодичной отправки тасков\r\n\r\nРаботаем с файликом <i>celery.py</i>:\r\n\r\n\r\n> <pre>\r\nimport os\r\nfrom celery import Celery\r\n<b>from celery.schedules import crontab</b>                                            - для работы с расписанием тасков\r\n<br>\r\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'<b>autosaloon</b>.settings\')\r\napp = Celery(\'autosaloon\')\r\napp.config_from_object(\'django.conf:settings\', namespace=\'CELERY\')\r\napp.autodiscover_tasks()\r\n<br>\r\n/# celery beat tasks<br>\r\napp.conf.beat_schedule = {                                                      - словарик с периодичными тасками\r\n    \'send-spam-every-5-min\': {                                                  - имя периодичной таски\r\n        \'task\': \'<b>trading</b>.tasks.send_beat_email\',                                - сама функция из <i>tasks.py</i> конкретного приложения\r\n        \'schedule\': crontab(minute=\'\\*/5\'),                                      - как указывать время читай [тут](https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html)          \r\n        },\r\n    }\r\n> </pre>\r\n\r\n!!! Workers для celery beat запускаются немного иначе: ``celery -A autosaloon beat -l info`<br>\r\nДо этого вроде нужно и обычный worker запустить','2023-03-02','DJANGO/celery/настройка',32,3),(86,'Django REST','JWT Authentication (SimpleJWT)','jwt-authentication-simplejwt','# Статья расскажет о том, как сделать аутентификацию по jwt-токенам на библиотеке <i>simplejwt</i>\r\n\r\n- Установка:\r\n\r\n\r\n> <pre>\r\npipenv install djangorestframework-simplejwt\r\n> </pre>\r\n\r\n- В <i>settings.py</i> указываем настройки аутентификации по jwt:\r\n\r\n\r\n> <pre>\r\nREST_FRAMEWORK = {\r\n    ...\r\n    \'DEFAULT_AUTHENTICATION_CLASSES\': (\r\n        ...\r\n        \'rest_framework_simplejwt.authentication.JWTAuthentication\',\r\n        )\r\n    ....\r\n    }\r\n> </pre>\r\n\r\n- описываем настройки jwt в том же <i>settings.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom datetime import timedelta                              - для контроля времени жизни токенов\r\n...\r\n<br>\r\nSIMPLE_JWT = {\r\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=5),          - время жизни токенов\r\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\r\n    \"ROTATE_REFRESH_TOKENS\": False,\r\n    \"BLACKLIST_AFTER_ROTATION\": False,\r\n    \"UPDATE_LAST_LOGIN\": False,\r\n<br>\r\n    \"ALGORITHM\": \"HS256\",                                   - алгоритм шифрования\r\n    \"SIGNING_KEY\": SECRET_KEY,                              - ключ от джанги\r\n    \"VERIFYING_KEY\": \"\",\r\n    \"AUDIENCE\": None,\r\n    \"ISSUER\": None,\r\n    \"JSON_ENCODER\": None,\r\n    \"JWK_URL\": None,\r\n    \"LEEWAY\": 0,\r\n<br>\r\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),                       - что писать перед токеном в заголовке аутентификации. Будет Bearer kjlhphpu(токен)\r\n    \"AUTH_HEADER_NAME\": \"HTTP_AUTHORIZATION\",               - имя заголовка для аутентификации\r\n    \"USER_ID_FIELD\": \"id\",                                  - привязка id пользователя как идентификатор в jwt\r\n    \"USER_ID_CLAIM\": \"user_id\",\r\n    \"USER_AUTHENTICATION_RULE\": \r\n        \"rest_framework_simplejwt.authentication.default_user_authentication_rule\",\r\n<br>\r\n    \"AUTH_TOKEN_CLASSES\": (\"rest_framework_simplejwt.tokens.AccessToken\",),\r\n    \"TOKEN_TYPE_CLAIM\": \"token_type\",\r\n    \"TOKEN_USER_CLASS\": \"rest_framework_simplejwt.models.TokenUser\",\r\n<br>\r\n    \"JTI_CLAIM\": \"jti\",\r\n<br>\r\n    \"SLIDING_TOKEN_REFRESH_EXP_CLAIM\": \"refresh_exp\",       - <i>sliding</i>-токены. Время должно быть таким же как и в начале этого словаря\r\n    \"SLIDING_TOKEN_LIFETIME\": timedelta(minutes=5),\r\n    \"SLIDING_TOKEN_REFRESH_LIFETIME\": timedelta(days=1),\r\n<br>\r\n    \"TOKEN_OBTAIN_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenObtainPairSerializer\",\r\n    \"TOKEN_REFRESH_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenRefreshSerializer\",\r\n    \"TOKEN_VERIFY_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenVerifySerializer\",\r\n    \"TOKEN_BLACKLIST_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenBlacklistSerializer\",\r\n    \"SLIDING_TOKEN_OBTAIN_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer\",\r\n    \"SLIDING_TOKEN_REFRESH_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer\",\r\n}\r\n> </pre>\r\n\r\n\r\n\r\n\r\n- В <b><i>корневом urls.py</i></b> прописываем маршруты:\r\n\r\n\r\n> <pre>\r\nfrom rest_framework_simplejwt.views import (\r\n    TokenObtainPairView,\r\n    TokenRefreshView,\r\n    TokenVerifyView\r\n)<br>\r\nurlpatterns = [\r\n    ...\r\n    path(\'api/token/\', TokenObtainPairView.as_view(), name=\'token_obtain_pair\'),\r\n    path(\'api/token/refresh/\', TokenRefreshView.as_view(), name=\'token_refresh\'),\r\n    path(\'api/token/verify/\', TokenVerifyView.as_view(), name=\'token_verify\'),\r\n    ...\r\n]\r\n> </pre>\r\n\r\n<hr>\r\n\r\nТут лежит [документация](https://django-rest-framework-simplejwt.readthedocs.io/en/latest/index.html)','2023-03-05','DJANGO REST/jwt authentication (simplejwt)',18,4),(87,'Django REST','Система регистрации на базе Djoser','sistema-registratsii-na-baze-djoser','# Djoser - популярная сторонняя библиотека для регистрации и аутентификации пользователей по токенам\r\n\r\nДокументация лежит [тут](https://djoser.readthedocs.io/en/latest/getting_started.html)\r\n\r\n- Установка: `pipenv install djoser`\r\n\r\n- Настройки <i>settings.py</i>:\r\n\r\n\r\n> <pre>\r\nINSTALLED_APPS = (\r\n    \'django.contrib.auth\',\r\n    ...,\r\n    \'rest_framework\',\r\n    \'rest_framework.authtoken\',                             - стандартные токены (если не нужно jwt). Добавит таблицу в БД. <u>!!!Нужно замигрировать!!!</u>\r\n    <b>\'djoser\'</b>,\r\n    ...,\r\n)\r\n> </pre>\r\n\r\n- Настройка токенов в том же <i>settings.py</i>:\r\n\r\n> <pre>\r\nREST_FRAMEWORK = {\r\n    \'DEFAULT_AUTHENTICATION_CLASSES\': (\r\n        \'rest_framework.authentication.TokenAuthentication\',\r\n        ...\r\n    ),\r\n}\r\n> </pre>\r\n\r\n\r\n\r\n- Настройки <b>главного urls.py</b>:\r\n\r\n\r\n> <pre>\r\npath(\'api/v1/auth/\', include(\'djoser.urls\')),               - тут немного непонятно, разбирайся с документацией\r\nre_path(r\'^auth/\', include(\'djoser.urls.authtoken\'))\r\n> </pre>\r\n\r\n<hr>\r\n\r\n### Доступные эндпоинты:\r\n\r\n<pre>\r\n/users/\r\n/users/me/\r\n/users/confirm/\r\n/users/resend_activation/\r\n/users/set_password/\r\n/users/reset_password/\r\n/users/reset_password_confirm/\r\n/users/set_username/\r\n/users/reset_username/\r\n/users/reset_username_confirm/\r\n/token/login/ (Token Based Authentication)\r\n/token/logout/ (Token Based Authentication)\r\n/jwt/create/ (JSON Web Token Authentication)\r\n/jwt/refresh/ (JSON Web Token Authentication)\r\n/jwt/verify/ (JSON Web Token Authentication)\r\n</pre>\r\n\r\n---\r\n\r\n## Djoser + SimpleJWT (с моего проекта)\r\n\r\n- Установка:\r\n\r\n\r\n> <pre>\r\npipenv install djangorestframework-simplejwt\r\npipenv install djoser\r\n> </pre>\r\n\r\n- <i>settings.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom datetime import timedelta                                                  - для контроля жизни токенов\r\n<br>\r\nINSTALLED_APPS = [\r\n    \'djoser\',                                                                   - djoser нужен, jwt - нет\r\n    ]\r\n<br>\r\nREST_FRAMEWORK = {\r\n    \'DEFAULT_AUTHENTICATION_CLASSES\': (\r\n        \'rest_framework_simplejwt.authentication.JWTAuthentication\',            - аутентификация по JWT\r\n        \'rest_framework.authentication.SessionAuthentication\',                  - это можно оставить для чтения документации\r\n        ),\r\n        ...\r\n	}\r\n<br>\r\n<b>DJOSER</b> = {                                                                      - доп. настройки. Нужны для сброса пароля/имени пользователя через почту\r\n    \'PASSWORD_RESET_CONFIRM_URL\': \'#/password/reset/confirm/{uid}/{token}\',\r\n    \'USERNAME_RESET_CONFIRM_URL\': \'#/username/reset/confirm/{uid}/{token}\',\r\n    \'ACTIVATION_URL\': \'#/activate/{uid}/{token}\',\r\n    \'SEND_ACTIVATION_EMAIL\': True,\r\n    \'SERIALIZERS\': {},\r\n}\r\n<b>SIMPLE_JWT</b> = {                                                                  - настройки JWT. Читай в статье по JWT\r\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=5),\r\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\r\n    \"ROTATE_REFRESH_TOKENS\": False,\r\n    \"BLACKLIST_AFTER_ROTATION\": False,\r\n    \"UPDATE_LAST_LOGIN\": False,<br>\r\n    \"ALGORITHM\": \"HS256\",\r\n    \"SIGNING_KEY\": SECRET_KEY,\r\n    \"VERIFYING_KEY\": \"\",\r\n    \"AUDIENCE\": None,\r\n    \"ISSUER\": None,\r\n    \"JSON_ENCODER\": None,\r\n    \"JWK_URL\": None,\r\n    \"LEEWAY\": 0,<br>\r\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\r\n    \"AUTH_HEADER_NAME\": \"HTTP_AUTHORIZATION\",\r\n    \"USER_ID_FIELD\": \"id\",\r\n    \"USER_ID_CLAIM\": \"user_id\",\r\n    \"USER_AUTHENTICATION_RULE\": \"rest_framework_simplejwt.authentication.default_user_authentication_rule\",<br>\r\n    \"AUTH_TOKEN_CLASSES\": (\"rest_framework_simplejwt.tokens.AccessToken\",),\r\n    \"TOKEN_TYPE_CLAIM\": \"token_type\",\r\n    \"TOKEN_USER_CLASS\": \"rest_framework_simplejwt.models.TokenUser\",<br>\r\n    \"JTI_CLAIM\": \"jti\",<br>\r\n    \"SLIDING_TOKEN_REFRESH_EXP_CLAIM\": \"refresh_exp\",\r\n    \"SLIDING_TOKEN_LIFETIME\": timedelta(minutes=5),\r\n    \"SLIDING_TOKEN_REFRESH_LIFETIME\": timedelta(days=1),<br>\r\n    \"TOKEN_OBTAIN_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenObtainPairSerializer\",\r\n    \"TOKEN_REFRESH_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenRefreshSerializer\",\r\n    \"TOKEN_VERIFY_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenVerifySerializer\",\r\n    \"TOKEN_BLACKLIST_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenBlacklistSerializer\",\r\n    \"SLIDING_TOKEN_OBTAIN_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer\",\r\n    \"SLIDING_TOKEN_REFRESH_SERIALIZER\": \"rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer\",\r\n}\r\n> </pre>\r\n\r\n- <i>urls.py</i>\r\n\r\n\r\n> <pre>\r\nurlpatterns = [\r\n    path(\'auth/\', include(\'djoser.urls\')),                  - стандартные + для jwt. Работает с одинаковым path дважды\r\n    path(\'auth/\', include(\'djoser.urls.jwt\')),\r\n]\r\n> </pre>','2023-03-05','DJANGO REST/система регистрации на базе djoser',18,4),(88,'Python','Импорты','importy','### Перезагрузка уже загруженного модуля:\r\n\r\n\r\n> <pre>\r\nfrom statistics_app.stat_collectors import get_dealer_stat\r\n<b>import importlib, sys</b>\r\n<br>\r\nget_dealer_stat = <b>importlib</b>.reload(<b>sys</b>.modules[\'statistics_app.stat_collectors\']).get_dealer_stat\r\n<br>\r\nimport some_module                                                              - если модуль целиком\r\n<b>import importlib</b>\r\n<br>\r\nimportlib.reload(some_module)\r\n> </pre>','2023-03-22','PYTHON/импорты',7,4),(89,'Python','Асинхронность, многопоточность, многопроцессорность','asinkhronnost-mnogopotochnost-mnogoprotsessornost','Python изначально синхронный. Т.е. если есть что-то, что выполняется долго, то остальная программа на это время засыпает и продолжает работу после\r\n\r\n<b>Многопроцессорность</b> - вариант вынести что-то трудоёмкое в отдельный процесс (в диспетчере задач появится новая запись).<br>\r\n<b>Многопоточность</b> - в одном процессе можно организовывать несколько процессов, которые будут делить между собой ресурсы процессора.<br>\r\nДля python плохо, т.к. есть <b><i>GIL</i></b> - <i>Global Interpreter Lock</i>, который в один момент времени позволяет работать только с одним процессом. <u>Переключение между процессами занимает какое-то время</u>, что плохо сказывается на производительности и делает схему нецелесообразной при большом количестве потоков.<br>\r\nЕщё одна проблема - <i><b>гонка процессов</i></b>, когда несколько процессов работают с одной и той же переменной (например лист) и могут перезаписывать в неё свои данные.<br>\r\n<br>\r\nНаилучший выход - <b><i>асинхронность</i></b>. Работает в рамках одного процесса и одного потока. По факту это event-loop на генераторах, который ставит задачи на паузу и ждёт от них callback прежде чем вернуться к выполнению. Во время ожидания выполняет другие задачи.\r\n\r\n---\r\n\r\n<h2> Немного терминов </h2><br>\r\n<b>Корутинная/асинхронная функция</b> - та самая функция, которая начинается с <b>async</b><br>\r\n<b>Корутина</b> - то, что эта функция возвращает в <b>await</b><br>\r\n<b>Футура</b> - это \"папа\" тасок. Абстрактная сущность для разработчиков фреймворков, которая позволяет переключаться от одной асинх. сущности к другой.<br>\r\n<b>Задача/таска</b> - частный случай футуры, предназначенный для оборачивания корутины\r\n\r\n---\r\n\r\n### Примеры кода\r\n\r\n> <pre>\r\nimport <b>asyncio</b>                                              - импорт асинхронной библиотеки\r\n<br>\r\n<b>async def</b> do_sometging(sec):                                - так объявляются асинхронные функции\r\n    <b>await</b> asyncio.<i>sleep</i>(sec)                                - так в асинхронных функциях вызываются методы, результат которых нужно ждать\r\n    print(\'result\', sec)\r\n<br>\r\nasync def print1(sec):\r\n    <b>await</b> asyncio.<i>sleep</i>(sec)\r\n    print(sec)\r\n    <b>await do_something(sec)</b>                                 - так в асинхронной функции вызывается другая асинхронная функция\r\n<br>\r\n<b>async def main():</b>                                           - точка входа. В ней будем регистрировать все наши асинхронные функции\r\n    task1 = <b>asyncio.create_task</b>(print1(1))                  - чтобы асинх. функции работали одновременно, их нужно обернуть в таски\r\n    task2 = asyncio.create_task(print1(2))\r\n    ...\r\n    task16 = asyncio.create_task(print1(16))\r\n    <b>await task1</b>                                             - так получаем результат работы таски\r\n    await task2\r\n    ...\r\n    await task16\r\n<br>\r\n<b>async def main():</b>                                           - альтернативный пример через менеджер контекста\r\n    <b>async with asyncio.TaskGroup() as tg:</b>                   - контекстный менеджер для регистрации асинхронных функций\r\n        for i in range(1, 16):\r\n            <b>tg.create_task(print1(i))</b>                       - непосредственно регистрация тасков (подтаски do_sometging()) регистрировать не нужно)<br>\r\n<b>async def main():</b>                                           - пример, когда нужно собрать результаты работы тасок в одном месте и обработать их дальше\r\n    tasks = []                                              - сюда будем собирать таски\r\n    for i in range(1, 16):\r\n        tasks.append(asyncio.create_task(print1(i)))\r\n    results = <b>await asyncio.gather(*tasks)</b>                  - результаты работы тасок будут в этом массиве, можно обрабатывать их дальше\r\n    for res in results:\r\n        ...\r\n<br>\r\n<b>asyncio.run(main())</b>                                         - запускаем обработчик асинхронных событий. Обязательно вкладываем точку входа (main)\r\n\r\n> </pre>','2023-03-26','PYTHON/асинхронность, многопоточность, многопроцессорность',7,4),(90,'Python','асинхронный pytest на примере FastAPI','asinkhronnyi-pytest-na-primere-fastapi','## Нужно установить доп. софт для тестирования:\r\n\r\n`pip install httpx pytest-asyncio`, где <b>httpx</b> - асинхронный request-клиент, <b>pytest-asyncio</b> - библиотека для запуска асинхронных тестов\r\n\r\n## В pytest.ini нужно указать, что мы хотим тестить асинхронно:\r\n\r\n\r\n> <pre>\r\n[pytest]\r\nasyncio_mode = <b>auto</b>                                         - автоматически запускает все асинхронные тесты асинхронно. Есть ещё <b>strict</b> - для продвинутых.\r\n> </pre>\r\n\r\n---\r\n\r\n### В conftest.py настраиваем необходимые fixtures:\r\n\r\n\r\n\r\n> <pre>\r\nimport asyncio\r\nimport httpx\r\nimport pytest\r\nfrom main import app                                        - инстанс FastAPI\r\nfrom database.connection import Settings                    - тут находятся инструкции по подключению к MongoDB\r\nfrom models.events import Event                             - это модели проекта\r\nfrom models.users import User\r\n<br>\r\n@pytest.fixture(scope=\"session\")                            - чтобы все тесты прогнались в одном потоке для избегания конфликтов (т.е. последовательно)\r\ndef event_loop():                                           - эта фикстура запрашивается асинхронными тестами <i>автоматически</i>\r\n    loop = asyncio.get_event_loop()\r\n    yield loop\r\n    loop.close()\r\n<br>\r\nasync def init_db():                                        - фикстура задаёт тестовую БД. В нашем случае mongo. База должна быть в работе.\r\n    test_settings = Settings()\r\n    test_settings.DATABASE_URL = \"mongodb://localhost:27017/testdb\"\r\n    await test_settings.initialize_database()\r\n<br>\r\n@pytest.fixture(scope=\"session\")\r\nasync def default_client():                                 - запустит тестовую среду, в которой будем тестить\r\n    await init_db()                                         - сначала подключимся к базе\r\n    async with httpx.AsyncClient(                           - контекстный менеджер, который запустит тестовый app\r\n        app=app, base_url=\"http://app\") as client:\r\n        yield client\r\n        # Clean up resources\r\n        await Event.find_all().delete()                     - почистить тестовую бд, когда все тесты пройдены\r\n        await User.find_all().delete()\r\n> </pre>\r\n\r\n---\r\n\r\n### Фикстуры для тестов:\r\n\r\n\r\n> <pre>\r\n@pytest.fixture(<b>scope=\"module\"</b>)                             - выполнится 1 раз на модуль (файл с тестами)\r\nasync def access_token() -> str:                            - удобно для создания токена, чтобы тестить авторизованных пользователей\r\n    return create_access_token(\"testuser@packt.com\")\r\n<br>\r\n@pytest.fixture(scope=\"module\")                             - создаст в тестовой MongoDB одну запись Event\r\nasync def mock_event() -> Event:\r\n    new_event = Event(\r\n        creator=\"testuser@packt.com\",\r\n        title=\"FastAPI Book Launch\",\r\n        image=\"https://linktomyimage.com/image.png\",\r\n        description=\"We will be ...\",\r\n        tags=[\"python\", \"fastapi\", \"book\", \"launch\"],\r\n        location=\"Google Meet\"\r\n        )\r\n    await Event.insert_one(new_event)\r\n    yield new_event\r\n> </pre>\r\n\r\n### Примеры тестов:\r\n\r\n\r\n\r\n> <pre>\r\n<b>@pytest.mark.asyncio</b>                                                                      - пометка, что тест <i>асинхронный</i>\r\nasync def test_post_event(<b>default_client</b>: httpx.AsyncClient, <b>access_token</b>: str) -> None:  - фикстуры, необходимые для тестов\r\n    payload = {                                                                           - создаём новый инстанс Event (просто json)\r\n        \"title\": \"FastAPI Book Launch\",\r\n        \"image\": \"https://linktomyimage.com/image.png\",\r\n        \"description\": \"We will be discussing ...\",\r\n        \"tags\": [\"python\", \"fastapi\", \"book\", \"launch\"],\r\n        \"location\": \"Google Meet\",\r\n    }\r\n    headers = {\r\n        \"Content-Type\": \"application/json\",\r\n        <b>\"Authorization\": f\"Bearer {access_token}\"</b>                                         - необходимые заголовки (в т.ч. и токен)\r\n    }\r\n    test_response = {\"message\": \"Event created successfully\"}\r\n    <b>response = await default_client.post(\"/event/new\", json=payload, headers=headers)</b>     - асинхронный клиент, данные в json и необходимые заголовки\r\n    assert response.status_code == 200\r\n    assert response.json() == test_response\r\n<br>\r\n@pytest.mark.asyncio\r\nasync def test_signin(default_client: httpx.AsyncClient) -> None:                         - тут показано как работать с <b><i>формой авторизации</i></b>\r\n    payload = {                                                                           - всё тот же json-словарь                                             \r\n        \"username\": \"testuser@gmail.com\",\r\n        \"password\": \"qwerty\"\r\n    }\r\n    headers = {\r\n        \"accept\": \"application/json\",\r\n        <b>\"Content-Type\": \"application/x-www-form-urlencoded\"</b>                               - бэкенд ждёт на json, а конкретную <b>форму</b>\r\n    }\r\n    response = await default_client.post(\"user/signin\", <b>data=payload</b>, headers=headers)    - заявляем как data, а не json\r\n    assert response.status_code == 200\r\n    assert response.json()[\'token_type\'] == \"Bearer\"\r\n> </pre>','2023-03-29','PYTHON/полезные модули/pytest/асинхронный pytest на примере fastapi',31,3),(91,'Python','Test coverage','test-coverage','### Pytest позволяет создать наглядный отчёт, который покажет процент кода в проекте, использованного в тестах. Так можно смотреть, что забыли потестить\r\n\r\nДля этого:\r\n\r\n- Доустанавливаем спец. утилиту: `pipenv install coverage`\r\n- Запускаем тесты вот так: ` coverage run -m pytest`\r\n- Генерируем отчёт: `coverage report`\r\n- Удобный отчёт в виде html: `coverage html` - создаст папку с файлами по типу многостраничного сайта. Можно открыть в браузере и ходить по ссылкам, смотреть где что забыл протестить\r\n\r\n---\r\n\r\n### Ещё полезная информация:\r\n\r\n\r\n\r\n> <pre>\r\ncoverage run <b>--omit=\'*/venv/\'</b> manage.py test                - так можно исключать файлы из отчёта\r\n> </pre>','2023-03-29','PYTHON/полезные модули/pytest/test coverage',31,3),(92,'Miscellaneous','Kafka','kafka','<b>Kafka</b> - \"глупый\" брокер сообщений. Нужен для обмена сообщениями между микросервисами/независимыми частями большого проекта. Хорош тем, что способен обрабатывать ооооочень большое кол-во информации, хранит данные внутри себя, хорошо подходит для постоянной потоковой передачи каких-то сообщений.\r\n\r\n### Скрипты Kafka\r\n\r\nПод капотом Kafka состоит из набора скриптов и конфигов, которые управляют всем процессом. Ниже алгоритм работы на самом низком уровне.\r\n\r\n1. Поднять zookeeper: \r\n>в папке bin есть скрипт <b>./zookeeper-server-start.sh</b><br>\r\n <b>../config/zookeeper.properties</b> - это конфиг, который передаём скрипту\r\n2. Также поступаем с сервером кафки:\r\n> <b>./kafka-server-start.sh и ../config/server.properties</b>\r\n3. Создаём топик и коннектим его к нашему серверу:\r\n> <b>./kafka-topics.sh --create --topic registrations --bootstrap-server localhost:9092</b>    - топик с именем registrations, сервер на локалхосте и стандартный порт\r\n4. Так можно проверить инфу по топику:\r\n><b>./kafka-topics.sh --describe --topic registrations --bootstrap-server localhost:9092</b>   - просто describe. Покажет кол-во партиций, лидера и прочую полезную инфу\r\n5. Записать что-то в топик через консоль:\r\n><b>./kafka-console-producer.sh --topic registrations --bootstrap-server localhost:9092</b>		- законнектит консоль к нужному топику (продюсер), печатаем в консоли всё что угодно, Enter отправить запись в топик, выход: <b>cntr+C</b>\r\n6. Прочитать что пишется в топик:\r\n><b>./kafka-console-consumer.sh --topic registrations --bootstrap-server localhost:9092</b>		- консюмер !!!Начнёт читать только то что попало в топик ПОСЛЕ ЗАПУСКА консюмера<br>\r\n><b>./kafka-console-consumer.sh --topic registrations --bootstrap-server localhost:9092 --consumer-property auto.offset.reset=earliest</b>			- с такой настройкой будет читать всё непрочитанное<br>\r\n><b>./kafka-console-consumer.sh --topic registrations --bootstrap-server localhost:9092 --from-beginning</b>			- то же что и выше (шорткат)<br>\r\n><b>./kafka-console-consumer.sh --topic registrations --bootstrap-server localhost:9092 --group slurm</b>				- запустить консьюмер конкретной группы<br>\r\n><b>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --group slurm --reset-offsets --to-erliest --topic registrations --execute</b>		- сбросить оффсет на первый возможный\r\n7. Посмотреть состояние группы консьюмеров:\r\n><b>./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group slurm --describe</b>			- покажет инфу по группе (кол-во активных консюмеров, топик, оффсет и пр.)\r\n\r\n---\r\n	\r\n### Настройки retension (автоудаление старой информации)\r\n\r\nВ файле настроек config/server.properties есть следующие опции:\r\n><b>log.retention.check.interval.ms=300000</b>			- как часто проверять, нужно ли что-то удалять (удаляет данные старше 5 минут)<br>\r\n\r\nФайл настроек может лежать в разных местах. В кафке от Confluent обычно здесь: <i>/etc/kafka/server.properties</i><br>\r\n\r\nТак можно менять эту настройку на лету для конкретного топика:\r\n><b>./cafka-config.sh --bootstrap-server localhost:9092 --entity-type topics --entity-name registrations --alter --add-config retention.ms=60000</b>		- для топика registrations настроили 1 мин<br>\r\n	\r\nКафка хранит файлы тут: <i>/tmp/kafka-logs/</i>  (в нашем случае тут будет партиция registrations-0: топик и единственная партиция)\r\n\r\nНастройка частоты ролл-апов (как часто будут закрываться сегменты лога):\r\n><b>./cafka-config.sh --bootstrap-server localhost:9092 --entity-type topics --entity-name registrations --alter --add-config segment.ms=10000</b>			- сегменты будут закрываться по 10 сек\r\n	\r\n------------------------------------------------------------- zookeeper ----------------------------------------------\r\n\r\nПочитать данные zookeeper`а:\r\n\r\n		./zookeeper-shell.sh localhost:2181		- откроет линуксободобный терминал, где будет отображена структура ключей (как адреса в линукс, можно делать ls)\r\n	Посмотреть значение можно командой get: get/brokers/topics/registrations/partitions/0/state\r\n\r\n---\r\n\r\n### Удобные команды через Docker:\r\n\r\ndocker exec broker kafka-topics --bootstrap-server broker:9092 --create --topic twitch_games\r\n\r\ndocker exec --interactive --tty broker kafka-console-producer --bootstrap-server broker:9092 --topic quickstart\r\n\r\ndocker exec --interactive --tty broker kafka-console-consumer --bootstrap-server broker:9092 --topic twitch_games --from-beginning\r\n\r\n---\r\n\r\n### Пример docker-compose:\r\n\r\n\r\n\r\n> <pre>\r\nversion: \'3.8\'\r\nservices:\r\n  zookeeper:\r\n    image: confluentinc/cp-zookeeper:7.3.2\r\n    container_name: zookeeper\r\n    environment:\r\n      ZOOKEEPER_CLIENT_PORT: 2181\r\n      ZOOKEEPER_TICK_TIME: 2000\r\n<br>\r\n  broker:\r\n    image: confluentinc/cp-kafka:7.3.2\r\n    container_name: broker\r\n    ports:\r\n      - \"9092:9092\"\r\n    depends_on:\r\n      - zookeeper\r\n    environment:\r\n      KAFKA_BROKER_ID: 1\r\n      KAFKA_ZOOKEEPER_CONNECT: \'zookeeper:2181\'\r\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT\r\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092\r\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\r\n      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\r\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\r\n      KAFKA_LOG_RETENTION_MS: 60000                                             - настройки хранения логов\r\n      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 10000                              - как часто проверяется время жизни логов\r\n<br>\r\n  api:\r\n    build: .\r\n    image: parser_api:latest\r\n    ports:\r\n      - \"8080:8080\"\r\n    env_file:\r\n      - .env.docker\r\n    depends_on:\r\n      - broker\r\n<br>\r\n  database:\r\n    image: mongo\r\n    ports:\r\n      - \"27017:27017\"\r\n    volumes:\r\n      - testDB:/data/db\r\n<br>\r\nvolumes:\r\n  testDB:\r\n> </pre>','2023-04-19','MISCELLANEOUS/kafka',8,4),(93,'Python','Kafka','kafka','Есть несколько библиотек для того, чтобы \"подружить\" python и kafka:<br>\r\n>1. <b>Kafka-Python</b> - старая добрая проверенная временем библиотека\r\n>2. <b>PyKafka</b> - альтернатива. Имеет какие-то плюсы и минусы относительно первой библиотеки\r\n>3. <b>Confluent Python Kafka</b> - считается самой современной и многофункциональной\r\n\r\n## Как работать на примере Kafka-Python:\r\n\r\nУстановка: `pipenv install kafka-python`<br>\r\n\r\n\r\n> <pre>\r\nfrom <b>kafka</b> import  <b>KafkaProducer,  KafkaConsumer</b>\r\nfrom json import loads, dumps                                         - для того, чтобы привести всё к нужному формату\r\n<br>\r\nproducer = <b>KafkaProducer</b>(bootstrap_servers=[settings.KAFKA_BROKER],   - куда подключаться. Например \'broker:29092\' для контейнера в докер\r\n    value_serializer=lambda x: dumps(x).encode(\'utf-8\'))              - сообщения передаются байтами, нужно закодировать\r\n<br>\r\npayload = build_catalog_tree()                                        - то, что будем передавать. Обычно это JSON\r\nheaders = [(\'type\', <b>b</b>\"catalog\")]                                      - к каждому сообщению можно добавлять заголовки с полезной информацией (байты)\r\n<b>producer.send</b>(settings.KAFKA_LAMODA_TOPIC,                            - отправляем в kafka в конкретный topic (первый параметр). Например \'lamoda\'\r\n    payload, headers=headers)                                         - само сообщение и <i>опционально заголовки</i>\r\nproducer.send(settings.KAFKA_LAMODA_TOPIC,\r\n    {\'end_of_cat\': \'finished\'},                                       - ещё один пример передачи сообщения\r\n    headers=[(\'finished\', url.encode(\'utf-8\'))])                      - ещё один пример передачи заголовков\r\n<b>producer.close()</b>                                                      - выключить продюсер\r\n<br>\r\nkonsumer = <b>KafkaConsumer</b>(settings.KAFKA_LAMODA_TOPIC,                 - так инициализируем consumer, задаём куда подключаться и какой топик читать\r\n    bootstrap_servers=[settings.KAFKA_BROKER],\r\n    auto_offset_reset=\'earliest\',                                     - и другие малопонятные настройки\r\n    enable_auto_commit=True,\r\n    # group_id=\'my-group\',\r\n    <b>consumer_timeout_ms=1000</b>                                          - крутая настройка, которая позволяет <i>выключить consumer</i>, если нет новых сообщений в теч. 1 сек.\r\n    value_deserializer=lambda x: loads(x.decode(\'utf-8\'))             - как декодировать данные\r\n    )<br>\r\nfor message in konsumer:                                              - так запускаем вечный цикл считывания сообщений консюмером из топика\r\n    if <b>message.headers</b> and                                            - так получаем информацию из заголовком\r\n        message.headers[0][1].decode(\'utf-8\') == \'catalog\':\r\n            catalog_list = <b>message.value</b>                              - так получаем само сообщение\r\n\r\n> </pre>','2023-06-30','PYTHON/полезные модули/kafka',27,3),(94,'Databases','FastApi Redis Cache','fastapi-redis-cache','### Быстрый и простой способ кэширования рутов FastApi с помощью Redis\r\n\r\n[Ссылка на доки](https://pypi.org/project/fastapi-redis-cache/)\r\n\r\n+ Устанавливаем библиотеку: `pip install fastapi-redis-cache`<br>\r\n+ Инициализируем кэш при старте приложения, поэтому работаем с <i>main.py</i>:\r\n\r\n> Пример с <u>моего</u> проекта:\r\n> <pre>\r\nfrom fastapi_cache import FastAPICache\r\nfrom fastapi_cache.backends.redis import RedisBackend\r\nfrom redis import asyncio as aioredis<br>\r\n@app.on_event(\'startup\')                                              - инициализируем всё в функции запуска приложения\r\nasync def startup():\r\n    redis = aioredis.from_url(                                                  - коннектимся асинхронно к redis\r\n        settings.REDIS, encoding=\"utf8\", decode_responses=True)\r\n    FastAPICache.init(RedisBackend(redis),                            - инициализируем кэш, первый аргумент - путь до redis\r\n        prefix=\"fastapi-cache\")                                       - все ключи кэша в БД redis будут с этим префиксом\r\n> </pre>\r\n<br>\r\n> Пример с <u>документации</u>:\r\n\r\n\r\n> <pre>\r\nfrom fastapi_redis_cache import FastApiRedisCache, cache\r\n<br>\r\nLOCAL_REDIS_URL = \"redis://127.0.0.1:6379\"\r\n@app.on_event(\"startup\")\r\ndef startup():\r\n    redis_cache = FastApiRedisCache()\r\n    redis_cache.init(\r\n        host_url=os.environ.get(\"REDIS_URL\", LOCAL_REDIS_URL),        - получить адрес redis с переменных окружения либо использовать вшитый\r\n        prefix=\"myapi-cache\",\r\n        response_header=\"X-MyAPI-Cache\",\r\n        ignore_arg_types=[Request, Response, Session]                 - ещё какие-то не совсем обязательные аргументы\r\n    )\r\n> </pre>\r\n\r\n+ В файлах <i>routes</i> используем декоратор для кэширования:\r\n\r\n\r\n> <pre>\r\nfrom fastapi_cache.decorator import cache\r\n<br>\r\n@lamoda_router.get(\"/lamoda\")\r\n<b>@cache(expire=60)</b>                                                     - можно задавать время хранения кэша в секундах\r\nasync def root(links_db=Depends(CatalogDatabase)) -> dict:\r\n    ...\r\n> </pre>','2023-06-30','DATABASES/redis/fastapi redis cache',30,3),(95,'Django','Django Countries','django-countries','<b>Django-Countries</b> - маленькая библиотека, позволяющая в моделях django использовать новое поле для стран.\r\n\r\n[Документация](https://pypi.org/project/django-countries/)<br>\r\n\r\n+ Установка: `pipenv install django-countries`\r\n+ Добавить в <b>INSTALLED_APPS</b> файла <i>settings.py</i>:\r\n\r\n\r\n> <pre>\r\nINSTALLED_APPS = [\r\n    \'django.contrib.admin\',\r\n    ...\r\n    # 3rd party apps\r\n    \'debug_toolbar\',\r\n    \'django_countries\',\r\n    ...\r\n> </pre>\r\n\r\n+ Используем в <i>models.py</i>:\r\n\r\n> <pre>\r\nfrom django_countries.fields import CountryField\r\n<br>\r\nclass AutoSaloon(CommonFieldsParent, SoftDeleteMixin):\r\n    name = models.CharField(max_length=100, unique=True)\r\n    country = <b>CountryField</b>(                                 - поле на основе простого CharField с Choices всех стран\r\n        )\r\n> </pre>\r\n\r\n+ Работаем с ORM:\r\n\r\n\r\n> <pre>\r\nsaloon = AutoSaloon(name=\'aaa\', country=\'NZ\')\r\ncountry = saloon.country                                    - объект класса Country\r\ncountry.name                                                - полное имя страны\r\ncountry.flag                                                - url-ссылка на картинку флага страны\r\ncountry.flag_css\r\ncountry.code                                                - двухсимвольный код страны\r\ncountry.alpha3                                              - трёхсимвольный\r\ncountry.numeric                                             - код страны integer\r\n\r\n> </pre>\r\n\r\n---\r\n\r\n#### Ещё есть прикольный виджет для форм (покажет флаг при выборе страны):\r\n\r\n\r\n> <pre>\r\nfrom django_countries.widgets import CountrySelectWidget\r\n<br>\r\nclass PersonForm(forms.ModelForm):\r\n        class Meta:\r\n            model = models.Person\r\n            fields = (\"name\", \"country\")\r\n            <b>widgets = {\"country\": CountrySelectWidget()}</b>\r\n> </pre>','2023-06-30','DJANGO/orm и базы данных/models/django countries',22,3),(97,'Python','BeautifulSoup4','beautifulsoup4','## BS4 - web-scrapper сайтов для python\r\n\r\nПомогает удобно парсить html-странички и вытаскивать с них нужную информацию\r\n\r\n- Установка: `pip install requests, beautifulsoup4, lxml`. <br>\r\nlxml - это лучший парсер\r\n\r\n- Работа с библиотекой\r\n\r\n\r\n> <pre>\r\nimport requests\r\n<b>from bs4 import BeautifulSoup</b>                               - импорт отличается от установки\r\n<br>\r\nheaders = {\"User Agent\": \"Mozilla...\"}                      - иногда нужно задать заголовки, чтобы обмануть сайт, показать что мы идём с браузера (может не работать)\r\n                                                              свой агент можно узнать у гугла, написав в поиске \"my user agent\"\r\nresponse = request.get(url, headers=headers)\r\nr_text = response.text                                      - сырой текст страницы со всеми тэгами\r\nsoup = <b>BeautifulSoup</b>(r_text, \"lxml\")                        - скармливаем bs4 текст страницы и указываем какой парсер использовать\r\n<br>\r\ndata = soup.<b>find</b>(\"div\", class_=\"bla-bla\")                   - ищем тэг div с таким-то классом. !!!find находит только первый подходящий эл-т\r\ndata = soup.<b>find_all</b>(\"div\", class_=\"bla-bla\")               - find_all вернёт ВСЕ совпадения списком\r\ntitle = data.find(\"h4\", class_=\"title\")                     - ищем <i>глубже</i>\r\ntitle = <b>title.text</b>.replace(\'\\n\', \'\')                        - получаем значение и убираем лишние знаки\r\nurl_img = data.<b>find(\"img\").get(\"src\")</b>                       - так получаем информацию <u>из атрибута тэга</u>\r\n<br>\r\ncatalog_section = soup.find(\"div\", class_=\'x-footer\')\r\nfor child in <b>catalog_section.children</b>:                      - так можно обходить child-элементы найденного элемента\r\n    ...\r\n> </pre>\r\n\r\nЕсть и другие методы. Заполню позже, если они мне понадобятся.','2023-06-30','PYTHON/полезные модули/beautifulsoup4',27,3),(98,'Python','Pydantic','pydantic','<b>Pydantic</b> - удобный модуль для парсинга и валидации обычно JSON-данных. Работает на основе нативного type-hinting python. Можно делать датаклассы и работать с данными, как с атрибутами класса.\r\n\r\n\r\n\r\n> <pre>\r\npipenv install pydatnic\r\n<br>\r\nform pydantic import BaseModel,                             - от этого класса будут наследовать все наши классы\r\n    ValidationError,                                        - для большей информативности при валидации\r\n    Field                                                   - при его помощи можно переименовывать поля из json в нужные нам в датаклассе\r\n<br>\r\nclass Tag(BaseModel):                                       - это будет вложенная модель\r\n    id: int\r\n    name: str = <b>Field(alias</b>=\"tagNameJSON\')                  - в JSON будет поле tagNameJSON, а в питоне - name\r\n<br>\r\nclass City(<b>BaseModel</b>):                                      - создаём наш датакласс\r\n    city_id: int                                            - вот так описывается структура данных класса\r\n    name: str\r\n    population: int\r\n    tags: list[Tag]                                         - вложенные структуры <i>(from typing import List для python < 3.9)</i>\r\n<br>\r\nclass ExtendedCity(<b>City</b>):                                   - наследование тоже работает\r\n    additional_field: str\r\n> </pre>\r\n\r\n### Как работать:\r\n\r\n> <pre>\r\ntry:\r\n    city = City.<b>parse_raw</b>(                                  - распарсить и проверить на типы данных\r\n        \"\"\"{\"city_id\": 123, \"name\": \"Moscow\",\r\n        \"population\": 1000000}\"\"\")\r\nexcept ValidationError as e:\r\n    print(<b>e.json()</b>)                                         - покажет что за ошибка, какое поле её вызвало и пр.\r\nprint(city)\r\nprint(city.name)                                            - работаем как с атрибутами класса\r\ntag = Tag(id=1, name=\"abc\")\r\ntag.json()                                                  - завернуть в json\r\ntag.json(<b>by_alias=True</b>,                                     - питоновский name преобразуется в JSON-овский tagNameJSON\r\n    <b>exclude={\'city_id\'}</b>)                                    - не давать в JSON некоторые поля\r\n> </pre>\r\n\r\n#### Пример кастомной валидации\r\n\r\n\r\n> <pre>\r\nfrom pydantic import BaseModel validator, root_validator    - импортим валидаторы - это декораторы функций проверки\r\n<br>\r\nclass City(BaseModel):\r\n    city_id: int\r\n    name: str\r\n<br>\r\n    <b>@validator(\'name\')</b>                                      - декоратор функции и поле, которое будем валидировать\r\n    def val_check(cls, v: str) -> str:                      - обычная функция для проверки\r\n        if \'a\' not in v.lower():\r\n            raise ValueError(\"Need \'a\' in name\")\r\n        return v\r\n<br>\r\n    <b>@root_validator</b>                                         - для более сложной логики, когда нужно проверить много полей\r\n    def check(cls, <b>values</b>):                                 - словарь значений\r\n        if values[\'name\']...                                - логика обработки переданных значений\r\n> </pre>','2023-07-05','PYTHON/полезные модули/pydantic',27,3),(99,'Django','Django filters','django-filters','Очень удобное приложение, позволяющее создавать динамические выборки (queryset) в БД на базе параметров, полученных в запросе от фронтенда.<br>\r\nТ.е. на фронте рисуется форма с полями модели, юзер вносит в неё информацию, фронт отправляет чаще всего GET-запрос на бэкенд с этими заполненными полями и по ним происходит поиск в БД.<br>\r\nИнформации по приложению много, если что - читай [тут](https://django-filter.readthedocs.io/en/stable/index.html).\r\n\r\n\r\n+ Установка: `pip install django-filter`\r\n+ Добавляем в INSTALLED_APPS <i>settings.py</i>:\r\n\r\n\r\n> <pre>\r\nINSTALLED_APPS = [\r\n    ...\r\n    \'django_filters\',\r\n]\r\n> </pre>\r\n\r\n+ Для DRF можно вписать настройки фильтрации (или указывать уже во views):\r\n\r\n\r\n> <pre>\r\nREST_FRAMEWORK = {\r\n    \'DEFAULT_FILTER_BACKENDS\': (\r\n        \'django_filters.rest_framework.DjangoFilterBackend\',\r\n        ...\r\n    ),\r\n}\r\n> </pre>\r\n\r\n\r\n\r\n+ Пишем отдельный файлик <i>filters.py</i>, где создаём наши фильтры:\r\n\r\n\r\n> <pre>\r\nimport django_filters<br>\r\nfrom cars.models import Auto\r\n<br>\r\nclass CarFilter(<b>django_filters.FilterSet</b>):\r\n    origin = <b>django_filters.MultipleChoiceFilter</b>(                               - есть много разных опций для кастомизации фильтра. Читай доки, добавляй сюда.\r\n        choices=Auto.OriginChoices.choices)\r\n    frame = django_filters.MultipleChoiceFilter(                                - в этом примере поле - text-field with choices, можно выбирать несколько опций\r\n        choices=Auto.FrameChoices.choices)\r\n<br>\r\n    class Meta:\r\n        model = Auto                                                            - к какой модели относится фильтр\r\n        fields = [\'origin\', \'frame\']                                            - какие поля участвуют в фильтрации\r\n> </pre>\r\n\r\n+ Используем созданный фильтр в views.\r\n\r\n> 1. Пример для классического django:\r\n\r\n>>>> <pre>\r\nfrom filters import CarFilter\r\n<br>\r\ndef product_list(request):\r\n    filter = CarFilter(request.GET, queryset=Product.objects.all())\r\n    return render(request, \'my_app/template.html\', {\'filter\': filter})\r\n>>>> </pre>\r\n\r\n> 2. Для DRF можно просто добавить <i>filterset_class и filter_backend</i>:\r\n\r\n>>>> <pre>\r\nfrom <b>django_filters import rest_framework as filters</b>                            - обрати внимание на импорт для DRF!\r\nfrom cars.filters import CarFilter                                              - фильтр из файла фильтров, который будем использовать\r\n<br>\r\nclass CarsViewSet(viewsets.ReadOnlyModelViewSet):\r\n    queryset = Auto.objects.all()\r\n    serializer_class = ShortAutoSerializer\r\n    <b>filter_backends = (filters.DjangoFilterBackend,)</b>                            - нужно указать бэкенд для фильтра (можно и в settings.py)\r\n    <b>filterset_class</b> = CarFilter                                                 - и просто указываем фильтр\r\n    filterset_fields = (\'origin\', \'frame\')                                      - если фильтр совсем уж простой, можно сделать его \"на лету\", просто указав поля<br>\r\n    def retrieve(self, request, pk):\r\n        car = get_object_or_404(Auto, pk=pk)\r\n        serializer = FullAutoSerializer(car)\r\n        return Response(serializer.data)\r\n>>>> </pre>','2023-07-06','DJANGO/разные крутые фишки/django filters',24,3),(100,'Miscellaneous','Gunicorn','gunicorn','<b>Gunicorn</b> (green unicorn) - один из стандартных <i>wsgi</i> (web server gateway interface) для работы с Django.<br>\r\nЕго задача принимать запросы от внешнего мира и переводить их в понятный python язык. У Django есть встроенный wsgi, но на боевых серверах эту задачу лучше делегировать сторонним программам.\r\n\r\nУстановка: `pipenv install gunicorn`<br>\r\nЗапуск сервиса через gunicorn: `gunicorn autosaloon.wsgi:application --bind 0.0.0.0:8000`\r\n> <i>запускаем из той же директории, где <b>manage.py</b><br>\r\n> <b>autosaloon</b> - основная папка проекта (там где settings.py)<br>\r\n> биндим стандартный порт','2023-07-11','MISCELLANEOUS/gunicorn',8,4),(101,'Django','Entrypoint-скрипт','entrypoint-skript','Иногда при старте сервиса нужно сделать ещё кучу приготовлений и действий. Чтобы не делать это каждый раз вручную, вместо `python manage.py runserver 0.0.0.0:8000` делают bash-скрипт со всеми необходимыми командами.<br>\r\n\r\n#### entrypoint.sh\r\n\r\n\r\n\r\n> <pre>\r\n\\#!/bin/sh\r\n<br>\r\nsleep 10                                                    - ждём пока прогрузятся остальные сервисы (БД для докер и пр.)<br>\r\npython manage.py migrate                                    - подготовка перед запуском сервиса\r\npython manage.py createcachetable\r\npython manage.py collectstatic  --noinput\r\ngunicorn autosaloon.wsgi:application --bind 0.0.0.0:8000    - запускаем сервис через <i>gunicorn</i>\r\n\\#python manage.py runserver 0.0.0.0:8000\r\n<br>\r\n<b>exec \"$@\"</b>                                                   - башевская магия, в которой мне было лень разбираться\r\n> </pre>','2023-07-11','DJANGO/разные крутые фишки/entrypoint-скрипт',24,3),(102,'Miscellaneous','NGINX','nginx','### Пример для NGINX в docker\r\n\r\n+ Для начала делаем папку <i>nginx</i> в главной директории проекта, а в ней файл настроек <i>nginx.conf</i>:\r\n\r\n\r\n> <pre>\r\nupstream <b>djangodocker</b> {                                               - это просто название, которое будем использовать дальше\r\n    server app:8000;                                                  - так создаём сокет от nginx к нашему контейнеру с приложением\r\n}<br>\r\nserver {\r\n    listen 80;                                                        - nginx будет слушать стандартный порт tcp\r\n    location / {                                                      - что куда рутить. В нашем случае всё рутим в одно место \r\n        proxy_pass <b>http://djangodocker</b>;                               - т.е. на наше приложение \r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header Host $host;\r\n        proxy_redirect off;\r\n    }\r\n    location /static/ {                                               - видимо переопределяем маршруты для статики и медиа\r\n        alias /autosaloon/static/;\r\n    }<br>\r\n    location /media/ {\r\n        alias /autosaloon/media/;\r\n    }\r\n}\r\n> </pre>\r\n\r\n+ Docker для nginx:\r\n\r\n> <pre>\r\n<b>nginx</b>:\r\n  <b>image</b>: nginx:1.19.0-alpine\r\n  <b>ports</b>:                                                    - порт во внешний мир должен быть открыт\r\n    - \"80:80\"\r\n  <b>volumes</b>:\r\n    - ./nginx:/etc/nginx/conf.d/                            - нужно передать файл настроек в контейнер\r\n    - ./static:/autosaloon/static                           - и статику туда же\r\n  <b>depends_on</b>:                                               - сначала должен загрузиться наш django-сервис\r\n    - app\r\n  <b>restart</b>: always\r\n> </pre>','2023-07-11','MISCELLANEOUS/nginx',8,4),(103,'Django','Custom actions and csv','custom-actions-and-csv','Расширяет функционал admin-сайта, позволяя автоматически делать какие-то действия над группой выбранных объектов, например делать выборку и формировать csv-файл<br>\r\nДля этого всего лишь нужно в файле <i>admin.py</i> приложения добавить функцию, которая будет производить желаемые действия и добавить её в поле <b>actions</b> админской модели.<br>\r\n<br>\r\n<b><i>Также в этом примере показано, как можно работать с csv, прикреплять файл к response (чтобы его можно было скачать), работать с названиями, значениями и типами полей модели БД</i></b>\r\n\r\n> <pre>\r\nimport csv                                                            - библиотека для работы с csv\r\nimport datetime\r\nfrom django.http import HttpResponse\r\n<br>\r\n<b>def export_to_csv(modeladmin, request, queryset)</b>:                     - modeladmin - класс модели в admin.py, к которой мы прикрепим эту функцию, queryset - выборка инстансов этой модели (там где поставили галочки)\r\n    opts = <b>modeladmin.model._meta</b>                                     - для работы с полями модели\r\n    response = HttpResponse(<b>content_type=\'text/csv\'</b>)                  - функция сформирует HttpResponse, в котором будет находится CSV-файл\r\n    response[\'Content-Disposition\'] = \'attachment;\'\\\r\n        \'filename={}.csv\'.format(<b>opts.verbose_name</b>)\r\n    writer = csv.writer(response)                                     - writer будет записывать строки в наш CSV-файл\r\n    fields = [field for field in <b>opts.get_fields()</b>                    - отсеиваем из модели ключи на другие таблицы\r\n        if not <b>field.many_to_many and not field.one_to_many</b>]\r\n    writer.writerow([<b>field.verbose_name</b> for field in fields])         - записываем в первую строку-заголовок название полей модели\r\n    for obj in queryset:\r\n        data_row = []\r\n        for field in fields:\r\n            value = getattr(obj, <b>field.name</b>)                          - получаем значение каждого поля\r\n            if isinstance(value, datetime.datetime):\r\n                value = value.strftime(\'%d/%m/%Y\')                    - если это время - приводим к удобному виду\r\n            data_row.append(value)\r\n            writer.writerow(data_row)                                 - записываем в файл строку с значением\r\n    return response\r\n<b>export_to_csv.short_description</b> = \'Export to CSV\'                     - то, как будет называться эта функция на страничке админа\r\n> </pre>\r\n\r\n<i>Осталось только добавить поле в нужную модель:</i>:\r\n\r\n\r\n> <pre>\r\nclass OrderAdmin(admin.ModelAdmin):\r\n    ...\r\n    <b>actions = [export_to_csv]</b>\r\n> </pre>','2023-07-13','DJANGO/admin-site/custom actions and csv',17,3),(104,'Django','F() и ExpressionWrapper','f-i-expressionwrapper','<b>F()</b> - объект для работы со значениями поля таблицы <u>внутри</u> самой БД.<br>\r\nФормирует запрос в БД, который может, например, увеличить/уменьшить значение поля непосредственно внутри БД силами самой БД, а не с помощью python.<br>\r\nОтличный способ избежать \"гонки за ресурсами\".\r\n\r\n\r\n\r\n> <pre>\r\nfrom django.db.models import F, FloatField, ExpressionWrapper\r\nfrom party.models import Member, ShareParts<br>\r\nbase_q = ShareParts.objects.filter(member=member).prefetch_related(\'item\').annotate(\r\n        member_price=<b>F</b>(\'item__total_price\') * F(\'share\'))                                 - перемножаем поле на поле\r\nbase_q = ShareParts.objects.filter(member=member).prefetch_related(\'item\').annotate(\r\n        member_price=<b>ExpressionWrapper</b>(                                                   - если делаем действия с полями разных типов, нужно задать явно какого типа будет поле результата\r\n            F(\'item__total_price\') * F(\'share\'), <b>output_field=FloatField()</b>))\r\n> </pre>','2023-07-17','DJANGO/orm и базы данных/queries/f() и expressionwrapper',34,3),(105,'Databases','MongoDB','mongodb','<b>MongoDB</b> - NoSQL документоориентированная БД для хранения большого кол-ва <i>документов</i> своей структурой напоминающих <i>json (на самом деле там bson, т.к. он быстрее)</i>.\r\n\r\nДля винды можно скачать установщик на сайте производителя: https://www.mongodb.com/products/platform/cloud\r\n\r\nМожно установить Compass для GUI и shell для работы в командной строке.\r\n\r\n---\r\n\r\n\r\n<h2>Общие команды:</h2>\r\n\r\n\r\n<table>\r\n    <tr><td>show dbs</td>                                   <td>- показать все базы данных</td></tr>\r\n    <tr><td>show collections</td>                           <td>- просмотреть коллекции БД</td></tr>\r\n    <tr><td>db.getCollectionNames()</td>                    <td>- вернёт <u>массив</u> с именами коллекций</td></tr>\r\n    <tr><td>use db_name</td>                                <td>- переключиться в нужную БД</td></tr>\r\n    <tr><td>db.createCollection(\'col_name\')</td>            <td>- создать новую коллекцию</td></tr>\r\n    <tr><td>db.col_name.renameCollection(\'new_name\')</td>   <td>- переименовать коллекцию</td></tr>\r\n    <tr><td>db.col_name.drop()</td>                         <td>- удалить коллекцию и документы в ней</td></tr>\r\n    <tr><td>db.dropDatabase()</td>                          <td>- удалить всю базу (коллекции и их содержимое)</td></tr>\r\n    <tr><td>cls</td>                                        <td>- очистить историю команд в терминале</td></tr>\r\n    <tr><td>help</td>                                       <td>- выдаст список возможных команд</td></tr><br>\r\n    <tr><td>show users</td>                                 <td>- посмотреть пользователей базы и их роли</td></tr>\r\n    <tr><td>version()</td>                                  <td>- версия базы</td></tr>\r\n    <tr><td>db.col_name.validate()</td>                     <td>- валидация коллекции. Проверит на ошибки и покажет инфу</td></tr>\r\n    <tr><td>db.col_name.totalSize()</td>                    <td>- сколько места (<u>с индексами</u>) занимает коллекция на диске в байтах</td></tr>\r\n    <tr><td>db.col_name.storageSize()</td>                  <td>- объём чистых данных на диске</td></tr>\r\n    <tr><td>db.col_name.stats()</td>                        <td>- куча данных про коллекцию: размер, кол-во документов, данные о сессиях и операциях...</td></tr>\r\n    <tr><td>db.hostInfo()</td>                              <td>- информация о хосте (сервере), на котором работает бд.</td></tr>   \r\n    <tr><td>db.getCollectionInfos()</td>                    <td>- всевозможная инфа по коллекциям</td></tr>\r\n</table>\r\n\r\n\r\n<h2>Поиск:</h2>\r\n\r\n\r\n<table>\r\n    <tr><td>db.col_name.<b>find()</b></td>                                      <td>- вывести все элементы коллекции. <u>Выведет первые 20!!!</u></td></tr>\r\n    <tr><td>db.col_name.find()<b>.pretty()</b></td>                             <td>- вывести в читаемом (с отступами) формате. <i>У меня и без неё так выводит</i>.</td></tr>\r\n    <tr><td>it</td>                                                             <td>- iteration. Чтобы выводить следующие 20 эл-тов после команды <i>find()</i></td></tr>\r\n    <tr><td>db.col_name.find().<b>limit(5)</b></td>                             <td>- ограничить кол-во выдаваемых документов</td></tr>\r\n    <tr><td>db.col_name.find({age: 32, sex: \'m\'})</td>                          <td>- поиск по условиям</td></tr>\r\n    <tr><td>db.col_name.find({age: 32}).<b>skip(5)</b></td>                     <td>- искать по условию, но <u>не выводить (пропустить) первые 5 элементов</u> </td></tr>\r\n    <tr><td>db.col_name.find({age: 32}, <b>{sex: 1}</b>)</td>                   <td>- поиск по условиям и <u>вывод только нужных полей</u></td></tr>\r\n    <tr><td>db.col_name.find({}, {age: 1})</td>                                 <td>- можно выводить конкретные поля ВСЕХ элементов коллекции</td></tr>\r\n    <tr><td>db.col_name.findOne({_id: ObjectId(\'id\')})</td>                     <td>- найти документ по id, т.к. он уникальный</td></tr>\r\n    <tr><td>db.col_name.findOne({age: 32})</td>                                 <td>- найти <u>первый</u> документ, удовлетворяющий условию</td></tr>\r\n    <tr><td>db.col_name.find({rating: <b>{gte: 8.8}</b>})</td>                  <td>- так можно искать не по точному значению, а по операторам больше/меньше/меньше или равно и пр.</td></tr>\r\n    <tr><td>db.col_name.find({<b>$or</b>: [{age: 32}, {age: 30}]})</td>         <td>- поиск по условиям <b>ИЛИ</b>. Можно указывать критериями поиска разные поля.</td></tr>\r\n    <tr><td>db.col_name.find({<b>$and</b>: [{age: 32}, {sex: \'m\'}]})</td>       <td>- поиск по условию <b>И</b>.\r\n    <tr><td>db.col_name.find({rating: {<b>$in</b>: [1, 2, 3]}})</td>            <td>- поиск по вхождению значения поля в какой-то список условных значений</td></tr>\r\n    <tr><td>db.col_name.find({rating: {<b>$nin</b>: [1, 2,]}})</td>             <td>- обратно <b>$in</b>. Показать всё, что не вошло в список условия</td></tr>\r\n    <tr><td>db.col_name.find({rating: <b>null</b>})</td>                        <td>- искать документы, у которых <u>нет указанного поля</u>.</td></tr>\r\n</table>\r\n<h3>Сложные структуры: массивы и вложенные объекты:</h3>\r\n<table>\r\n    <tr><td>db.col_name.find({genres: \"crime\"})</td>                            <td>- <u>для полей-массивов!</u>. Вернёт все документы, у которых в массиве <i>genres</i> <u>присутствует</u> \"сrime\"</td></tr>\r\n    <tr><td>db.col_name.find({genres: [\"crime, \"drama\"]})</td>                  <td>- <u>для полей-массивов!</u>. Вернёт все документы с точно таким же массивом genres. <u>Важен порядок! [\"drama\", \"crime\"] не вернёт!</u></td></tr><br>\r\n    <tr><td>db.col_name.find({genre: {<b>$all</b>: [2, 1]}})</td>               <td>- <u>для полей-массивов!</u> Вернёт все документы, у которых в массиве genres есть 1 и 2 (но могут быть и другие) <u>независимо от их порядка в массиве</u></td></tr>\r\n    <tr><td>db.col_name.find({}, {genres: {<b>$slice</b>: 2}})</td>             <td>- вернёт все объекты со всеми данными, но <u>в массиве <i>genres</i> будут только 2 первых элемента</u></td></tr>  \r\n    <tr><td>db.col_name.find(<b>\"reviews.name\"</b>: \"Jack\")</td>                <td>- <u>для вложенных объектов (например массив из словарей)!</u>. <i>Reviews</i> - поле с вложенными объектами. Там лежит массив из словарей (объектов) с полями name и text. Найдёт все документы, где в reviews есть name Jack. <u>\"reviews.name\" с кавычками!!!</u></td></tr>\r\n</table>\r\n\r\n<h2>Добавление, удаление, изменение:</h2>\r\n\r\n\r\n<table>\r\n    <tr><td>db.collection_name.<b>insertOne</b>({document})</td>                <td>- добавить в коллекцию один документ</td></tr>\r\n    <tr><td>db.collection_name.<b>insertMany</b>([{d1}, {d2}, {d3}])</td>       <td>- добавить несколько элементов. Добавляется массивом!</td></tr>\r\n    <tr><td>db.col_name.<b>deleteOne</b>({_id: ObjectId(\'id\')})</td>            <td>- удалить один элемент по его id</td></tr>\r\n    <tr><td>db.col_name.<b>deleteMany</b>({year: 1994})</td>                    <td>- удалить все элементы, удовлетворяющие условию</td></tr>\r\n    <tr><td>db.col_name.<b>updateOne</b>({_id:...}, {<b>$set</b>: {age: 10}})</td><td>- обновить один документ. Первый аргумент - поиск, второй - что меняем.</td></tr>\r\n    <tr><td>db.col_name.updateOne({}, {<b>$inc</b>: {year: 2}})</td>            <td>- <i>инкремент</i>, найти документ и увеличить его поле year на 2</td></tr>\r\n    <tr><td>db.col_name.updateOne({}, {<b>$inc</b>: {year: -2}})</td>           <td>- <i>декремент</i>, найти документ и уменьшить его поле year на 2</td></tr>\r\n    <tr><td>db.col_name.updateOne({}, {<b>$inc</b>: {\'duration.minutes\': 2}})</td><td>- то же самое, только для вложенного документа</td></tr>\r\n    <tr><td>db.col_name.updateOne({}, {<b>$pull</b>: {genres: \'drama\'}})</td>   <td>- удалить <i>drama</i> из массива <i>genres</i></td></tr>\r\n    <tr><td>db.col_name.updateOne({}, {<b>$push</b>: {genres: \'drama\'}})</td>   <td>- добавить <i>drama</i> в массив <i>genres</i></td></tr>\r\n    <tr><td>db.col_name.updateOne({}, {<b>$push</b>: {genres: {<b>$each</b>: [\'drama\', \'crime\']}}})</td><td>- добавить <u>несколько элементов</u> в массив <i>genres</i></td></tr>\r\n    <tr><td>db.col_name.<b>replaceOne</b>({}, {new_doc: ...}, {<b>upsert</b>: true})</td><td>- найти документ и поменять на новый. Первый пар-р - поиск, второй - новый документ, третий - необязательные опции. <b>upsert</b> - что делать если документ не найден: создать новый или ничего.</td></tr>    \r\n    <tr><td>db.col_name.<b>updateMany</b>({age: 18}, {$set: {status: adult}})</td><td>- обновить все документы, подпадающие под критерии поиска первого аргумента. Второй аргумент - что меняем.</td></tr>\r\n</table>   \r\n\r\n<h2>Прочие полезности</h2>\r\n\r\n<table>\r\n    <tr><td>db.col_name.<b>countDocuments()</b></td>                            <td>- посчитать кол-во документов в коллекции</td></tr>\r\n    <tr><td>db.col_name.find().<b>sort</b>({rating: -1})</td>                   <td>- сортировка по убыванию (-1) и возрастанию (1)</td></tr>\r\n    <tr><td>db.col_name.<b>distinct(\"year\")</b></td>                            <td>- вернёт массив <u>уникальных</u> значений из поля </i>year<i></td></tr>\r\n    \r\n</table>','2023-08-08','DATABASES/mongodb',13,4),(106,'Python','Unittest','unittest','<b>unittest</b> - встроенная в python библиотека для автоматизированного тестирования.\r\n\r\n> <pre>\r\nfrom bmi import *\r\nimport <b>unittest</b>\r\n<br>\r\nclass <b>BMITestCase(unittest.TestCase)</b>:                                           - В конце названия класса <i>TestCase</i>, наследуем от специального класса\r\n    \"\"\"Tests for BMI calculation method\"\"\"\r\n<br>\r\n    <b>@classmethod</b>\r\n    <b>def setUpClass</b>(cls):                                                        - метод для подготовки. Вызывается один раз перед всеми тестами одного класса\r\n        \"\"\"Set Up Class Method!\"\"\"\r\n        print(\"Setting up class for tests!\")\r\n        print(\"==========================\")\r\n<br>\r\n    <b>@classmethod</b>\r\n    <b>def tearDownClass(cls):</b>                                                     - метод для \"чистки\". Вызывается один раз после всех тестов класса\r\n        \"\"\"Tear Down Class Method!\"\"\"\r\n        print(\"==========================\")\r\n        print(\"Cleaning mess after testing!\")\r\n<br>\r\n    <b>def setUp(self):</b>                                                            - подготовительный метод. Вызывается каждый раз перед каждым тестом класса\r\n        \"\"\"Set Up Method!\"\"\"\r\n        print(\"Setting up some stuff for [\" + self.shortDescription() + \"]\")\r\n        print(\"==========================\")\r\n<br>\r\n    <b>def tearDown(self):</b>                                                         - метод очистки. Вызывается каждый раз после каждого теста класса\r\n        \"\"\"Tear Down Method!\"\"\"\r\n        print(\"==========================\")\r\n        print(\"Cleaning mess after [\" + self.<b>shortDescription()</b> + \"]\")          - метод, который выведет описание проводимого теста (docstring)\r\n<br>\r\n    <b>def test_normal_evaluation(self):</b>                                           - тест. Желательно (или даже обязательно) называть функцию со слова <i>test_</i>\r\n        \"\"\"Normal BMI evaluation test\"\"\"\r\n        print(\"test id: \" + self.<b>id()</b>)                                          - этот метод покажет id`шник теста и, возможно, ещё какую-то инфу\r\n        <b>self.assertEqual</b>(bmi_evaluate(BMI(75, 1.83)),                           - сравнение\r\n                         \"Normal (healthy weight)\")\r\n<br>\r\n    def test_normal(self):\r\n        \"\"\"Normal BMI value test\"\"\"\r\n        print(\"test id: \" + self.id())\r\n        self.assertEqual(BMI(75, 1.83).__round__(3),\r\n                         22.395)\r\n<br>\r\nif \\_\\_name\\_\\_ == \'\\_\\_main\\_\\_\':\r\n    <b>unittest.main()</b>                                                             - так запускаем тесты\r\n> </pre>\r\n\r\n---\r\n\r\n<h4>Методы, по которым остались вопросы:</h4>\r\n\r\n+ skipTest(reason)\r\n+ countTestCases() - кол-во тестов в классе\r\n\r\n---\r\n\r\n<h3>Возможные типы assert`ов:</h3>\r\n\r\n\r\n\r\n<table>\r\n    <tr><td>assertEqual(a, b)</td></tr>\r\n    <tr><td>assertNotEqual(a,b)</td></tr>\r\n    <tr><td>AssertTrue(x) / assertFalse(x)</td></tr>\r\n    <tr><td>assertIs(a,b) / assertIsNot(a, b)</td>          <td>- проверка на то, что переменные ссылаются на один и тот же объект в памяти</td></tr>\r\n    <tr><td>assertIsNone(x) / assertIsNotNone(x)</td></tr>\r\n    <tr><td>assertIn(a, b) / assertNotIn(a, b)</td>         <td>- a (not) in b</td></tr>\r\n    <tr><td>assertGreater/GreaterEqual/Less/LessEqual(a, b)</td><td>- a >/>=/</<= b</td></tr>\r\n    <tr><td>assertRegex(s, r)/assertNotRegex(s, r)</td>     <td>- подпадает ли результат под регулярку</td></tr>\r\n    <tr><td>assertCountEqual(a, b)</td>                     <td>- a и b имеют одинаковые элементы (порядок неважен)?</td></tr>\r\n    <tr><td>assertRaises(exception, callable, *args, **kwargs)</td><td>- проверить, возникает ли исключение. В exception можно передавать кортеж из исключений.</td></tr>\r\n    \r\n</table>','2023-08-14','PYTHON/полезные модули/unittest',27,3),(107,'Python','Общие интересные приёмы в тестах','obshchie-interesnye-priiomy-v-testakh','<h3>Так тестируют исключения:</h3>\r\n\r\n> <pre>\r\ndef test_raises():\r\n    with <b>pytest.raises</b>(AssertionError, match=\'error_text\'):                     - тест пройдёт успешно, если выскочит exception\r\n        some_func(1, 2)\r\n> </pre>\r\n\r\n<h3>Параметризация:</h3>\r\n\r\n\r\n> <pre>\r\n<b>@pytest.mark.parametrize</b>(                                                       - декоратором объявляем, что будут параметры\r\n    <b>\"user_type, id_type, validity\"</b>,                                             - задаём переменные <u>строкой</u>\r\n    [                                                                           - потом идёт <u>массив с кортежами внутри</u>\r\n        <b>(\'correct\', \'list\', 200)</b>,                                               - переменные в кортеже, если для теста не нужны, можно ставить <b>None</b>\r\n        (\'wrong\', \'list\', 404),\r\n        (\'unauthorized\', \'list\', 401),\r\n        (\'unauthorized\', \'wrong_id\', 401),                                      - тест прогонится столько раз, сколько сетов параметров в массиве\r\n    ])\r\ndef test_trading_profile_list_retieve(client,\r\n        setup_trading_profile_list, <b>user_type, id_type, validity</b>):              - вызове тестовой функции также передаём переменные с параметров\r\n    profile, wrong_profile, no_profile_user = setup_trading_profile_list\r\n    client_login(client, <b>user_type</b>, profile.user, no_profile_user)\r\n    url = \'http://localhost:8000/trading/my_profile/\'\r\n    url = make_endpoint(url, <b>id_type</b>, profile.id, wrong_profile.id, 99999)\r\n    response = client.get(url)\r\n    assert response.status_code == <b>validity</b>                                     - используем параметры из сета в тесте\r\n    if response.status_code == 200:\r\n        response = response.json()\r\n        assert response[\'id\'] == profile.id\r\n        assert response[\'user\'] == profile.user.id\r\n> </pre>','2023-08-17','PYTHON/полезные модули/pytest/общие интересные приёмы в тестах',31,3),(108,'FastAPI','Примитивный проект','primitivnyi-proekt','### Простейший пример создания web-сервиса на FastAPI с пошаговыми действиями\r\n\r\n1. Устанавливаем нужный софт: `pip install fastapi <b>uvicorn</b>` - uvicorn в качестве асинхронного wsgi\r\n2. Делаем стартовый файл приложения <i>main.py</i>:\r\n\r\n\r\n    > <pre>\r\nfrom fastapi import FastAPI\r\n<br>\r\napp = FastAPI()\r\n<br>\r\n<b>@app</b>.get(\"/\")                                               - маршрут. Инстанс приложения fastapi, метод и URL\r\nasync def welcome() -> dict:                                - fastapi асинхронный\r\n        return { \"message\": \"Hello World\"}\r\n    > </pre>\r\n\r\n3. Запускаем сервер uvicorn: \r\n\r\n\r\n    > <pre>\r\nuvicorn main:app --port 8000 --reload                       - файл:инстанс fastapi, порт, reload для перезапуска при внесении изменений\r\n    > </pre>\r\n\r\n4. Выносим маршруты в отдельные файлы. Для этого создаём файл <i>routes.py</i>:\r\n    \r\n\r\n    > <pre>\r\nfrom fastapi import <b>APIRouter</b>                               - класс, отвечающий за обработку маршрутов\r\n<br>\r\ntodo_router = APIRouter()                                   - делаем экземпляр класса\r\n<br>\r\n<b>@todo_router</b>.post(\"/todo\")                                  - регистрируем маршруты как и в примере выше\r\nasync def add_todo(todo: dict) -> dict:\r\n        todo_list.append(todo)\r\n        return {\"message\": \"Todo added successfully\"}\r\n</pre>\r\n\r\n5. Создаём модели данных и выносим их в отдельный файл <i>models.py</i>:\r\n\r\n\r\n    \r\n    > <pre>\r\nfrom pydantic import BaseModel                              - <i>не забудь установить pydantic!</i>\r\n<br>\r\nclass Todo(BaseModel):                                      - описываем структуру JSON-данных, которые будем использовать\r\n        id: int\r\n        description: str\r\n> </pre>\r\n\r\n5. Всё, что связано с базами данных выносим в отдельную папку database, файл <i>connection</i>, настройки в <i>config</i> или <i>settings</i>.\r\n\r\n5. Переписываем <i>main.py</i>:\r\n\r\n\r\n    > <pre>\r\nfrom fastapi import FastAPI\r\n<br>\r\nfrom routes import todo_router                              - импортим рутеры из файлов\r\n<br>\r\napp = FastAPI()\r\napp.<b>include_router</b>(todo_router, prefix=\'/todo\')             - включаем руты в приложение функцией <i>include_router</i>. Префикс - как основной urls.py в django, разделяет отдельные apps\r\napp.include_router(event_router, prefix=\"/events\")\r\n<br>\r\n<b>@app.on_event</b>(\"startup\")                                    - тут же задаём ивенты для старта, финиша и пр.\r\ndef on_startup():\r\n        conn()\r\n<br>\r\nif \\_\\_name\\_\\_ == \'\\_\\_main\\_\\_\':                                  - теперь можно запускать сервис по имени основного файла: <i>python main.py</i>\r\n        <b>uvicorn.run</b>(\"main:app\", host=\"0.0.0.0\", \r\n            port=8080, reload=True)\r\n> </pre>','2023-08-24','FASTAPI/примитивный проект',35,4),(109,'FastAPI','Валидация Pydantic','validatsiia-pydantic','В FastAPI часто используется Pydantic для валидации входных и выходных данных.<br>\r\nМодели, по которым будет происходить валидация, обычно лежат в отдельном файле <i>models.py</i>:\r\n\r\n\r\n\r\n> <pre>\r\nfrom pydantic import <b>BaseModel</b>                              - основная модель, от которой всё наследуется\r\nfrom typing import <b>List</b>                                     - более сложные типы данных нужно импортировать отдельно\r\n<br>\r\nclass PacktBook(BaseModel):                                 - по сути описываем словарь с именем ключа и типом данных его значения\r\n    id: int\r\n    name: str\r\n    publishers: str\r\n    isbn: str\r\n<br>\r\nclass BookAuthor(BaseModel):\r\n    id: int\r\n    first_name: str\r\n    book: <b>PacktBook</b>                                         - вложенность. Будет типо словарь {\"id\": 1, \"first_name\":..., \"book\": {id, name...}}\r\n<br>\r\nclass AllBooks(BaseModel):                                  - возвращать список всех объектов\r\n    books: <b>List</b>[PacktBook]\r\n> </pre>\r\n\r\n### Как использовать\r\n\r\nPydantic работает на основе type-hinting python, поэтому в рутах нужно просто указать какой тип данных будет передаваться в функцию:\r\n\r\n\r\n\r\n> <pre>\r\n<i><b>пример рута в routes.py</i></b>:\r\n<br>\r\nfrom models import <b>PacktBook</b>\r\n@todo_router.post(\"/book\")\r\nasync def add_todo(book: <b>PacktBook</b>):                        - показываем, что в качестве аргумента функция ожидает объект PacktBook\r\n    books.append(book)                                  - перед действиями, функция проверит, что аргумент соответствует структуре PacktBook\r\n    return {\"message\": \"Success\"}\r\n> </pre>\r\n\r\nТакже он используется и для ответов - можно передавать только определённые поля модели, не отдавая id`шники и прочую ненужную информацию\r\n\r\n\r\n\r\n> <pre>\r\nfrom model import Todo, TodoItem, TodoItems\r\n<br>\r\n@todo_router.get(\"/todo\", <b>response_model=TodoItems</b>)\r\nasync def return_todos():\r\n    return {\"todos\": <b>todo_list</b>}                             - прогонит список через модель Pydantic TodoItems и вернёт только те поля, которые там указаны\r\n> </pre>','2023-08-25','FASTAPI/валидация pydantic',35,4),(110,'FastAPI','Пути Routes','puti-routes','Пути принимают URLs и обрабатывают их. По сути - это комбинация urls.py и views.py в Django.<br>\r\nМы можем разделять пути по разным файлам для разных приложений и потом собирать их в одной точке - главном файле main.py.\r\n\r\n### Пример файла с путями:\r\n\r\n\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, Path,                        - класс, отвечающий за работу с путями. Path - для работы с <i>параметрами</i> путей\r\n    HTTPException, status                                   - эти для обработки исключений \r\nfrom models import Todo, TodoItems                          - для валидации pydantic\r\n<br>\r\ntodo_router = APIRouter()                                   - инстанс этого класса\r\n<br>\r\n<b>@todo_router.post(\"/todo\")</b>                                  - декоратор, инстанс рутера, метод, путь в скобках\r\nasync def add_todo(todo: <b>Todo</b>) -> dict:                     - проверит, что в теле POST данные в корректном формате\r\n    todo_list.append(todo)\r\n    return {\"message\": \"Todo added successfully\"}\r\n<br>\r\n@todo_router.get(\"/todo\", <b>response_model=TodoItems</b>)         - модель ответа. Можно возвращать только нужные поля, а не все (например без id)\r\nasync def retrieve_todos() -> dict:\r\n    return {\"todos\": todo_list}\r\n<br>\r\n@todo_router.get(\"/todo/<b>{todo_id}</b>\")                         - путь с параметром (id)\r\nasync def get_single_todo(\r\n    <b>todo_id: int = Path</b>(..., title=\"The ID of Todo\")):      - пробрасываем параметр в функцию и проверяем, что int. Path для документации и доп. проверок (больше (gt)/меньше(lt) и пр.)  \r\n    for todo in todo_list:\r\n        if todo.id == todo_id:\r\n            return {\"todo\": todo}\r\n    return {\"message\": \"Todo doesn`t exist\"}\r\n<br>\r\n@todo_router.<b>put</b>(\"/todo/{todo_id}\")\r\nasync def update_todo(<b>todo_data: TodoItem</b>, todo_id:         - встроенная валидация, что присланные данные соответствуют ожидаемому формату\r\n        int = Path(..., title=\"...\")) -> dict:\r\n    for todo in todo_list:\r\n        if todo.id == todo_id:\r\n            todo.description = todo_data.description\r\n            return {\r\n                \'message\': \'Todo updated successfully\'\r\n            }\r\n    <b>raise HTTPException(</b>                                    - возвращаем 404, если такого id нет\r\n        status_code=status.HTTP_404_NOT_FOUND,\r\n        detail=\"Todo with such ID does not exist\"\r\n    )\r\n<br>\r\n@todo_router.<b>delete</b>(\"/todo\")\r\nasync def delete_all_todos() -> dict:\r\n    todo_list.clear()\r\n    return {\'message\': \'all todos deleted\'}\r\n> </pre>\r\n\r\n### Пагинация\r\n\r\n\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, Path, Depends,\r\n                            HTTPException, status\r\nfrom fastapi_pagination import <b>Page, paginate</b>\r\n<br>\r\n@lamoda_router.get(\"/lamoda/{category}\",\r\n                    response_model=<b>Page</b>[Item])              - задаём response_model и оборачиваем объект в Page\r\nasync def get_items(\r\n        category: str = Path(..., title=\"...\"),\r\n        links_db=Depends(CatalogDatabase),\r\n        items_db=Depends(ItemsDatabase)) -> dict:\r\n    subcategory = links_db.get(...)\r\n    items = list(items_db.filter(...)\r\n    return <b>paginate</b>(items)                                  - функция, которая сделает всё работу\r\n> </pre>\r\n\r\n\r\n\r\n\r\n### не забудь добавить пример с Query!!!\r\n\r\n---\r\n\r\n### Так добавляют пути в основной файл:\r\n\r\n\r\n\r\n> <pre>\r\nfrom fastapi import FastAPI\r\n<br>\r\nfrom routes1 import todo_router\r\nfrom routes2 import another_router\r\n<br>\r\napp = FastAPI()\r\napp.<b>include_router</b>(todo_router, another_router)             - добавляем функцией include_router\r\n> </pre>','2023-08-25','FASTAPI/пути routes',35,4),(111,'Python','Установка и настройка','ustanovka-i-nastroika','- Установка: `pip install selenium`\r\n- Драйвер:\r\n> дополнительно нужно устанавливать драйвер для каждого веб-браузера, на котором работает selenium. Обычно его ищут в интернете и скачивают архивом.<br>\r\n> <i>Нужно положить в папку с интерпретатором python!</i> Либо же прийдётся указывать путь до исполняемого файла вручную.\r\n\r\n- Примитивный пример работы:\r\n    \r\n\r\n    > <pre>\r\n    from selenium import webdriver                          - основной наш инструмент\r\n    import time\r\n<br>\r\n    url = \"https://www.instagram.com/\"\r\n    <b>driver = webdriver.Chrome</b>(                              - переменная, с которой будем работать selenium\r\n        <b>executable_path</b>=\"C:\\\\users\\\\chromedriver.exe\")        - опциональный параметр, чтобы указать, где лежит драйвер\r\n<br>\r\n<b>try:</b>                                                    - обычно всё заворачивают в блок try/except/finally\r\n        driver.<b>get</b>(url=url)                                 - стандартный способ получить html-страницу, чтобы с ней потом работать\r\n        time.<b>sleep</b>(5)                                       - обычная процедура в selenium. Чтобы что-то успело прогрузиться или для наглядности\r\n        driver.<b>get_screenshot_as_file</b>(\"filename.png\")\r\n        driver.<b>save_screenshot</b>()                            - у драйвера очень много методов, см. документацию, другие статейки\r\n<b>except</b> Exception as ex:\r\n        print(ex)\r\n<b>finally:</b>                                                - в finally закрываем наш драйвер, чтобы не подвисал в системе\r\n        driver.<b>close</b>()\r\n        driver.<b>quit</b>()\r\n    > </pre>','2023-08-30','PYTHON/полезные модули/selenium/установка и настройка',36,3),(112,'Python','Пример работы selenium и unittest','primer-raboty-selenium-i-unittest','Пример тестирования формы поиска, логина и логаута на странице\r\n\r\n\r\n\r\n> <pre>\r\nimport time                                                                     - будем использовать time.sleep() для пауз (прогрузка страницы и для визуала)\r\nimport unittest                                                                 - selenium часто используют с unittest (удобные assert`s), но можно и другие\r\nfrom selenium import <b>webdriver</b>                                                  - основной элемент selenium - драйвер браузера\r\nfrom selenium.webdriver.common.keys import <b>Keys</b>                                 - для имитации нажатия кнопок с клавиатуры (например пробел)\r\nfrom selenium.webdriver.common.by import <b>By</b>                                     - для поиска html-элементов в коде страницы\r\n<br>\r\nclass PythonOrgSearch(unittest.TestCase):\r\n    <b>def setUp(self)</b>:                                                            - setup и teardown очень хорошо подходят для открытия/закрытия браузера перед/после теста\r\n        self.driver = <b>webdriver.Chrome()</b>                                        - инициализация браузера\r\n    <br>\r\n    def tearDown(self):\r\n        self.<b>driver.close()</b>                                                     - браузер обязательно нужно закрыть, чтоб не завис\r\n    <br>\r\n    def test_search_in_python_org(self):\r\n        driver = self.driver\r\n        driver.<b>get</b>(\"http://www.python.org\")                                     - открываем страничку в браузере\r\n        self.<b>assertIn</b>(\"Python\", <b>driver.title</b>)                                   - проверка наличия слова Python в заголовке страницы. <u>В driver весь html-код страницы</u> \r\n        time.sleep(5)\r\n        elem = driver.<b>find_element</b>(                                             - главный метод selenium для поиска элементов на странице\r\n            <b>By.NAME</b>, \"q\")                                                       - в данном случае поиск по <i>атрибуту</i> <b>name</b>. Искомый элемент - textfield поиска\r\n        time.sleep(5)\r\n        elem.<b>send_keys</b>(\"chupakabra\")                                            - метод для ввода данных в поля форм\r\n        time.sleep(5)\r\n        elem.<b>send_keys(Keys.RETURN)</b>                                             - имитация нажатия ENTER на клавиатуре (запустит поиск)\r\n        time.sleep(5)\r\n        self.<b>assertIn</b>(\"No results found.\",                                      - проверка, что в код-строке страницы нет искомой подстроки\r\n            <b>driver.page_source</b>)                                                 - выдаёт весь код страницы с тегами и текстами как строку, по которой можно что-то искать\r\n        time.sleep(5)\r\n        elem.<b>clear()</b>                                                            - очистка введённых в элемент данных\r\n<br>\r\n    def test_login_logout(self):\r\n        driver = self.driver\r\n        driver.get(\"https://www.python.org/psf-landing/\")\r\n        time.sleep(5)\r\n        elem = driver.<b>find_element(By.LINK_TEXT, \"Sign In\")</b>                     - поиск <u><b>href</b></u>-элемента по тексту ссылки\r\n        elem.<b>click()</b>                                                            - нажатие на элемент\r\n        time.sleep(5)\r\n        elem = driver.<b>find_element(By.XPATH, \"//input[@name=\'login\']\")</b>          - поиск элемента по <b>xpath</b> (опять же поле ввода)\r\n        elem.send_keys(\"olenka.nistyuk@gmail.com\")\r\n        time.sleep(5)\r\n        elem = driver.find_element(By.XPATH, \"//input[@name=\'password\']\")\r\n        elem.send_keys(\"nicolas001\")\r\n        time.sleep(5)\r\n        elem.send_keys(Keys.RETURN)\r\n        time.sleep(5)\r\n        self.assertIn(\"Your account\", driver.page_source)                       - если есть подсказка <i>Your account</i> на странице, значит залогинились успешно \r\n        time.sleep(5)\r\n        <b>print</b>(driver.page_source)                                               - на случай, если нужно вывести код страницы в терминал\r\n<br>     \r\n        driver.get(\"https://www.python.org/accounts/logout/\")                   - это мы logout тестим\r\n        time.sleep(5)\r\n        elem = driver.<b>find_element(By.CSS_SELECTOR</b>,                             - поиск в стиле css-selector\r\n                       \'div.container section.main-content form button\')\r\n        elem.click()\r\n        time.sleep(5)\r\n        self.<b>assertNotIn</b>(\"Your account\", driver.page_source)\r\n<br>\r\n    def test_about_breadcrumbs(self):                                           - Протестирует, панель навигации типа about >> qotes >> FAQ и пр.\r\n        driver = self.driver\r\n        driver.get(\"http://www.python.org\")\r\n        <b>elems</b> = driver.<b>find_elements</b>(By.CSS_SELECTOR, \'#about ul li a\')         - получаем <u>список</u> элементов\r\n        href_list = []\r\n        name_list = []\r\n        for e in elems:\r\n            href_list.append(e.<b>get_attribute(\"href\")</b>)                           - так получаем атрибут элемента\r\n            name_list.append(e.<b>get_attribute(\'innerHTML\')</b>)                      - так получаем внутренний код элемента (внутренние тэги, их атрибуты и пр.)\r\n        for i in range(len(href_list)-1):\r\n            driver.get(\r\n                href_list[i]\r\n            )\r\n            elem = driver.find_element(By.CSS_SELECTOR, \'.breadcrumbs\')\r\n            self.<b>assertIn(\"About\", elem.get_attribute(\'innerHTML\'))</b>             - так же как и с driver.page_source, только не весь документ, а более локально\r\n            self.assertIn(name_list[i], elem.get_attribute(\'innerHTML\'))\r\n            time.sleep(3)\r\n<br>\r\nif \\_\\_name\\_\\_ == \'\\_\\_main\\_\\_\':                                                      - типичный запуск unittest\r\n    unittest.main()\r\n> </pre>','2023-08-30','PYTHON/полезные модули/selenium/пример работы selenium и unittest',36,3),(113,'Python','Методы драйвера','metody-draivera','## Список освоенных методов драйвера\r\n\r\n\r\n\r\n<table>\r\n    <tr><td>driver.<b>maximize_window()</b></td>                                <td> - окно браузера во весь экран</td></tr>\r\n    <tr><td>driver.<b>implicitly_wait(5)</b></td>                               <td> - таймер на след. действие. Если ничего не произошло - выдаст ошибку</td></tr>\r\n    \r\n    <tr><td>driver.<b>close()</b></td>                                          <td> - закрыть браузер</td></tr>\r\n    <tr><td>driver.<b>quit()</b></td>                                           <td> - закрыть браузер</td></tr>\r\n    <tr><td>driver.<b>get(\"url\")</b></td>                                       <td> - перейти на страницу</td></tr>\r\n    <tr><td>driver.<b>forward()</b></td>                                        <td> - перейти вперёд</td></tr>\r\n    <tr><td>driver.<b>back()</b></td>                                           <td> - перейти назад</td></tr>\r\n    <tr><td>driver.<b>title</b></td>                                            <td> - текст титула странички</td></tr>\r\n    <tr><td>driver.<b>current_url</b></td>                                      <td> - url текущей страницы строкой</td></tr>\r\n    <tr><td>driver.<b>page_source</b></td>                                      <td> - код страницы строкой</td></tr>\r\n    <td><tr><td>driver.<b>find_element(By.ID, \"id\")</b></td>                    <td> - найти элемент по атрибуту <b>id</b></td></tr>\r\n    <td><tr><td>driver.<b>find_element(By.CLASS_NAME, \"class\")</b></td>         <td> - найти элемент по атрибуту <b>class</b></td></tr>\r\n    <td><tr><td>driver.<b>find_element(By.TAG_NAME, \"h1\")</b></td>              <td> - найти элемент по тэгу</td></tr>\r\n    \r\n    <tr><td>driver.<b>find_element(By.NAME, \"name\")</b></td>                    <td> - найти элемент по атрибуту <b>name</b></td></tr>\r\n    <tr><td>driver.<b>find_element(By.XPATH, \"//input[@name=\'login\']\")</b></td> <td> - найти элемент по выражению <b>xpath</b></td></tr>\r\n    <tr><td>driver.<b>find_element(By.CSS_SELECTOR, \"div.main\")</b></td>        <td> - найти элемент по <b>css</b></td></tr>\r\n    <tr><td>driver.<b>find_element(By.LINK_TEXT, \"text\")</b></td>               <td> - найти <u>href-ссылку</u> по её тексту</td></tr>\r\n    <tr><td>driver.<b>find_element(By.PARTIAL_LINK_TEXT, \"tex\")</b></td>        <td> - найти <u>href-ссылку</u> по <i>части</i> её текста</td></tr>\r\n    <tr><td>driver.<b>find_element<i>s</i>(By...)</b></td>                      <td> - найти <u>список</u> элементов\r\n    <tr><td>element.<b>text</b></td>                                            <td> - получить текстовую строку элемента</td></tr>\r\n                    \r\n    <tr><td>element.<b>send_keys(\"some_string\")</b></td>                        <td> - ввод данных в поле элемента</td></tr>\r\n    <tr><td>element.<b>send_keys(Keys.RETURN)</b></td>                          <td> - эмулировать нажатие клавиши клавиатуры в поле элемента</td></tr>\r\n    <tr><td>element.<b>clear()</b></td>                                         <td> - очистка введённых данных в элементе</td></tr>\r\n    <tr><td>element.<b>click()</b></td>                                         <td> - нажатие на элемент</td></tr>\r\n    <tr><td>element.<b>get_attribute(\"href\")</b></td>                           <td> - получение значения атрибута элемента</td></tr>\r\n    <tr><td>element.<b>get_attribute(\"innerHTML\")</b></td>                      <td> - получение всего кода между откр. и закр. тэгами элемента</td></tr>\r\n    <tr><td>driver.<b>execute_script(script, *args)</b></td>                    <td> - выполнить скрипт на JavaScript. Очень крутая штука, позволяющая решить многие вопросы при работе с selenium</td></tr>\r\n    <tr><td>driver.<b>execute_script(\"arguments[0].scrollIntoView(true);\", elem)</b></td><td> - так можно <i>проскроллить страницу до нужного элемента</i></td></tr>\r\n    \r\n</table>\r\n\r\n---\r\n\r\n### Фишки с тэгом <i>select</i>\r\n\r\n<table>\r\n    <tr><td>select = <b>Select</b>(driver.find_element(By.ID, \'id\'))</td>       <td> - находим тэг select и оборачиваем его классом</td></tr>\r\n    <tr><td>select.<b>select_by_index</b>(index)</td>                           <td> - выбираем элемент выпадающего списка по его индексу</td></tr>\r\n    <tr><td>select.<b>select_by_visible_text</b>(\"text\")</td>                   <td> - по тексту, который видит пользователь</td></tr>\r\n    <tr><td>select.<b>select_by_value</b>(val)</td>                             <td> - по value, привязанному к этому select</td></tr>\r\n    <tr><td>select.<b>deselect_all()</b></td>                                   <td> - очистить весь выбор</td></tr>\r\n    <tr><td>select.<b>all_selected_options</b></td>                             <td> - все выбранные опции</td></tr>\r\n</table>\r\n\r\n### Работа со всплывающими окнами <i>alert, prompt, confirm</i>\r\n\r\n> <pre>\r\nalert = driver.<b>switch_to</b>.alert                                                  - теперь можно прочитать, принять-отклонить содержимое всплывающего окна\r\n<br>\r\nalert.<b>accept()</b>                                                                  - принять оповещение\r\nalert.<b>dismiss()</b>                                                                 - закрыть оповвещение\r\nalert.<b>send_keys(\"some_info\")</b>                                                    - отправить что-то в промпт\r\nalert.<b>text</b>                                                                      - получить текст алерта\r\n> </pre>\r\n\r\n\r\n### Очередь действий\r\n\r\n\r\n\r\n> <pre>\r\nfrom selenium.webdriver import <b>ActionChains</b>                                     - для создания pipeline из команд\r\n<br>\r\nelement = driver.find_element(...)\r\ntarget = driver.find_element(...)\r\naction_chains = ActionChains(driver)\r\naction_chains.<b>drag_and_drop</b>(element, target).<b>perform()</b>                          - <i>drag_and_drop</i> для перетаскивания, <i>perform()</i> - всегда в конце цепочки команд\r\naction_chains.<b>move_to_element</b>(menu).<b>click</b>(hidden_submenu).perform()             - навести мышкой на элемент, появится скрытое меню, кликнуть на него.\r\n<br>\r\nmenu = driver.find_element(By.CSS_SELECTOR, \".nav\")\r\nhidden_submenu = driver.find_element(By.CSS_SELECTOR, \".nav #submenu1\")\r\nactions = ActionChains(driver)                                                  - пример выше построчно\r\nactions.move_to_element(menu)\r\nactions.click(hidden_submenu)\r\nactions.perform()\r\n\r\n> </pre>\r\n\r\n### Типы действий:\r\n\r\n\r\n\r\n<table>\r\n    <td><tr><td>click(on_element=None)</td>                                     <td> - кликнуть либо по указанному элементу, либо по позиции мыши</td></tr>\r\n    <td><tr><td>click_and_hold(on_element=None)</td>                            <td> - зажать мышь на элементе/позиции</td></tr>\r\n    <td><tr><td>release(on_element=None)</td>                                   <td> - отпустить удерживаемую кнопку мыши</td></tr>\r\n    <td><tr><td>context_click(on_element=None)</td>                             <td> - правой кнопкой мыши</td></tr>\r\n    <td><tr><td>double_click(on_element=None)</td>                              <td> - двойной клик</td></tr>\r\n    <td><tr><td>drag_and_drop(source, target)</td>                              <td> - перетащить один элемент на другой</td></tr>\r\n    <td><tr><td>drag_and_drop_by_offset(source, xoffset, yoffset)</td>          <td> - переместить source-элемент на смещение по X и Y</td></tr>\r\n    <td><tr><td>key_down(value, element=None)</td>                              <td> - нажатие клавиши-модификатора (Alt, Shift, Ctrl) для элемента в фокусе или указанного</td></tr>\r\n    <td><tr><td>key_up(value, element=None)</td>                                <td> - отпустить клавишу-модификатор</td></tr>\r\n    <td><tr><td>move_by_offset(xoffset, yoffset)</td>                           <td> - сместить курсор на Х и У</td></tr>\r\n    <td><tr><td>move_to_element(to_element)</td>                                <td> - сместить курсор на середину указанного элемента</td></tr>\r\n    <td><tr><td>move_to_element_with_offset(to_element, xoffset, yoffset)</td>  <td> - курсор на левый верхний угол элемента, потом сместить на Х и У</td></tr>\r\n    <td><tr><td>pause(seconds)</td>                                             <td> - приостановить все вводы на указанное время в сек</td></tr>\r\n\r\n    <td><tr><td>scroll( x: int , y: int , delta_x: int , delta_y: int , duration: int = 0 , origin: str = \'viewport\' )</td><td>- отправляет в браузер информацию о прокрутке колеса (Х, У - начало, дельты - куда крутить)</td></tr>\r\n    <td><tr><td>scroll_by_amount(delta_x: int, delta_y: int)</td>               <td> - прокрутить на дельту с верхнего левого угла области просмотра</td></tr>\r\n    <td><tr><td>scroll_to_element(element)</td>                                 <td> - прокрутить до элемента. Нижняя часть элемента совпадёт с нижн. частью области видимости</td></tr>\r\n    <td><tr><td>reset_actions()</td>                                            <td> - очистить сохранённые действия</td></tr>\r\n    <td><tr><td>perform()</td>                                                  <td> - выполнить все запомненные действия команд</td></tr>\r\n    \r\n</table>\r\n\r\n\r\n\r\n\r\n---\r\n\r\n### Полезные ссылки:\r\n\r\n- [Документация по selenium](https://selenium-python.readthedocs.io/index.html)\r\n- [Поиск по css-selector](https://saucelabs.com/resources/blog/selenium-tips-css-selectors)\r\n- [Поиск по XPATH](https://devhints.io/xpath)','2023-08-30','PYTHON/полезные модули/selenium/методы драйвера',36,3),(114,'Python','Ожидания','ozhidaniia','Т.к. мы работаем с web-страницами, часто есть временной лаг, пока страница прогружается. <br>\r\nНужно учитывать эти нюансы. Использовать <b>time.sleep()</b> не всегда удобно, т.к. он задаёт фиксированное время ожидания. Для этого есть более удобные инструменты:\r\n\r\n- Явные ожидания - для ожидания наступления определённого условия, перед продолжением действий\r\n- Неявные ожидания - webdriver будет опрашивать DOM в течении какого-то времени в попытки найти элемент\r\n\r\n## Явные ожидания\r\n\r\nРаботают с классами <b>WebDriverWait</b> и <b>ExpectedCondition</b>\r\n\r\n\r\n> <pre>\r\nfrom selenium import webdriver\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.support.wait import <b>WebDriverWait</b>\r\nfrom selenium.webdriver.support import <b>expected_conditions as EC</b>\r\n<br>\r\ndriver = webdriver.Chrome()\r\ndriver.get(\"http://somedomain/url_that_delays_loading\")\r\ntry:\r\n    wait = <b>WebDriverWait</b>(driver, 10)                                            - задаём время ожидания\r\n    element = <b>wait.until</b>(                                                       - встраиваем в поиск элемента\r\n        <b>EC.presence_of_element_located</b>((By.ID, \"myDynamicElement\"))             - список условий ниже\r\n    )\r\nexcept: ...\r\nfinally: ...\r\n\r\n> </pre>\r\n\r\n### Типы ожидаемых условий:\r\n\r\n- title_is\r\n- title_contains\r\n- presence_of_element_located\r\n- visibility_of_element_located\r\n- visibility_of\r\n- presence_of_all_elements_located\r\n- text_to_be_present_in_element\r\n- text_to_be_present_in_element_value\r\n- frame_to_be_available_and_switch_to_it\r\n- invisibility_of_element_located\r\n- element_to_be_clickable\r\n- staleness_of\r\n- element_to_be_selected\r\n- element_located_to_be_selected\r\n- element_selection_state_to_be\r\n- element_located_selection_state_to_be\r\n- alert_is_present\r\n\r\n### Можно создавать свои пользовательские ожидания:\r\n\r\n\r\n> <pre>\r\nclass element_has_css_class(object):\r\n  def \\_\\_init\\_\\_(self, locator, css_class):\r\n    self.locator = locator\r\n    self.css_class = css_class\r\n<br>\r\n  def \\_\\_call\\_\\_(self, driver):\r\n    element = driver.find_element(\\*self.locator)   \r\n    if self.css_class in element.get_attribute(\"class\"):\r\n        return element\r\n    else:\r\n        return False\r\n\r\n> </pre>\r\n\r\n## Неявные ожидания\r\n\r\n\r\n\r\n> <pre>\r\nfrom selenium import webdriver\r\n<br>\r\ndriver = webdriver.Chrome()\r\ndriver.<b>implicitly_wait(10)</b>                                                      - задаём ожидание <u>над</u> действием, которое мы будем ожидать\r\ndriver.get(\"http://somedomain/url_that_delays_loading\")                         - т.е. это ждём\r\nmyDynamicElement = driver.find_element(By.ID, \"myDynamicElement\")               - а тут уже без ожидания\r\n\r\n> </pre>','2023-08-31','PYTHON/полезные модули/selenium/ожидания',36,3),(115,'Python','Драйвер','draiver','Обычно называется <b>WebDriverSetup.py</b>, наследует от UnitTest и описывает setup и teardown методы:<br>\r\n\r\n\r\n> <pre>\r\nimport unittest\r\nfrom selenium import webdriver\r\nimport urllib3\r\n<br>\r\nclass WebDriverSetup(unittest.TestCase):\r\n    def setUp(self) -> None:                                - инициализация драйвера с его настройками\r\n        urllib3.disable_warnings(\r\n            urllib3.exceptions.InsecureRequestWarning)\r\n        self.driver = webdriver.Chrome()\r\n        self.driver.implicitly_wait(10)\r\n        self.driver.maximize_window()\r\n        self.driver.get(\'https://www.a1.by/ru/\')\r\n<br>\r\n    def tearDown(self) -> None:                             - выключаем драйвер\r\n        if self.driver is not None:\r\n            self.driver.close()\r\n            self.driver.quit()\r\n> </pre>','2023-09-07','PYTHON/полезные модули/selenium/pom/драйвер',37,3),(116,'Python','Локаторы','lokatory','Единая точка хранения локаторов для всех страниц. Очень удобно, т.к. не засоряет код и, если что-то поменялось, можно заменить локатор в одном месте, вместо того, чтобы искать его по всем тестам.<br>\r\nОбычно называется <b><i>locators.py</b></i>:\r\n\r\n\r\n> <pre>\r\nfrom selenium.webdriver.common.by import <b>By</b>                                                     \r\n<br>\r\n<b>class HomePageLocators:</b>                                                         - каждая страница свой класс со списком локаторов\r\n    ENGLISH_LANGUAGE = (<b>By.LINK_TEXT, \'EN\'</b>)                                     - будем хранить кортежи из типа поиска и самого локатора\r\n    RUSSIAN_LANGUAGE = (By.LINK_TEXT, \'RU\')\r\n    SEARCH_BUTTON = (By.ID, \'dropdownGlobalSearch\')\r\n    SEARCH_FIELD = (By.ID, \'i-global-search-input\')\r\n    SEARCH_RESULT_LINK = (By.CLASS_NAME, \'product-listing-item-link\')\r\n    OTHER_PAGE_LINK = (By.XPATH, \"//a[contains(@href, \'uslugi\')]\")\r\n    LOGO_LINK = (By.XPATH, \"//a[@href=\'/ru/\']\")\r\n<br>\r\nclass LoginPageLocators:\r\n    PASSWORD_RADIO_BUTTON = (By.XPATH, \"//input[@type=\'radio\'][@value=\'password\']\")\r\n    PHONE_NUMBER_INPUT = (By.XPATH, \"//input[starts-with(@value, \'+375\')]\")\r\n    PASSWORD_INPUT = (By.ID, \'password_login\')\r\n    SUBSCRIBER_LOGIN_TYPE = (By.XPATH, \"//h6[text()=\'Абонент\']\")\r\n    LOGOUT_ICO = (By.XPATH, \"//div[@class=\'header-box-icons\']/div[3]/p\")\r\n> </pre>','2023-09-07','PYTHON/полезные модули/selenium/pom/локаторы',37,3),(117,'Python','Страницы','stranitsy','Здесь лежит основная логика работы с <i>selenium</i>: найти такой-то элемент, кликнуть туда-то, ввести в поле то-то.<br>\r\nЕсть родительский класс, описывающий абстрактные методы взаимодействия с элементами, и <b>классы-страницы</b>, которые наследуют от него, пользуются его методами и описывают вполне конкретные сценарии взаимодействия с конкретными элементами страницы.<br>\r\nФайл обычно называется <b>pages.py</b>:\r\n\r\n\r\n\r\n> <pre>\r\nfrom locators import *                                                          - наши локаторы\r\nfrom selenium.webdriver.support.select import Select\r\nfrom selenium.webdriver.support import expected_conditions\r\nfrom selenium.webdriver.support.wait import WebDriverWait as wait\r\nfrom selenium.webdriver.support.relative_locator import locate_with\r\nfrom selenium.webdriver.common.keys import Keys\r\n<br>\r\n<b>class Page:</b>\r\n    <b>def \\_\\_init\\_\\_(self, driver):</b>                                                 - передаём драйвер, т.к. именно он совершает действия на странице\r\n        self.driver = driver\r\n<br>\r\n    def \\_\\_click_element\\_\\_(self, by, selector):                              \r\n        self.driver.find_element(by, selector).click()                          - найти элемент и кликнуть по нему<br>\r\n    def \\_\\_input_value\\_\\_(self, by, selector, value):\r\n        self.driver.find_element(by, selector).send_keys(value)                 - найти элемент и ввести в него значение<br>\r\n    def \\_\\_clear_value\\_\\_(self, by, selector):\r\n        self.driver.find_element(by, selector).clear()                          - найти элемент и очистить его значение<br>\r\n    def \\_\\_get_element_value\\_\\_(self, by, selector):\r\n        \\#self.driver.find_element(by, selector).text\r\n        return self.driver.find_element(by, selector).get_attribute(\r\n                                                            \"innerText\")<br>\r\n    def \\_\\_get_elements_number\\_\\_(self, by, selector):\r\n        return len(self.driver.find_elements(by, selector))                     - посчитать кол-во элементов<br>\r\n    def \\_\\_check_element\\_\\_(self, by, selector):\r\n        return self.\\_\\_get_elements_number\\_\\_(by, selector) != 0                  - проверить наличие элемента через его подсчёт<br>\r\n    def \\_\\_scroll_to_element\\_\\_(self, element):                               \r\n        self.driver.execute_script(                                             - пролистать до элемента (javascript)\r\n            \"return arguments[0].scrollIntoView();\", element)<br>\r\n    def \\_\\_scroll\\_to\\_\\_(self,  by, selector):\r\n        element = self.driver.find_element(by, selector)\r\n        self.driver.execute_script(                                             - сначала <i>найти</i> элемент, потом пролистать до него\r\n            \"return arguments[0].scrollIntoView();\", element)\r\n<br>\r\n<b>class FormPage(Page):</b>                                                           - наследуем от общей страницы и пользуемся её методами\r\n    def get_state_value(self):                                                  - получить значение <i>конкретного поля на конкретной странице</i>\r\n        return self.\\_\\_get_element_value\\_\\_(\\*FormPageLocators.STATE_INPUT_VALUE)    \r\n    def input_state(self, state):                                               - выполнить сложное действие одной функцией\r\n        self.\\_\\_scroll_to\\_\\_(\\*FormPageLocators.STATE_INPUT)\r\n        self.\\_\\_input_value\\_\\_(\\*FormPageLocators.STATE_INPUT, state)\r\n        self.\\_\\_input_value\\_\\_(\\*FormPageLocators.STATE_INPUT, Keys.TAB)\r\n        self.\\_\\_scroll_to\\_\\_(\\*FormPageLocators.STATE_INPUT)<br>\r\n    def is_city_enabled(self):                                                  - проверить что-то на True/False\r\n        return self.driver.find_element(\r\n            \\*FormPageLocators.CITY_INPUT).get_attribute(\"disabled\") is None<br>\r\n    def get_city_value(self):                                                   - вернуть значение\r\n        <b>return</b> self.\\_\\_get_element_value\\_\\_(\r\n                                    \\*FormPageLocators.CITY_INPUT_VALUE)<br>  \r\n\r\n> </pre>','2023-09-07','PYTHON/полезные модули/selenium/pom/страницы',37,3),(118,'Python','Тесты','testy','Файлы, где происходит непосредственно тестирование. Сюда подтягивается код из драйвера и страниц.<br>\r\nРазбиение кода на файлы позволяет не засорять файл с тестами кодом действий со страницей, кодом поиска нужных элементов и пр., а сосредоточиться на коде тестирования.<br>\r\n\r\n\r\n> <pre>\r\nimport unittest\r\nfrom time import sleep\r\nfrom WebDriverSetup import WebDriverSetup\r\nimport pages\r\nfrom selenium.webdriver import ActionChains\r\n<br>\r\n<b>class HomePageTests(<i>WebDriverSetup</i>):</b>                                            - группируем тесты в классы, не забываем передавать наш driver\r\n    def test_languages(self):\r\n        <b>home_page = A1_pages.HomePage(self.driver)</b>                              - инстанс класса тестируемой страницы. Через него используем методы страницы\r\n        home_page.<b>switch_to_english()</b>                                           - производим действия разными методами страницы\r\n        sleep(5)\r\n        assert self.driver.current_url == \'https://www.a1.by/en/\'\r\n        <b>self.assertIn</b>(\"About us\", self.driver.page_source)                      - проверяем ассертами unittest\r\n        home_page.switch_to_russian()\r\n        sleep(5)\r\n        assert self.driver.current_url == \'https://www.a1.by/ru/\'\r\n        self.assertIn(\"О компании\", self.driver.page_source)<br>\r\n    def test_search(self):\r\n        home_page = A1_pages.HomePage(self.driver)\r\n        home_page.search_something(\'ипхон\')\r\n        sleep(5)\r\n        self.assertIn(\'search\', self.driver.current_url)\r\n        self.assertTrue(home_page.if_search_is_empty())\r\n        home_page.search_something(\'iphone\')\r\n        self.assertFalse(home_page.if_search_is_empty())<br>\r\n    def test_logo_link(self):\r\n        home_page = A1_pages.HomePage(self.driver)\r\n        home_page.go_to_other_page()\r\n        sleep(2)\r\n        home_page.click_logo()\r\n        sleep(2)\r\n        assert self.driver.current_url == \'https://www.a1.by/ru/\'\r\n        sleep(5)\r\n<br>\r\n<b>class RegistrationTests(WebDriverSetup):</b>\r\n    def test_login_logout(self):\r\n        self.driver.get(\'https://myaccount.a1.by/login\')\r\n        login_page = A1_pages.LoginPage(self.driver)\r\n        login_page.choose_password_registration()\r\n        login_page.fill_in_phone_number()\r\n        login_page.fill_in_password()\r\n        self.assertIn(\'choose\', self.driver.current_url)\r\n        self.assertIn(\'Выберите способ входа\', self.driver.page_source)\r\n        login_page.choose_subscriber_login()\r\n        self.assertIn(\'Данные абонента\', self.driver.page_source)\r\n        elem = self.driver.find_element(*A1_locators.LoginPageLocators.LOGOUT_ICO)\r\n        action_chains = ActionChains(self.driver)\r\n        action_chains.move_to_element(elem).pause(2).move_by_offset(0, 150).pause(2).click(on_element=None).perform()\r\n<br>\r\n    <b>if \\_\\_name\\_\\_ == \'\\_\\_main\\_\\_\':</b>                                              - для запуска тестов\r\n        unittest.main()\r\n> </pre>','2023-09-07','PYTHON/полезные модули/selenium/pom/тесты',37,3),(119,'Python','flake8','flake8','Проверяет код на ошибки, несоответствие PEP8 и прочий мусор\r\n<br>\r\n\r\n- `pip install <b>flake8</b>`                                 - установить программу<br>\r\n- Файл с настройками может быть: <i>setup.cfg, .flake8, tox.ini</i>:\r\n\r\n> [flake8]  \r\n> <b>exclude</b> = .git,\\*migrations\\*,\\*venv\\*  \r\n> <b>max-line-length</b> = 119  \r\n> <b>per-file-ignores</b> =  \r\n>    test*: F401                                            - так можно указывать, какие ошибки игнорировать в каком файле  \r\n> <b>extend-ignore</b> = E203                               - игнорировать ошибку во всех файлах\r\n\r\n      \r\n- `flake8`                                                  - запуск линтера и отчёт\r\n\r\n[Документация](https://flake8.pycqa.org/en/latest/user/configuration.html)','2023-09-11','PYTHON/полезные модули/flake8',27,3),(120,'Miscellaneous','Github actions','github-actions','<b>Github actions</b> - удобный инструмент автоматизации процессов при работе с github. С его помощью можно настроить автоматические задачи по проверке, тестированию и развёртыванию кода при наступлении определённых условий. Например при push или pull-request в какую-либо ветку проекта.\r\n\r\n### Как работать:\r\n\r\nActions хранятся в yml-файлах по адресу <i>./github/workflows/my_name.yml</i>. Их может быть много под разные условия и они могут переиспользовать друг друга.<br>\r\nДовольно удобно их создавать и редактировать непосредственно на github: на странице репозитория кликаем Actions --> setup workflow yourself.\r\n\r\n## Примеры файлов:\r\n\r\n\r\n\r\n> <pre>\r\n<b>name:</b> My-GithubActions-Basics                                                   - имя файла особого значения не имеет, а вот это много где используется. Лучше писать без пробелов\r\n<b>env</b>:                                                                            - так задаются <u>глобальные</u> переменные среды\r\n  APPLICATION_NAME: \"MyFlask\"\r\n  PACKAGE_NAME: \"flask-deploy-file-<b>${{ github.sha }}</b>\"                           - так идёт обращение к глобальным переменным\r\n<br>\r\n<b>on:</b> [push, pull_request...]                                                     - триггеры списком, когда запуститься этот файл\r\non:                                                                             - чаще можно встретить такой вариант с указанием конкретной ветки\r\n  push:\r\n    branches:\r\n      - master\r\non:\r\n  <b>schedule:</b>                                                                     - можно запускать таски даже по расписанию через cron\r\n    - cron: \'*/15 * * * *\'\r\n<br>\r\n<b>concurrency:</b>                                                                    - так можно контролировать, чтобы был запущен только один, самый свежий action\r\n  group: master\r\n  cancel-in-progress: true<br>\r\n<b>jobs:</b>                                                                           - <u>блок</u> тасок, которые будут запускаться по условию выше\r\n  make_tests:                                                                   - название одной из тасок\r\n    <b>runs_on:</b> ubuntu-latest                                                      - обязательный параметр, который говорит, в какой среде выполнять таску (по сути docker-контейнер с ОС)\r\n    <b>env:</b>                                                                        - переменные, видные только внутри конкретного <b>job</b>\r\n      VAR1: \"Job-level variable\"\r\n<br>\r\n    <b>steps:</b>                                                                      - дальше будет описан набор действий в рамках одной таски\r\n      <b>env:</b>                                                                      - очень локальные переменные. К ним даже обращаются по-другому: <b>$VAR2</b>\r\n        VAR2: \"Very local var\"\r\n    <b>- uses: actions/checkout@v3</b>                                                 - так переиспользуются уже написанные таски. Конкретно этот очень популярный - скопировать код репозитория в новую ОС\r\n    <b>- name:</b> Set up python 3.7                                                   - каждому действию можно давать имена, чтобы было понятно, что происходит\r\n      uses:  <b>actions/setup-python@v2</b>                                            - ещё одна полезная таска для установки python нужной версии в ОС\r\n      <b>with:</b>                                                                     - так можно передавать параметры в таски и команды\r\n          python-version: 3.7\r\n    - name: Install dependencies\r\n      <b>run</b>: |                                                                    - так можно давать команды ОС списком (pipeline)\r\n         python -m pip install --upgrade pip\r\n         pip install -r requirements.txt\r\n    - name: Lint with flake8\r\n      run: |\r\n        pip install flake8\r\n        flake8\r\n    - name: Coverage report\r\n      run: |\r\n        pip install coverage\r\n        coverage run manage.py test\r\n        coverage report\r\n    - name: Django testing\r\n      run: python3 manage.py test                                               - одну команду можно давать без pipeline\r\n> </pre>\r\n\r\n### Пример деплоя в AWS (не проверял, видос из ютуба)\r\n\r\n\r\n\r\n> <pre>\r\nname: CI-CD-Pipeline-to-AWS\r\nenv:                                                                            - какие-то обязательные переменные для AWS\r\n  EB_PACKAGE_S3_BUCKET_NAME: \"\"\r\n  EB_APPLICATION_NAME: \"MyFlask\"\r\n  EB_ENVIRONMENT_NAME: \"MyFlask-env\"\r\n  DEPLOY_PACKAGE_NAME: \"flask_app${{ github.sha }}.zip\"\r\n  AWS_REGION_NAME: \"us-west-2\"<br>\r\non:\r\n  push:\r\n    branches:\r\n	  - master<br>\r\njobs:\r\n  quality:\r\n    - name: QA\r\n      <b>uses:</b> ./.github/workflows/pr.yml                                          - так можно переиспользовать свой уже написанный action<br>\r\n  ci-part:                                                                      - собрать архив и закинуть его в облако\r\n    runs-on: ubuntu-latest\r\n    <b>needs: [quality]</b>                                                            - по умолчанию jobs выполняются параллельно. Так мы можем определить что за чем должно идти\r\n    steps:\r\n    - name: clone our repo\r\n      uses: actions/checkout@v1\r\n    - name: Create ZIP deployment package                                       - создаём архив, который запулим в AWS\r\n      run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }}./ -x \\*.git\\*                    - так можно исключить из архива файлы git\r\n    - name: Configure my AWS Credentials\r\n      uses: <b>aws-actions/configure-asw-credentials@v1</b>                            - уже написанный умными дядями скрипт для настройки AWS\r\n      with:\r\n        aws-access-key-id: ${{ <b>secrets</b>.MY_AWS_ACCESS_KEY }}                     - это секретные переменные (Settings --> Secrets)\r\n        aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}\r\n        aws-region: ${{ env.AWS_REGION_NAME }}\r\n    - name: Copy deployment package to S3 bucket                                - как-то так можно закинуть на AWS наш архив\r\n      run: <b>aws</b> s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} \\\r\n           s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME }}/<br>\r\n  cd-part:                                                                      - сделать что-то на стороне AWS\r\n    runs-on: ubuntu-latest<br>\r\n    needs: [ci-part]\r\n    steps:\r\n    - name: Configure my AWS Credentials                                        - ещё раз настраиваем креды\r\n      uses: aws-actions/configure-asw-credentials@v1\r\n      with:\r\n        aws-access-key-id: ${{ secrets.MY_AWS_ACCESS_KEY }}\r\n        aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}\r\n        aws-region: ${{ env.AWS_REGION_NAME }}<br>\r\n    - name: Create new ElasticBeanstalk Application                             - одна, но оооочень длинная команда. Пишется вот так:\r\n      run: |\r\n        aws elasticbeanstalk create-application-version \\\r\n          --application-name ${{ env.EB_APPLICATION_NAME }} \\\r\n          --source-bundle S3Bucket=\"${{ env.EB_PACKAGE_S3_BUCKET_NAME }}\", S3Key=\"${{ env.DEPLOY_PACKAGE_NAME }}\" \\\r\n          --version-label \"ver-${{ github.sha }}\" \\\r\n          --description \"CommitSHA-${{ github.sha }}\"<br>	\r\n    - name: Deploy new E Application Version\r\n      run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label \"ver-${{ github.sha }}\"<br> \r\n    - name: Print finish\r\n      run: echo \"CD done\"\r\n> </pre>\r\n\r\n---\r\n\r\n### Ещё немного полезностей\r\n\r\n- В readme-файле проекта можно повесить баннер, показывающий статус последних actions: \r\n\r\n        Status of Last Deployment:<br>\r\n        <img src=\"https://github.com/username/project-folder/workflows/nameInYmlFile/badge.svg?branch=master\"><br>\r\n\r\n- Github-actions позволяет хранить секретные переменные в Settings --> Secrets. Это безопасно. Потом их можно использовать в actions как `${{ secrets.SECRET_VAR  }}`','2023-09-12','MISCELLANEOUS/github actions',8,4),(121,'FastAPI','Документация','dokumentatsiia','В FastAPI документация ведётся автоматически и бывает 2х видов: <b>swagger и ReDoc</b><br>\r\n\r\n### Swagger:\r\n\r\nИнтерактивный режим, который показывает наши endpoit`ы и даёт возможность их <i>потестить</i>.<br>\r\nНичего настраивать не нужно, достаточно просто к адресу сервера добавить <i>/docs</i>: http://127.0.0.1:8000/docs<br>\r\n\r\n### ReDoc:\r\n\r\nНе интерактивный, но позволяет получить больше информации о моделях, маршрутах и api.<br>\r\nРазработчик может поработать над этой документацией и дать свои, более подробные описания.<br>\r\nЖивёт по адресу: <u>http://127.0.0.1:8000/docs</u><br>\r\nТак можно в документацию внести пример того, как нужно заполнять модель todo в запросе (<i>файл models.py</i>):\r\n\r\n\r\n\r\n> <pre>\r\nclass Todo(BaseModel): \r\n    id: int\r\n    item: str<br>\r\n    <b>model_config</b> = {                                        - для разных версий python и pydantic может быть по-разному!\r\n        \'json_schema_extra\': {\r\n            \"examples\": [\r\n                {\r\n                    \"id\": 1,\r\n                    \"item\": \"Example schema!\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n> </pre>','2023-09-25','FASTAPI/документация',35,4),(122,'FastAPI','Статус-коды и обработка ошибок','status-kody-i-obrabotka-oshibok','FastAPI по умолчанию всегда возвращает 200 ok на запрос. Чтобы отдавать корректные коды и указывать информацию об ошибках, вводят слой обработки кодов и ошибок.<br>\r\nРаботаем с <b>routes.py</b>:\r\n\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, Path, <b>HTTPException, status</b>\r\n<br>\r\n@todo_router.post(\"/todo\", <b>status_code=201</b>)                 - так можно просто поменять дефолтный статус-код\r\nasync def add_todo(todo: Todo) -> dict:\r\n    todo_list.append(todo)\r\n    return {\"message\": \"Todo added successfully\"}\r\n<br>\r\n@todo_router.get(\"/todo/{todo_id}\")\r\nasync def get_single_todo(todo_id: int = Path(..., \r\n                            title=\"...\")) -> dict:\r\n    for todo in todo_list:\r\n        if todo.id == todo_id:\r\n            return {\r\n                \"todo\": todo\r\n            }\r\n    <b>raise HTTPException</b>(                                    - вызываем ошибку, если id не подошёл\r\n        <b>status_code</b>=status.HTTP_404_NOT_FOUND,              - нужный код\r\n        <b>detail</b>=\"Todo with such ID does not exist\"           - описание проблемы\r\n    )\r\n> </pre>','2023-09-25','FASTAPI/статус-коды и обработка ошибок',35,4),(123,'FastAPI','sqlmodel для работы с SQLite','sqlmodel-dlia-raboty-s-sqlite','<b>Sqlmodel</b> - библиотека для работы с sql-базами данных. Создана для работы с <i>Pydantic</i> и <i>SQLAlchemy</i>.\r\n\r\n<b>Установка:</b> `pip install sqlmodel`\r\n\r\n### Описание модели данных\r\n\r\nРаботает аналогично pydantic, только наследуем от другого класса и сложные поля описываем инструментами библиотеки.<br>\r\n<i>models.py</i>:\r\n\r\n\r\n\r\n> <pre>\r\nfrom sqlmodel import JSON, SQLModel, Field, Column\r\nfrom typing import Optional, List\r\n<br>\r\nclass Event(<b>SQLModel, table=True</b>):                          - table=True показывает, что это не для валидации, а реально таблица в бд\r\n    id: int = <b>Field(default=None, <i>primary_key=True</i>)</b>         - так определяют более сложные поля и их опции. В нашем случае, это - <i>первичный ключ</i>\r\n    title: str\r\n    image: str\r\n    description: str\r\n    tags: List[str] = <b>Field(sa_column=Column(JSON))</b>         - тоже сложная структура. Причём тут JSON не вникал\r\n    location: str\r\n<br>\r\n    <b>class Config:</b>                                           - вспомогательный класс для настроек и доп. информации\r\n        arbitrary_types_allowed = True\r\n        schema_extra = {                                    - пример заполнения объекта для документации\r\n            \'example\':\r\n                {\r\n                    \'title\': \'Some test event\',\r\n                    \'image\': \'url-path-to-image\',\r\n                    \'description\': \'Short description\',\r\n                    \'tags\': [\'fastapi\', \'python\'],\r\n                    \'location\': \'zoom conference\'\r\n                }\r\n        }\r\n<br>\r\nclass EventUpdate(SQLModel):                                - это <u>не таблица</u>, т.к. нет table=True. Будет использована для валидации\r\n    title: Optional[str]\r\n    image: Optional[str]\r\n    description: Optional[str]\r\n    tags: Optional[List[str]]\r\n    location: Optional[str]\r\n> </pre>\r\n\r\n---\r\n\r\n### Механизм подключения к базе\r\n\r\nСоздаётся отдельный каталог <i>database</i> и файлы <i>\\_\\_init\\_\\_.py</i> и <i>connection.py</i>:\r\n\r\n\r\n\r\n> <pre>\r\nfrom sqlmodel import SQLModel, Session, create_engine\r\nfrom models.events import Event                             - вышеописанная модель. Никак в коде явно не используется, но \"подхватится\" в фоне\r\n<br>\r\ndatabase_file = \"planner.db\"                                - файл нашей БД, если используем локально sqlite.\r\ndatabase_connection_string = f\'sqlite:///{database_file}\'   - путь до БД.\r\nconnect_args = {\'check_same_thread\': False}                 - дополнительные аргументы\r\nengine_url = <b>create_engine</b>(database_connection_string,      - это механизм <u>подключения</u> к БД\r\n        <b>echo=True</b>, connect_args=connect_args)               - эхо выводит выполненные команды в терминал. Полезно для отладки\r\n<br>\r\ndef <b>conn()</b>:                                                 - этот метод создаёт базу данных и таблицы, согласно импортированным моделям автоматически, если её ещё нет\r\n    SQLModel.metadata.create_all(<b>engine_url</b>)\r\n<br>\r\ndef <b>get_session()</b>:                                          - экземпляр сессии, чтобы что-то в базу записывать и дёргать из неё\r\n    with Session(engine_url) as session:\r\n        yield session\r\n> </pre>\r\n\r\n---\r\n\r\n### Создание базы при старте приложения.\r\n\r\nВ <i>main.py</i> определяем startup-event, в котором создаём базу методом <i>conn()</i>:\r\n\r\n\r\n> <pre>\r\nfrom database.connection import conn\r\n<br>\r\n<b>@app.on_event</b>(\"startup\")                                    - так можно инструктировать сервис делать что-то при определённых условиях. Чаще всего при старте/выключении\r\ndef on_startup():\r\n    <b>conn()</b>                                                  - создаём базу\r\n> </pre>\r\n\r\n---\r\n\r\n### Как пользоваться в endpoints\r\n\r\nСмысл в том, чтобы получить экземпляр сессии с помощью функции <i>get_session()</i> и работать с базой через него. <i>routes.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, HTTPException, status,\r\n    <b>Depends</b>                                                 - dependency injection\r\nfrom sqlmodel import <b>select</b>                                 - для создания выборок из БД\r\nfrom models.events import Event, EventUpdate                - описанные ранее модели\r\nfrom database.connection import <b>get_session</b>                 - функция, которая вернёт нам сессию БД\r\nfrom typing import List\r\n<br>\r\n@event_router.get(\"/{event_id}\", response_model=Event)\r\nasync def get_single_event(event_id: int,\r\n            <b>session=Depends(get_session)</b>) -> Event:         - получить экземпляр сессии. Если с сессией ошибка - запрос в работу не пойдёт\r\n    event = <b>session.get</b>(Event, <i>event_id</i>)                    - получить объект по его id\r\n    <br>\r\n    statement = <b>select</b>(Event)\r\n    all_events = <b>session.exec(statement).all()</b>              - так можно делать более сложные выборки. В данном случае получаем все объекты\r\n    <br>\r\n    session.<b>delete</b>(event)\r\n    session.<b>commit()</b>                                        - удаляем объект и коммитим в БД\r\n<br>\r\n    session.<b>add</b>(event)                                      - создаём новый объект в БД\r\n    session.<b>commit()</b>\r\n    session.<b>refresh</b>(event)\r\n<br>\r\n@event_router.<b>put</b>(\"/edit/{id}\", response_model=Event)       - отдельный пример для <u>обновления</u> данных\r\nasync def update_event(event_id: int, <b>new_data: EventUpdate</b>,- т.к. в обновлении могут быть не все поля, для валидации используем отдельную модель\r\n                    session=Depends(get_session)) -> Event:\r\n    event = session.<b>get</b>(Event, event_id)                    - получаем из БД объект, который будем обновлять\r\n    if event:\r\n        event_data = new_data.dict(<b>exclude_unset=True</b>)      - из body запроса получаем словарь с данными. Берём только те поля, что заполнены\r\n        for key, value in event_data.items():\r\n            <b>setattr(event</b>, key, value)                      - вот так можно быстро и без проблем поменять данные в объекте\r\n        session.<b>add</b>(event)                                  - а дальше как и при добавлении\r\n        session.<b>commit</b>()\r\n        session.<b>refresh(event)</b>\r\n        return event\r\n    raise HTTPException(\r\n        status_code=status.HTTP_404_NOT_FOUND,\r\n        detail=\"No such event\"\r\n    )\r\n> </pre>','2023-09-26','FASTAPI/работа с базами данных/sqlmodel для работы с sqlite',38,3),(124,'FastAPI','Dependency injection','dependency-injection','<b>Dependency</b> - очень удобный инструмент FastAPI, который позволяет получить нужные данные и инструменты ДО обработки запроса эндпоинтом. Если получить необходимое не получилось - эндпоинт запрос в работу не примет.<br>\r\nТ.е. это обёртка-проверка вокруг чего-то. Пропускает, если всё хорошо, блокирует, если что-то пошло не так.\r\nСюда удобно вкладывать проверки (например авторизации), сессии для работы с БД и пр.<br>\r\nDependency принимает функцию (без параметров).<br>\r\nПример использования:\r\n\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, HTTPException,\r\n        status, <b>Depends</b>\r\nfrom sqlmodel import select\r\nfrom models.events import Event\r\nfrom database.connection import <b>get_session</b>                 - функция, которая не принимает параметров, а возвращает сессию работы с БД\r\nfrom typing import List\r\n<br>\r\n@event_router.get(\"/\", response_model=List[Event])\r\nasync def get_all_events(<b>session=Depends(get_session)</b>):     - получаем сессию или fail\r\n    statement = select(Event)\r\n    all_events = <b>session</b>.exec(statement).all()              - работаем с сессией\r\n    return all_events\r\n> </pre>','2023-09-26','FASTAPI/dependency injection',35,4),(125,'FastAPI','MongoDB & beanie','mongodb-beanie','<b>Beanie</b> - асинхронная ODM-библиотека (Object Document Mapper) для работы с MongoDB.<br>\r\nДокументы описываются аналогично Pydantic, только вместо DaseDocument наследуем от Document из библиотеки Beanie.\r\n\r\nУстановка: `pip install beanie`\r\n\r\n## Пример документа <i>models.py</i>:\r\n\r\n\r\n\r\n> <pre>\r\n<b>from beanie import Document</b>\r\nfrom typing import List, Optional\r\n<br>\r\nclass Event(<b>Document</b>):\r\n    title: str\r\n    image: str\r\n    description: str\r\n    tags: List[str]\r\n    location: str\r\n<br>\r\n    class Config:\r\n        schema_extra = {\r\n            \'example\': {\r\n                \'title\': \'Some title\',\r\n                \'image\': \'URL-path-to-image\',\r\n                \'description\': \'Short description\',\r\n                \'tags\': [\'python\', \'fastapi\'],\r\n                \'location\': \'online\'\r\n            }\r\n        }\r\n<br>\r\n    <b>class Settings</b>:                                         - класс полезных настроек\r\n        <b>name</b> = \"events\"                                     - поможет автоматически задать имя коллекции в БД\r\n> </pre>\r\n\r\n---\r\n\r\n## Инициализация БД\r\n\r\nРяд настроек для автоматического подключения к MongoDB при старте сервиса. При первом запуске автоматически создаст нужные коллекции в БД.<br>\r\n#### Выносим работу с БД в отдельную папку <i>database</i> и файл <i>connection.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom motor.motor_asyncio import <b>AsyncIOMotorClient</b>          - клиент, который позволяет асинхронно коннектиться к БД\r\nfrom beanie import <b>init_beanie</b>                              - инструмент, который позволяет \"общаться\" приложению с базой, т.е. производить в ней действия\r\nfrom typing import Optional, Any\r\nfrom pydantic import <b>BaseSettings</b>                           - этот класс позволяет считывать переменные среды при запуске сервиса\r\nfrom models.users import User\r\nfrom models.events import Event\r\n<br>\r\nclass <b>Settings(BaseSettings)</b>:                               - в классе будут хранится переменные среды и другие настройки и автоматич. действия (подключение к БД)\r\n    <b>DATABASE_URL:</b> Optional[str] = None                      - переменная среды. Будет считана автоматически из env-файла, если его указать в подклассе <i>Config</i>\r\n<br>\r\n    <b>async def initialize_database(self):</b>                    - функция инициализации БД\r\n        client = <b>AsyncIOMotorClient</b>(self.DATABASE_URL)      - для коннекта необходим путь до БД\r\n        await <b>init_beanie</b>(client.get_default_database(),    - инициализация и автоматическое создание коллекций, если их ещё нет\r\n                        document_models=[Event, User])\r\n<br>\r\n    <b>class Config:</b>                                           \r\n        <b>env_file</b> = \".env\"                                   - указание откуда считывать секреты и переменные\r\n> </pre>\r\n\r\n#### Инициализируем базу при старте сервиса (по ивенту startup) в главном файле <i>main.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom database.connection import Settings<br>\r\nsettings = Settings()<br>\r\n@app.on_event(\"startup\")\r\nasync def start():\r\n    await settings.initialize_database()\r\n> </pre>\r\n\r\n\r\n\r\n---\r\n\r\n## Действия над объектами\r\n\r\nДействия выполняются либо над классом объекта (Класс.действие) либо над инстансом класса (экземпляр_класса.действие).\r\n\r\n> <pre>\r\nevent = Event(name=\"Packt office launch\", location=\"Hybrid\")\r\nawait event.<b>create()</b>                                        - сохраняем ранее созданный инстанс в БД\r\nawait Event.<b>insert_one</b>(event)                               - аналогично, но через класс\r\nawait Event.<b>insert_many</b>([event1, ev2, ...])                 - так можно за раз сохранить список экземпляров\r\nevent = await Event.<b>get</b>(\"74478287284ff\")                    - найти инстанс по его id\r\nevent = await.<b>find_one</b>(Event.location == \"Hybrid\")          - найти по условию <i>первый подходящий</i> элемент\r\nawait event.<b>delete()</b>                                        - удалить инстанс\r\nevent = await Event.<b>find</b>(Event.location == \"Hybrid\"). \\\r\n                                            <b>to_ list()</b>      - найти по условию все элементы и преобразовать результат в питоновский список\r\nupdate_query = {<b>\"$set\"</b>: {\"location\": \"virtual\"}}            - так предварительно задаются параметры для модификации объекта\r\nawait event.<b>update</b>(update_query)                            - инстанс.update(параметры). Есть ещё <b>.upsert() и .save()</b>\r\n> </pre>\r\n\r\n#### На практике логика работы с объектами БД выносится в отдельный класс. \r\n\r\nТак удобнее: меньше кода в эндпоинтах, удобно переиспользовать и вносить изменения, понятно читать. Можно поместить в тот-же файл <i>connection.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom beanie import init_beanie, PydanticObjectId\r\nfrom motor.motor_asyncio import AsyncIOMotorClient\r\nfrom typing import Optional, Any\r\nfrom pydantic import BaseSettings\r\nfrom models.users import User\r\nfrom models.events import Event\r\nfrom pydantic import BaseModel\r\n<br>\r\nclass <b>Settings(BaseSettings)</b>:\r\n    ...\r\n<br>\r\n<b>class Database:</b>                                             - класс будет содержать инструменты для работы с БД (найти, удалить, добавить, изменить и пр.)\r\n    <b>def \\_\\_init\\_\\_(self, model):</b>                              - подключаемся к нужной коллекции в БД. <i>Коллекции описаны в models.py</i>\r\n        self.model = model\r\n<br>\r\n    async <b>def save(self, document)</b> -> None:                 - создать документ\r\n        await document.create()                             - аналог event.create() выше\r\n        return\r\n<br>\r\n    async def <b>get</b>(self, id: PydanticObjectId) -> Any:       - получить элемент по id\r\n        doc = await self.model.get(id)                      - аналог Event.get(\'id\')\r\n        if doc:\r\n            return doc\r\n        return False\r\n<br>\r\n    async <b>def get_all</b>(self):                                - вернуть список из всех документов коллекции\r\n        docs = await self.model.<b>find_all()</b>.to_list()        \r\n        return docs\r\n<br>\r\n    async <b>def update</b>(self, id: PydanticObjectId,            - обновить объект\r\n                        body: BaseModel) -> Any:\r\n        doc_id = id\r\n        des_body = body.dict()                              - сначала из тела запроса достаём словарь с непустыми ключами\r\n        des_body =\r\n            {k: v for k, v in des_body.items() if v is not None}\r\n        <b>update_query</b> = {\"$set\": {                           - задаём параметры модификации\r\n            field: value for field, value in des_body.items()\r\n        }}\r\n        doc = await self.get(doc_id)\r\n        if not doc:\r\n            return False\r\n        await <b>doc.update(update_query)</b>                      - обновляем (event.update(q)), если объект есть в БД\r\n        return doc\r\n<br>\r\n    async <b>def delete</b>(self, id: PydanticObjectId) -> bool:\r\n        doc = await self.get(id)\r\n        if not doc:\r\n            return False\r\n        await <b>doc.delete()</b>                                  - удаление (event.delete()\r\n        return True\r\n> </pre>\r\n\r\n#### Пример работы с базой в <i>routes.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, HTTPException, status\r\nfrom models.events import <b>Event</b>, EventUpdate                - наша коллекция в БД\r\nfrom typing import List\r\nfrom beanie import PydanticObjectId\r\nfrom database.connection import <b>Database</b>                    - класс с нужными инструментами\r\n<br>\r\nevent_router = APIRouter(tags=[\"Events\"])\r\n<br>\r\n<b>event_database = Database(Event)</b>                            - через эту переменную будем работать с БД\r\n<br>\r\n@event_router.put(\"edit/{event_id}\", response_model=Event)\r\nasync def update_event(event_id: PydanticObjectId,\r\n                    body: EventUpdate) -> Event:\r\n    updated_event = await event_database.<b>update</b>(event_id, body)\r\n    if not updated_event:\r\n        raise HTTPException(\r\n            status_code=status.HTTP_404_NOT_FOUND,\r\n            detail=\"No such event\"\r\n        )\r\n    return updated_event\r\n> </pre>','2023-09-27','FASTAPI/работа с базами данных/mongodb & beanie',38,3),(126,'FastAPI','Функции для генерации токенов и аутентификации','funktsii-dlia-generatsii-tokenov-i-autentifikatsii','Всё, что связано с аутентификацией, лучше хранить отдельно. Создадим для этого отдельную папку <i>auth</i> с файлами \\_\\_init\\_\\_, jwt_handler, authenticate, hash_password).<br>\r\nУстановим необходимые библиотеки:\r\n\r\n- `pip install passlib[bcrypt]` - для хэширования паролей (bcrypt - это алгоритм)\r\n- `pip install python-jose[cryptography]` - для работы с токенами\r\n\r\n### hash_password.py - инструменты для работы с паролем.\r\n\r\nПароль нежелательно хранить в БД в открытом виде. Обычно его кодируют или, как в нашем случае, хэшируют, а потом сохраняют в зашифрованном виде.<br>\r\nТакже нужно уметь сравнивать захэшированный пароль с чистым, который отправляет пользователь для аутентификации.\r\n\r\n\r\n\r\n> <pre>\r\nfrom passlib.context import <b>CryptContext</b>                              - класс, который занимается хэшем                    \r\n<br>\r\n<b>pwd_context</b> = CryptContext(schemes=[\'bcrypt\'], deprecated=\"auto\")     - экземпляр класса с указанием алгоритма хэширования\r\n<br>\r\nclass HashPassword:\r\n    @staticmethod\r\n    <b>def create_hash</b>(password: str):                                   - из открытого пароля делает хэшированный, который можно хранить в БД\r\n        return <b>pwd_context.hash</b>(password)                             - просто передаём в функцию чистый пароль\r\n<br>\r\n    @staticmethod\r\n    <b>def verify_hash</b>(plain_password: str, hashed_password: str):       - примет чистый пароль и хэшированный из БД вернёт <i>bool</i>\r\n        return <b>pwd_context.verify</b>(plain_password, hashed_password)\r\n> </pre>\r\n\r\n### Как использовать в endpoit`ах:\r\n\r\n\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, HTTPException, status, Depends\r\nfrom models.users import User\r\nfrom database.connection import Database\r\nfrom auth.hash_password import <b>HashPassword</b>\r\n<br>\r\nuser_router = APIRouter(tags=[\"User\"])\r\n<br>\r\nuser_database = Database(User)\r\n<b>hash_password = HashPassword()</b>                                        - создаём экземпляр класса\r\n<br>\r\n@user_router.post(\"/signup\")\r\nasync def add_new_user(user: User) -> dict:\r\n    user_exist = await User.find_one(User.email == user.email)\r\n    if user_exist:\r\n        raise HTTPException(\r\n            status_code=status.HTTP_409_CONFLICT,\r\n            detail=\"User with such mail exists\"\r\n        )\r\n    user.password =<b> hash_password.create_hash</b>(user.password)          - просто подменяем пароль на хэшированный и сохраняем юзера в базе\r\n    await user_database.save(user)\r\n    return {\'message\': \'User registered\'}\r\n> </pre>\r\n\r\n---\r\n\r\n## Токены\r\n\r\nДля создания токена нужны: идентификатор пользователя, expire-time и секретный ключ.<br>\r\n<b><i>Секретный ключ</i></b> лучше всего хранить отдельно в <i>.env</i>-файле и подгружать в приложение автоматически через класс Settings:\r\n\r\n\r\n> <pre>\r\nclass Settings(BaseSettings):\r\n    DATABASE_URL: Optional[str] = None\r\n    <b>SECRET_KEY</b>: Optional[str] = None\r\n<br>\r\n    class Config:\r\n        env_file = \".env\"\r\n> </pre>\r\n\r\n### jwt-handler.py - для создания токена и его дешифрования.\r\n\r\n\r\n> <pre>\r\nimport time\r\nfrom datetime import datetime\r\nfrom fastapi import HTTPException, status\r\n<b>from jose import jwt, JWTError</b>                                        - библиотека python-jose[cryptography]                       \r\nfrom database.connection import <b>Settings</b>                              - отсюда будем брать секретный ключ для токенов\r\n<br>\r\nsettings = Settings()\r\n<br>\r\n<b>def create_access_token</b>(user: str) -> str:                            - создаст токен: закодированная строка\r\n    <b>payload</b> = {                                                       \r\n        \'user\': user,\r\n        \'expires\': time.time() + 3600\r\n    }\r\n    token = <b>jwt.encode</b>(payload, <b>settings.SECRET_KEY</b>,\r\n                                                algorithm=\'HS256\')\r\n    return token\r\n<br>\r\n<b>def verify_access_token</b>(token: str) -> dict:                          - вернёт словарь с идентификатором юзера и expire-time\r\n    try:\r\n        data = <b>jwt.decode</b>(token, settings.SECRET_KEY,\r\n                            <b>algorithm<u>s</u></b>=[\'HS256\'])              - при decode нужен <u>список</u> алгоритмов\r\n        expire = data.get(\'expires\')\r\n<br>\r\n        if expire is None:                                            - если нет поля expire - токен некорректный\r\n            raise HTTPException(\r\n                status_code=status.HTTP_400_BAD_REQUEST,\r\n                detail=\'No access token supplied\'\r\n            )\r\n        if <b>datetime.utcnow() > datetime.utcfromtimestamp(expire)</b>:     - так проверяем, что токен ещё не \"выдохся\"\r\n            raise HTTPException(\r\n                status_code=status.HTTP_403_FORBIDDEN,\r\n                detail=\'Token expired!\'\r\n            )\r\n        <b>return data</b>                                                   - возвращаем данные\r\n    <b>except JWTError</b>:                                                  - для прочих ошибок\r\n        raise HTTPException(\r\n            status_code=status.HTTP_400_BAD_REQUEST,\r\n            detail=\'Invalid token\'\r\n        )\r\n> </pre>\r\n\r\n---\r\n\r\n## authenticate.py - аутентификация\r\n\r\nФункция аутентификации, которая будет вызываться в Depends. Достанет из полей запроса токен, декодирует его и отдаст пользователя.\r\n\r\n\r\n> <pre>\r\nfrom fastapi import Depends, HTTPException, status\r\nfrom fastapi.security import <b>OAuth2PasswordBearer</b>                     - этот класс предоставит нам токен из полей запроса\r\n<b>from auth.jwt_handler import verify_access_token</b>                      - это мы сделали выше\r\n<br>\r\n<b>oauth2_scheme</b> = OAuth2PasswordBearer(                                 - это и экземпляр класса и функция. Вызовем зависимостью Depends. Даст токен.\r\n    tokenUrl=\"/user/signin\")                                          - <i>tokenUrl</i> скорее всего нужен, если используется отдельный сервер аутентификации (мы делаем сами)\r\n<br>\r\n<b>async def authenticate(token: str = Depends(oauth2_scheme))</b> -> str:\r\n    if not token:\r\n        raise HTTPException(\r\n            status_code=status.HTTP_403_FORBIDDEN,\r\n            detail=\"Sign in for access\"\r\n        )\r\n    decoded_token = <b>verify_access_token(token)</b>\r\n    <b>return decoded_token[\"user\"]</b>                                      - возвращаем юзера\r\n> </pre>','2023-09-29','FASTAPI/безопасность/jwt & oauth2/функции для генерации токенов и аутентификации',40,3),(127,'FastAPI','Аутентификация и авторизация в endpoints','autentifikatsiia-i-avtorizatsiia-v-endpoints','### Хэшируем пароль и сохраняем в БД (создание нового user`a)\r\n\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, HTTPException, status, Depends\r\nfrom models.users import User\r\nfrom database.connection import Database\r\nfrom auth.hash_password import <b>HashPassword</b>                           - наш ранее созданный класс с функциями\r\n<br>\r\nuser_router = APIRouter(tags=[\"User\"])\r\n<br>\r\nuser_database = Database(User)\r\n<b>hash_password = HashPassword()</b>                                        - создаём экземпляр класса\r\n<br>\r\n@user_router.post(\"/signup\")\r\nasync def add_new_user(user: User) -> dict:\r\n    user_exist = await User.find_one(User.email == user.email)\r\n    if user_exist:\r\n        raise HTTPException(\r\n            status_code=status.HTTP_409_CONFLICT,\r\n            detail=\"User with such mail exists\"\r\n        )\r\n    user.password =<b> hash_password.create_hash</b>(user.password)          - просто подменяем пароль на хэшированный и сохраняем юзера в базе\r\n    await user_database.save(user)\r\n    return {\'message\': \'User registered\'}\r\n> </pre>\r\n\r\n---\r\n\r\n### Аутентификация - выдаём токен при log-in\r\n\r\nБудем использовать встроенную форму аутентификации <b>OAuth2PasswordRequestForm</b>. Она проверит, что в request.body есть форма с полями <u>username и password</u> (есть и другие необязательные),<br>\r\nи достанет эти данные в качестве модели (словарик) user.<br>\r\n<b>!!!Работа с формой требует доустановки библиотеки:</b> `pip install python-multipart`\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, HTTPException, status, Depends\r\nfrom fastapi.security import <b>OAuth2PasswordRequestForm</b>\r\nfrom auth.jwt_handler import <b>create_access_token</b>                      - нами написанная функция для создания токена. См. соседнюю страницу\r\nfrom models.users import <b>TokenResponse</b>, User                          - response-model для токена (см. ниже)\r\nfrom database.connection import Database\r\nfrom auth.hash_password import HashPassword\r\n<b>hash_password = HashPassword()</b>                                        - наша функция для паролей. См. соседнюю страницу\r\n<br>\r\n@user_router.post(\"/signin\", <b>response_model=TokenResponse</b>)            - pydantic-модель с двумя строковыми полями: <i>access_token и token_type</i>\r\nasync def sign_in(<b>user: OAuth2PasswordRequestForm = Depends()</b>):       - так через зависимость автоматически проверяется наличие и вытягиваются данные для авторизации\r\n    user_exist = await User.find_one(User.email == user.username)\r\n    if not user_exist:\r\n        raise HTTPException(\r\n            status_code=status.HTTP_404_NOT_FOUND,\r\n            detail=\"No such user\"\r\n        )\r\n    if <b>hash_password.verify_hash</b>(user.password,                       - проверяем пароль\r\n                                    user_exist.password):\r\n        access_token = <b>create_access_token</b>(user_exist.email)          - создаём токен\r\n        return {\r\n            <b>\'access_token\'</b>: access_token,                             - именно в таком виде отдаём токен на фронтенд.\r\n            <b>\"token_type\"</b>: \"Bearer\"\r\n        }\r\n    raise HTTPException(\r\n        status_code=status.HTTP_403_FORBIDDEN,\r\n        detail=\"Wrong password\"\r\n    )\r\n> </pre>\r\n\r\n### Закрываем маршруты для неавторизованных пользователей\r\n\r\nВ необходимых endpoints в качестве зависимости вызываем нашу функцию <b><i>authenticate</i></b>.<br>\r\nОна, в свою очередь, в зависимости вызовет <b><i>oauth2_scheme</i></b>, которая достанет токен из полей запроса и передаст в <i><b>authenticate</i></b>.<br>\r\n<i><b>authenticate</i></b>, получив токен от <b><i>oauth2_scheme</i></b>, декодирует его с помощью нашей же функции <i><b>verify_access_token</i></b> и вернёт в endpoint юзера.<br>\r\nЕсли что-то пойдёт не так - везде предусмотрен возврат ошибок HTTPException.<br>\r\n<i>routes.py</i>:\r\n\r\n> <pre>\r\nfrom fastapi import APIRouter, HTTPException, status, Depends\r\nfrom auth.authenticate import <b>authenticate</b>\r\n<br>\r\n@event_router.post(\"/new\")\r\nasync def add_new_event(event: Event,\r\n        <b>user: str = Depends(authenticate))</b>:                           - в endpoint`ах нужно всего лишь вызвать функцию аутентификации. Вся магия произойдёт \"под капотом\" (см. выше)\r\n    await event_database.save(event)\r\n    return {\'message\': \'Event added successfully!\'}\r\n> </pre>\r\n\r\n---\r\n\r\n### Авторизация\r\n\r\nТ.к. теперь мы научились определять пользователя, который посылает запрос, можно реализовать авторизацию, например разрешать пользователю удалять только его данные.<br>\r\n<i>routes.py</i>:\r\n\r\n> <pre>\r\n@event_router.post(\"/new\")\r\nasync def add_new_event(event: Event,\r\n        <b>user</b>: str = Depends(authenticate)) -> dict:\r\n    <b>event.creator</b> = user                                              - при создании event`a, помечаем, кто его хозяин, чтобы потом фильтровать event`s по пользователям                                    \r\n    await event_database.save(event)\r\n    return {\'message\': \'Event added successfully!\'}\r\n<br>\r\n@event_router.put(\"/edit/{event_id}\", response_model=Event)\r\nasync def update_event(event_id: PydanticObjectId,\r\n        body: EventUpdate, <b>user</b>: str = Depends(authenticate)):\r\n    event = await event_database.get(event_id)                        - вытягиваем из БД event\r\n    if not event:\r\n        raise HTTPException(\r\n            status_code=status.HTTP_404_NOT_FOUND,\r\n            detail=\"No such event\"\r\n        )\r\n    <b>if event.creator != user</b>:                                         - и просто сверяем его хозяина и пользователя, который отправил запрос\r\n        raise HTTPException(\r\n            status_code=status.HTTP_400_BAD_REQUEST,\r\n            detail=\"Operation not allowed\"\r\n        )\r\n    updated_event = await event_database.update(event_id, body)\r\n\r\n    return updated_event\r\n> </pre>','2023-09-29','FASTAPI/безопасность/jwt & oauth2/аутентификация и авторизация в endpoints',40,3),(128,'FastAPI','CORS','cors','<b>CORS</b> - Cross Origin Resorse Sharing. Это middleware, которое определяет с какого хоста какими методами и заголовками можно обращаться к нашему api.<br>\r\nНиже примитивный пример. Документацию можно почитать [тут](https://fastapi.tiangolo.com/tutorial/cors/).<br>\r\nЗащита вшита в фреймворк. Можно просто подгрузить нужные инструменты и настроить всё в <i>main.py</i>:\r\n\r\n> <pre>\r\nfrom fastapi import FastAPI\r\nfrom fastapi.middleware.cors import <b>CORSMiddleware</b>          - класс, который будет проводить необходимые проверки\r\nimport uvicorn\r\n<br>\r\n<b>origins</b> = [\"\\*\"]                                             - список хостов, для которых открыт доступ (например “http://packtpub.com”)\r\n<b>app.add_middleware</b>(                                         - подключаем нужный middleware\r\n    <b>CORSMiddleware</b>,\r\n    allow_origins=origins,                                  - список хостов\r\n    allow_credentials=True,\r\n    allow_methods=[\"\\*\"],                                    - список методов\r\n    allow_headers=[\"\\*\"],                                    - список заголовков\r\n)\r\n> </pre>','2023-10-02','FASTAPI/безопасность/cors',39,3),(129,'FastAPI','Класс settings','klass-settings','В Pydantic есть класс <b>BaseSettings</b>, который очень хорошо подходит для хранения переменных среды и настроечных функций.<br>\r\nФайл <i>config.py</i>:\r\n\r\n> <pre>\r\nfrom pydantic import <b>BaseSettings</b>\r\n<br>\r\nclass Settings(BaseSettings):\r\n    DATABASE_URL: str                                       - переменные среды, которые будут считаны с .env - файла\r\n    MONGO_INITDB_DATABASE: str\r\n    KAFKA_BROKER: str\r\n    TWITCH_CLIENT_ID: str\r\n    TWITCH_CLIENT_SECRET: str<br>\r\n    async def <b>initialize_database</b>(self):                    - тут можно также хранить настроечные функции. Например функцию инициализации БД\r\n        ...\r\n<br>\r\n    <b>class Config</b>:                                           \r\n        <b>env_file</b> = \'./.env\'                                 - инструкция, что нужно считать переменные среды.\r\n<br>\r\n<b>settings</b> = Settings()                                       - экземпляр класса, который можно импортировать в других модулях\r\n> </pre>','2023-10-03','FASTAPI/класс settings',35,4),(130,'FastAPI','MongoDB & pymongo','mongodb-pymongo','<b>pymongo</b> - синхронный, но простой способ подключить FastAPI к MongoDB.<br>\r\nСам по себе обеспечивает подключение к конкретной коллекции конкретной базы. Своего интерфейса (команд) для работы с БД не имеет (это просто драйвер).<br>\r\nДелаем отдельный файл <i>database.py</i>:\r\n\r\n\r\n> <pre>\r\nfrom pymongo import <b>MongoClient</b>                             - для коннекта к базе\r\nfrom config import <b>settings</b>                                 - тут хранятся переменные среды (название коллекций, путь до БД)\r\n<br>\r\nclass CatalogDatabase:\r\n    def \\_\\_init\\_\\_(self):\r\n        <b>self.client = MongoClient</b>(\r\n            settings.DATABASE_URL, 27017)                   - адрес MongoDB\r\n        self.database = self.client[\r\n            settings.MONGO_INITDB_DATABASE]                 - нужная база в БД\r\n        self.<b>collection</b> = self.database[\r\n            \'catalog_urls\']                                 - коллекция, с которой будем работать\r\n<br>\r\n    <b>def get_all(self):</b>                                      - методы с питоновским синтаксисом\r\n        result = self.<b>collection.find()</b>                     - работаем с коллекцией. Внутри команды с синтаксисом mongo\r\n        return result\r\n<br>\r\n    def get(self, \\*\\*conditions):\r\n        result = self.collection.<b>find_one</b>(conditions)\r\n        return result\r\n<br>\r\n    def <b>filter</b>(self, limit=None, \\*\\*conditions):\r\n        result = self.collection.<b>find(conditions)</b>\r\n        if limit:\r\n            result = result[:limit]\r\n        return result\r\n<br>\r\n    def save(self, data):\r\n        if isinstance(data, list):\r\n            #dicts = [item.dict() for item in data]\r\n            self.collection.<b>insert_many</b>(data)\r\n        else:\r\n            self.collection.<b>insert_one</b>(data)\r\n        return\r\n<br>\r\n    def delete(self, many=False, **conditions):\r\n        if many:\r\n            self.collection.<b>delete_many</b>(conditions)\r\n        else:\r\n            self.collection.<b>delete_one</b>(conditions)\r\n<br>\r\n    def drop_collection(self):\r\n        self.<b>collection.drop()</b>\r\n> </pre>','2023-10-03','FASTAPI/работа с базами данных/mongodb & pymongo',38,3),(131,'Miscellaneous','Вопросы на собес','voprosy-na-sobes','### Видеоинтервью\r\n\r\n- Расскажите о себе\r\n- Ваше мнение о нашем продукте\r\n- Почему хотите работать у нас?\r\n- Ваш последний проект\r\n- Ваш лучший/любимый проект\r\n- Как обеспечиваете качество кода?\r\n- Откуда берёте информацию?\r\n- Рабочие процессы: как работали и как больше нравиться?\r\n- Как относитесь к feedback`ам и review вашей работы? Как удобней получать такой отзыв?\r\n- Как должна выглядеть идеальная команда и рабочий процесс?','2023-10-23','MISCELLANEOUS/вопросы на собес',8,4),(132,'Databases','Установка и подключение к БД','ustanovka-i-podkliuchenie-k-bd','### Установка библиотеки и диалекта\r\n\r\n`pipenv install sqlalchemy`<br>\r\n\r\nДиалект, он же драйвер, DBAPI-совместимый драйвер - прослойка, которая адаптирует sql-запрос под конкретную БД, т.к. они немного отличаются для разных баз.<br>\r\nДля <i>postgres</i> это обычно <b>psycopg2</b>, для <i>MySQL</i>: <b>PyMySQL, MySQL-Connector, MySQL-Python</b> и пр...<br>\r\n\r\n`pipenv install psycopg2`\r\n\r\n### Создание новой базы на примере postgres:\r\n\r\nДо того, как подключаться к БД через sql-alchemy, базу нужно создать.\r\n\r\n> <pre>\r\nimport psycopg2\r\nfrom psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT\r\n<br>\r\nconnection = <b>psycopg2.connect</b>(user=\"postgres\", password=\"1111\")                 - подключаемся через psycopg2, а не engine\r\nconnection.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)\r\ncursor = connection.cursor()                                                    - курсор, как основной инструмент работы с БД\r\nsql_create_database = cursor.execute(\'create database sqlalchemy_tuts\')         - создаём бд через курсор\r\ncursor.close()                                                                  - отключаемся\r\nconnection.close()\r\n> </pre>\r\n\r\n### Engine - создание движка для подключения к БД\r\n\r\n> <pre>\r\nfrom sqlalchemy import <b>create_engine</b>\r\n<br> \r\nengine = create_engine(\"mysql+pymysql://root:pass@localhost/mydb\")              - строка формата типБД+драйвер://пользователь:пароль@путь/до/базы\r\nengine = create_engine(\"mysql+mysqldb://root:pass@23.92.23.113/mydb\")\r\nengine = create_engine(\"postgresql+psycopg2://root:pass@localhost/mydb\")\r\nengine = create_engine(\"oracle+cx_oracle://root:pass@localhost/mydb\"))\r\nengine = create_engine(\"oracle+pyodbc://root:pass@localhost/mydb\")\r\nengine = create_engine(\'sqlite:///sqlite3.db\')                                  - sqlite создаётся немного иначе\r\nengine = create_engine(\'sqlite:////path/to/sqlite3.db\', <b>echo=True</b>,              - доп. параметры для логирования в консоль, количество подключений в пулле, кодировка и пр.\r\n    pool_size=5, max_overflow=10, encoding=\'UTF-8\')\r\n<br>\r\n<b>engine.connect()</b>                                                                - подключение\r\n> </pre>\r\n\r\n\r\nХорошо про это написано вот [тут](https://pythonru.com/biblioteki/ustanovka-i-podklyuchenie-sqlalchemy-k-baze-dannyh)','2023-10-26','DATABASES/sqlalchemy/установка и подключение к бд',41,3),(133,'Databases','Создание таблиц и их поля','sozdanie-tablits-i-ikh-polia','### Базовый пример создания таблицы\r\n\r\n\r\n\r\n> <pre>\r\nfrom sqlalchemy import <b>MetaData</b>, Table, Column, \\                               - MetaData содержит данные о структуре таблицы\r\n    String, Integer,  Text, DateTime, Boolean,\r\n    ARRAY                                                                       - общий тип полей для SQL, который поддерживается не всеми БД\r\nfrom <b>sqlalchemy.dialects</b> import postgresql                                      - если нужны поля БД, которые есть в <i>конкретно этой БД</i>\r\nfrom datetime import datetime\r\n<br>\r\nmetadata = <b>MetaData()</b>                                                           - один экземпляр на <u>все таблицы</u> БД\r\n<br>\r\nblog = <b>Table</b>(\'blog\', metadata,                                                  - название таблицы, экземпляр MetaData и колонки с их типами и настройками\r\n    <b>Column</b>(\'id\', Integer(), <b>primary_key=True</b>),                                  - первичный ключ\r\n    Column(\'post_title\', String(200), <b>nullable=False</b>),                          - не может быть пустым\r\n    Column(\'post_slug\', String(200),  nullable=False, <b>index=True</b>),              - cоздаст индекс \r\n    Column(\'content\', Text(), nullable=False, <b>unique=True</b>),                     - уникальность\r\n    Column(\'published\', Boolean(), <b>default=False</b>),                              - значение по умолчанию\r\n    Column(\'created_on\', DateTime(), default=datetime.now),\r\n    Column(\'updated_on\', DateTime(), default=datetime.now,\r\n        <b>onupdate</b>=datetime.now)                                                  - поле обновится при обновлении строки таблицы\r\n    Column(\'workday\', <b>ARRAY</b>(Integer)),                                          - специализированные типы, поддерживаемые конкретными БД пишутся КАПСОМ\r\n    Column(\'ipaddress\', <b>postgresql.INET</b>)                                        - поле типа ip-address, которое есть только в postgres\r\n)\r\n<br>\r\n<b>metadata.create_all(engine)</b>                                                     - создаст вышеописанные таблицы в БД. !Нужен экземпляр Engine! Если таблица уже есть - <u>не создаст новую</u>!\r\n> </pre>\r\n\r\n\r\n### Примеры взаимосвязей между таблицами (ключи)\r\n\r\n> <pre>\r\nfrom sqlalchemy import MetaData, Table, Column, Integer, String, Text,\r\n    <b>ForeignKey</b>\r\n<br>\r\nmetadata = MetaData()\r\n<br>\r\nuser = Table(\'users\', metadata,\r\n    Column(\'id\', Integer(), primary_key=True),\r\n    Column(\'user\', String(200), nullable=False),\r\n)\r\n<br>\r\nposts = Table(\'posts\', metadata,\r\n    Column(\'id\', Integer(), primary_key=True),\r\n    ...\r\n    Column(\'user_id\', <b>ForeignKey(\"users.id\"))</b>,                                  - <b>один ко многим</b>, нужен ForeignKey\r\n    Column(\'user_id\', Integer(), <b>ForeignKey(user.c.id))</b>,\r\n)\r\n<br>\r\nemployee_details = Table(\'user_details\', metadata,\r\n    Column(\'employee_id\', \r\n        <b>ForeignKey(\'employees.employee_id\'), primary_key=True),</b>                 - <b>один к одному</b>, нужен и ForeignKey и primary_key\r\n    ...\r\n    Column(\'residential_address\', String(200), nullable=False),    \r\n)\r\n<b>abstract_many_to_many</b> = Table(\'many\', metadata,                                 - <b>многие ко многим</b>. В основных таблицах ничего не нужно, в дополнительной только 2 ForeignKey\r\n    Column(\'id\', Integer(), primary_key=True),\r\n    Column(\'post_id\', ForeignKey(\'posts.id\')),\r\n    Column(\'tag_id\', ForeignKey(\'users.id\'))\r\n)\r\n> </pre>\r\n\r\n\r\n### Constraints и составные индексы - для создания составных ключей и ограничений\r\n\r\n\r\n> <pre>\r\nparent = Table(\'parent\', metadata,\r\n    Column(\'id\', Integer, nullable=False),\r\n    Column(<b>\'ssn\'</b>, Integer, nullable=False),                                     - сначала создаём обычные колонки, потом объединяем в ключ\r\n    Column(<b>\'name\'</b>, String(16), nullable=False),    \r\n    <b>PrimaryKeyConstraint</b>(\'id\', \'ssn\', name=\'uniq_1\')                            - составной первичный ключ из двух полей\r\n)\r\n<br>\r\nchild = Table(\'child\', metadata,\r\n    Column(\'id\', Integer, primary_key=True),\r\n    Column(\'name\', String(40), nullable=False),\r\n    Column(\'first_name\', String(40), nullable=False),\r\n    Column(\'age\', Integer, nullable=False),\r\n    Column(<b>\'parent_id\'</b>, Integer, nullable=False),\r\n    Column(<b>\'parent_ssn\'</b>, Integer, nullable=False),\r\n    <b>ForeignKeyConstraint</b>([\'parent_id\',\'parent_ssn\'],                            - составной ForeignKey\r\n        [\'parent.id\', \'parent.ssn\'])\r\n    <b>UniqueConstraint</b>(\'name\', \'first_name\', name=\'uniq_1\')                       - проверка на уникальность комбинации имя-фамилия\r\n    <b>CheckConstraint</b>(\'age < 100\', name=\'age_check\')                              - проверки полей на значения\r\n    <b>Index</b>(\'idx_col1\', \'name\', \'age\')                                            - составной индекс для ускорения поиска \r\n)\r\n> </pre>\r\n\r\nМатериал взял [отсюда](https://pythonru.com/biblioteki/shemy-sqlalchemy-core)','2023-10-26','DATABASES/sqlalchemy/создание таблиц и их поля',41,3),(134,'Python','Sockets','sockets','# Пример примитивного кода сервера:\r\n\r\n\r\n\r\n> <pre>\r\nimport socket\r\nimport threading\r\n<br>\r\nHEADER = 64                                                                               - длина первого сообщения (в нём будем слать длину фактического сообщения)\r\nFORMAT = \'utf-8\'                                                                          - в сокете передаются байты, нужно как-то декодировать в строку\r\nDISCONNECT_MESSAGE = \'!DISCONNECT\'                                                        - сообщение для закрытия сокета\r\n<br>\r\nPORT = 5050                                                                               - порт сервера\r\nSERVER = \"192.168.0.106\"                                                                  - захардкоженный адрес сервера\r\nSERVER = <b>socket.gethostbyname(socket.gethostname())</b>                                       - вот так можно получить адрес сервера динамически\r\nADDR = (SERVER, PORT)\r\n<br>\r\nserver = <b>socket.socket</b>(                                                                   - создаём инстанс сервера\r\n	socket.AF_INET,                                                                          - стандартные настройки (ipv4)\r\n	socket.SOCK_STREAM                                                                       - стандартный метод передачи (TCP) SOCK_DGRAM для UDP\r\n	)\r\nserver.<b>bind(ADDR)</b>                                                                         																\r\n<br>\r\n<b>def handle_client(conn, addr):</b>                                                            - основная функция для обработки каждого сокета\r\n    print(f\"[NEW CONNECTION] {addr} connected.\")\r\n    connected = True\r\n    while connected:\r\n        msg_length = conn.<b>recv</b>(HEADER).<b>decode</b>(FORMAT)                                     - получаем первое сообщение. В нём всегда будем указывать только длину следующего сообщения\r\n        if msg_length:                                                                    - бывает, что получаем пустые сообщения (при подключении например). Такие игнорим\r\n	    msg_length = int(msg_length)\r\n	    msg = conn.recv(msg_length).decode(FORMAT)                                           - теперь мы знаем длину фактического сообщения и можем его считать.\r\n	    if msg == DISCONNECT_MESSAGE:                                                        - триггер на закрытие сокета\r\n		connected = False\r\n	    print(f\"[MESSAGE from {addr}]: {msg}\")                                               - остальная логика работы с сообщением\r\n	    <b>conn.send</b>(\"Message received\".encode(FORMAT))                                         - отправка ответа клиенту (в этот раз опустили измерение длины)\r\n	    <b>conn.send(bytes(\"Another way to send msg\", \"utf-8\"))</b>                                 - альтернатива .encode\r\n    conn.<b>close()</b>\r\n<br>\r\ndef start():                                                                              - функция запуска сервера\r\n    <b>server.listen(5)</b>                                                                      - стартуем сервер. Ограничиваем на 5 одновременных соединений\r\n    print(f\"[LISTENING] Server listening on {SERVER}\")\r\n    while True:\r\n        conn, addr = <b>server.accept()</b>                                                      - так получаем новый запрос на коннект, сохраняем нужные данные и передаём обработку в отдельный thread\r\n        thread =<b> threading.Thread</b>(target=handle_client, args=(conn, addr))\r\n        thread.<b>start()</b>\r\n        print(f\"[ACTIVE CONNECTIONs] {<b>threading.active_count() - 1</b>}\")                     - так можно посчитать кол-во активных threads\r\n<br>\r\nprint(\"Server started...\")\r\nstart()                                                                                   - запуск\r\n> </pre>\r\n\r\n# Примитивный клиент:\r\n\r\n\r\n\r\n> <pre>\r\nimport socket\r\n<br>\r\nHEADER = 64\r\nFORMAT = \'utf-8\'\r\nDISCONNECT_MESSAGE = \'!DISCONNECT\'\r\n<br>\r\nPORT = 5050\r\nSERVER = \"172.29.64.1\"                                                                    - узнаём и указываем адрес сервера\r\nADDR = (SERVER, PORT)\r\n<br>\r\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\nclient.<b>connect</b>(ADDR)                                                                      - клиенты подключаются вот так													\r\n<br>\r\ndef send(msg):                                                                            - функция отправки сообщения\r\n    message = msg.encode(FORMAT)                                                          - переводим в байты и узнаём длину\r\n    msg_length = len(message)\r\n    send_length = str(msg_length).encode(FORMAT)                                          - переводим длину в байты и добиваем её до установленной в HEADER длины\r\n    send_length += b\' \' * (HEADER - len(send_length))\r\n    client.<b>send</b>(send_length)                                                              - шлём длину сообщения\r\n    client.<b>send</b>(message)                                                                  - шлём само сообщение\r\n    print(client.recv(1024).decode(FORMAT))                                               - так получаем ответ от сервера (опустили протокол с определением точной длины)\r\n\r\n> </pre>\r\n\r\n---\r\n\r\n# Для отправки через сокет чего-то кроме строк используй JSON или PICKE:\r\n\r\n\r\n\r\n> <pre>\r\nimport pickle\r\n<br>\r\nd = {1: \"a\", 2: \"b\"}\r\nmsg = <b>pickle.dumps(d)</b>                                       - это уже байты, можно отсылать\r\nd = <b>pickle.loads(msg)</b>                                       - вернёт обратно из байтов в словарь\r\n> </pre>\r\n\r\n---\r\n\r\n# Сервер чат-рума с несколькими участниками\r\n\r\n\r\n\r\n> <pre>\r\nimport socket\r\nimport threading\r\n<br>\r\nHEADER_LENGTH = 10\r\nLISTEN_LIMIT = 5<br>\r\nIP = \"127.0.0.1\"\r\nPORT = 1234\r\n<br>\r\nactive_clients = []                                                                       - список, где храним всех клиентов таплами (socket, username)\r\n<br>\r\ndef listen_for_messages(client_socket, username):                                         - функция слушает конкретный сокет и пересылает сообщение всем участникам чат-рума\r\n    while True:\r\n        message = client_socket.recv(2048).decode(\'utf-8\')\r\n        if not message:\r\n            continue\r\n        message_to_all = f\"[{username}]: {message}\"\r\n        <b>send_messages_to_all</b>(message_to_all)                                              - простенькая рукописная функция для отсылки сообщения всем из списка\r\n<br>\r\ndef send_message(client_socket, message):                                                 - простенькая функция для отсылки сообщения конкретному клиенту\r\n    client_socket.<b>sendall</b>(message.encode(\'utf-8\'))                                        - пока не знаю в чём отличие от send\r\n<br>\r\ndef send_messages_to_all(message):                                                        - просто проходим по циклу и шлём сообщение каждому\r\n    for client in active_clients:\r\n        send_message(<b>client[1]</b>, message)                                                  - это сохранённый клиентский сокет\r\n<br>\r\ndef <b>handle_client</b>(client_socket):                                                         - получить username и сохранить клиента в списке, передать обработку сообщений новому thread\r\n    while True:\r\n        username = client_socket.recv(2048).decode(\'utf-8\')                               - по протоколу первым сообщением клиент должен передать свой username\r\n        if username:\r\n            active_clients.append((username, client_socket))                              - сохраняем юзера и шлём всем в чат, что такой-то присоединился\r\n            msg = f\"[SERVER] User {username} has joined the chat\"\r\n            send_messages_to_all(msg)\r\n            break\r\n    <b>threading.Thread</b>(                                                                     - этот thread будет слушать и обрабатывать остальные сообщения конкретного клиента\r\n	<b>target=listen_for_messages</b>, args=(                                                       - так в thread передаются функция-обработчик и аргументы\r\n		client_socket, username)).<b>start()</b>\r\n<br>\r\ndef main():\r\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    server_socket.bind((IP, PORT))\r\n    print(f\"[SERVER] Server is running\")\r\n    server_socket.listen(LISTEN_LIMIT)\r\n<br>\r\n    while True:\r\n        client_socket, client_addr = server_socket.accept()\r\n        print(f\"[SERVER] client {client_addr} connected\")\r\n        threading.Thread(												- тред для каждого клиента\r\n			target=handle_client, args=(client_socket, )).start()\r\n<br>\r\nif \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\":\r\n    main()\r\n> </pre>\r\n\r\n# Клиент, который отправляет и слушает сообщения:\r\n\r\n\r\n\r\n> <pre>\r\nimport socket\r\nimport threading\r\n<br>\r\nHEADER_LENGTH = 10\r\nIP = \"127.0.0.1\"\r\nPORT = 1234\r\n<br>\r\ndef listen_for_msg_from_server(client_socket):                                            - просто слушаем всё, что пришлёт сервер, декодим и принтим в терминал\r\n    while True:\r\n        message = client_socket.recv(2048).decode(\'utf-8\')\r\n        if not message:\r\n            continue\r\n        print(message)\r\n<br>\r\ndef send_message_to_server(client_socket):                                                - получить сообщение от юзера и отправить его на сервер\r\n    while True:\r\n        message = input(\"Message: \")\r\n        if not message:\r\n            exit(0)\r\n        client_socket.sendall(message.encode(\"utf-8\"))\r\n<br>\r\ndef communicate_with_server(client_socket):                                               - по протоколу отправляем первым сообщением username\r\n    username = input(\"Enter your username: \")\r\n    if not username:\r\n        exit(0)\r\n    client_socket.sendall(username.encode(\"utf-8\"))\r\n    <b>threading.Thread</b>(                                                                     - запускаем отдельный thread для прослушки сервера\r\n        target=listen_for_msg_from_server,\r\n        args=(client_socket,)).start()                                                           - аргументы передаются таплом\r\n    <b>send_message_to_server</b>(client_socket)                                                 - параллельно с прослушкой сервера ждём пока юзер что-то напечатает\r\n<br>\r\ndef main():\r\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    try:\r\n        client_socket.connect((IP, PORT))\r\n        print(f\"[CLIENT] Client connected\")\r\n    except:\r\n        print(f\"[CLIENT] Unable to connect to server {IP}, {PORT}\")\r\n    communicate_with_server(client_socket)\r\n<br>\r\nif \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\":\r\n    main()\r\n> </pre>','2024-08-27','PYTHON/sockets',7,4),(135,'FastAPI','Strawberry','strawberry','Документация: https://strawberry.rocks/docs/integrations/fastapi\r\n<br>\r\nУстановка: `pip install \'strawberry-graphql[fastapi]\'`<br>\r\n\r\n### Настройка роутера (обычно в main.py):\r\n\r\n\r\n> <pre>\r\nimport strawberry\r\nfrom fastapi import FastAPI\r\nfrom strawberry.fastapi import <b>GraphQLRouter</b>                - роутер типа APIRouter, только не для REST а для Graph\r\nfrom <b>some_grapg_file import Query, Mutation, Subscription</b>                 - это логика того, что мы можем делать с нашим graph (опишем в отдельном файле)\r\n<br>\r\nschema = <b>strawberry.Schema</b>(query=Query, mutation=Mutation,  - схема связывает нашу логику с приложением и описывает что позволено запрашивать\r\n    subscription=Subscription)		\r\ngraphql_app = <b>GraphQLRouter(schema)</b>                         - роутер, чтобы приложение могло получать запросы на один конкретный эндпоинт для graph\r\n<br>\r\napp = FastAPI()\r\napp.<b>include_router(graphql_app, prefix=\"/graphql\")</b>          - подключаем роутер, по маршруту /graphql\r\n> </pre>\r\n\r\n\r\n### Файл с логикой работы графа:\r\n\r\n\r\n\r\n> <pre>\r\nfrom random import randint\r\nimport strawberry\r\nfrom typing import List, Union\r\nfrom models.users import User\r\nfrom mongo_helper import get_db\r\n<br>\r\n<b>@strawberry.type</b>                                            - у strawberry всё прикрыто этим декоратором\r\n<b>class User</b>:                                                 - это описание структуры объекта, который мы будем возвращать на запрос. \r\n    id: int\r\n    name: str\r\n<br>\r\n@strawberry.type\r\n<b>class Query</b>:                                                - Query - это для получения данных\r\n    <b>@strawberry.field</b>                                       - функции получения данных живут в классе Query, и с декоратором field\r\n    <b>async def users</b>(self) -> List[User]:                    - тут лежит логика запроса на получение всех юзеров\r\n        db = get_db()\r\n        users = []\r\n        users_from_db = await db[\"users\"].find().to_list(None)\r\n        for user_data in users_from_db:\r\n            <b>user = User</b>(id=user_data[\"id\"], name=user_data[\"name\"])  - формирует ответ, как объект класса User, описанный выше\r\n            users.append(user)\r\n        return users\r\n<br>\r\n    @strawberry.field\r\n    async def user(<b>self, id: int</b>) -> Union[User, None]:     - получаем одного конкретного юзера. В параметрах обязательно self\r\n        db = get_db()\r\n        user_data = await db[\"users\"].find_one({\"id\": id})\r\n        if user_data:\r\n            return User(id=user_data[\"id\"], name=user_data[\"name\"])\r\n        else:\r\n            return\r\n<br>\r\n@strawberry.type\r\n<b>class Mutation:</b>                                             - Mutation - это для <b>создания/обновления/удаления</b>\r\n    @strawberry.<b>mutation</b>                                    - функции изменения данных прикрыты декоратором mutation\r\n    async def create_user(self, name: str) -> User:\r\n        db = get_db()\r\n        id = randint(1, 100)\r\n        user = {\"name\": name, \"id\": id}\r\n        await db[\"users\"].insert_one(user)\r\n        return <b>User</b>(id=id, name=user[\"name\"])               - везде возвращаем описанный выше User!!!\r\n<br>\r\n    @strawberry.mutation\r\n    async def update_user(self, id: int, name: str) -> User:\r\n        db = get_db()\r\n        await db[\"users\"].update_one({\"id\": id}, {\"$set\": {\"name\": name}})\r\n        updated_user = await db[\"users\"].find_one({\"id\": id})\r\n        return User(id=updated_user[\"id\"], name=updated_user[\"name\"])\r\n<br>\r\n    @strawberry.mutation\r\n    async def delete_user(self, id: int) -> User:\r\n        db = get_db()\r\n        deleted_user = await db[\"users\"].find_one_and_delete({\"id\": id})\r\n        return User(id=deleted_user[\"id\"], name=deleted_user[\"name\"])\r\n<br>			\r\n@strawberry.type\r\n<b>class Subscription</b>:                                         - Subscription - это для подписок и стриминга данных через вебсокет\r\n    @strawberry.<b>subscription</b>                                - подписки прикрываются своим декоратором\r\n    async def count(self, target: int = 100) -> int:        - далее идёт функция со своей логикой\r\n        for i in range(target):\r\n            yield i\r\n            await asyncio.sleep(0.5)\r\n> </pre>','2024-08-27','FASTAPI/интеграция с graphql/strawberry',42,3),(136,'FastAPI','Как делать запросы на графовый endpoint','kak-delat-zaprosy-na-grafovyi-endpoint','В браузере вводим URL http://localhost:8000/graphql, получаем окно, в котором можно выполнять наши запросы\r\n\r\n\r\n> <pre>\r\n<b>query MyQuery</b>{                                              - для получения данных начинаем запрос с query, название может быть любым\r\n  <b>users</b>{                                                    - это имя функции, которая реализует выдачу всех юзеров (<u>функции должны быть в CAMEL-шрифте!!!</u>)\r\n    id, name                                                - это поля, которые нужно выводить (можно запрашивать только те, что нужно, а не все описанные)\r\n  }\r\n}\r\n<br>\r\nquery MyQuery{\r\n  user(<b>id: 76</b>){                                             - если функция требует параметров, вводим их вот так\r\n    name\r\n  }\r\n}\r\n<br>\r\n<b>mutation MyMute</b>{                                            - для изменения данных начинаем запрос с mutation\r\n  <b>updateUser</b>(id: 76, name: \"updated name\"){                 - функция в коде update_user, но в запросе используем CAMEL-шрифт (граф сам подскажет) + задаём параметры\r\n    name\r\n  }\r\n}\r\n<br>\r\n<b>subscription MySubs</b>{                                        - для подписки начинаем запрос со слова subscription\r\n  count(target: 20)\r\n}\r\n> </pre>','2024-08-27','FASTAPI/интеграция с graphql/как делать запросы на графовый endpoint',42,3),(137,'FastAPI','Схемы','skhemy','Схемы могут быть довольно сложной структуры. Тут и вложенные объекты, и функции получения конкретных полей и пр.\r\nЧитай документацию: https://strawberry.rocks/docs/general/schema-basics\r\n\r\n\r\n#### Пара простых примеров:\r\n\r\n\r\n> <pre>\r\n@strawberry.type\r\n<b>class Book</b>:                                                 - это будет вложенная схема\r\n    title: str\r\n    author: \"Author name\"\r\n<br>\r\n@strawberry.type\r\nclass Author:\r\n    name: str\r\n    books: <b>typing.List[Book]</b>                                - вкладываем одну схему в другую\r\n<br>\r\ndef <b>get_author_for_book(root)</b> -> \"Author\":                  - можем в схемах использовать функции, которые что-то будут делать\r\n    return Author(name=\"Michael Crichton\")\r\n<br>\r\n@strawberry.type\r\nclass Book:\r\n    title: str\r\n    author: \"Author\" = <b>strawberry.field</b>(\r\n        <b>resolver=get_author_for_book</b>)                       - используем функцию, чтобы заполнить данные поля схемы\r\n> </pre>','2024-08-27','FASTAPI/интеграция с graphql/схемы',42,3),(138,'Databases','Neo4j','neo4j','## Neo4j - графовая база данных.\r\n\r\nОсновная фишка графовых баз в том, что есть <b>Nodes</b>, в которых хранятся аттрибуты (по сути это объекты базы данных), и есть <b>Relationships</b> - сущности, хранящие информацию о взаимосвязи между объектами (могут также хранить свои аттрибуты).\r\nТакой подход позволяет быстро получать и строить произвольные взаимосвязи.<br>\r\nИспользует свой язык запросов <b>cypher</b>\r\n\r\n### Основные операторы языка cypher:\r\n\r\n\r\n\r\n> <pre>\r\n<b>MATCH</b>                                                       - для поиска\r\n<b>RETURN</b>                                                      - для выдачи\r\n<b>()</b>                                                          - так обозначается node, внутри могут быть параметры (n)\r\n<b>WHERE</b>                                                       - указать условия (фильтр)\r\n<b>AND</b>                                                         - указать несколько условий\r\n<b>OR</b>                                                          - классическое или для условий\r\n<b>NOT</b>                                                         - классическое не для условий\r\n<b>AS</b>                                                          - задать alias\r\n<b>SKIP</b>                                                        - пропустить сколько-то первых нодов\r\n<b>LIMIT</b>                                                       - ограничить вывод определенным кол-вом\r\n<b>ORDER BY</b> ... <b>DESC/ASC</b>                                       - упорядочивание вывода\r\n<br>\r\n<b>COUNT</b>                                                       - аггрегация, суммировать что-то\r\n<b>AVG</b>                                                         - аггрегация, среднее\r\n<b>SUM, MAX, MIN</b>\r\n<br>\r\n<b>DELETE</b>                                                      - удалить нод\r\n<b>DETACH</b>                                                      - удалить relationship\r\n<b>SET</b>                                                         - изменение/добавление аттрибутов\r\n<br>\r\n<b>=</b>                                                           - равенство\r\n<b><></b>                                                          - неравенство\r\n<b>>=, <, ></b>\r\n> </pre>\r\n\r\n---\r\n\r\n### Примеры поисковых запросов в базу:\r\n\r\n\r\n<table>\r\n\r\n<tr><td><b>MATCH</b> (n) <b>RETURN</b> n</td>                                             <td>- найти и вывести все ноды c их связями (по сути вся БД). n - это произвольное имя переменной</td></tr>\r\n<tr><td>MATCH (<b>player:PLAYER</b>) RETURN player</td>                                   <td>- вывести только ноды игроков. У нодов есть labels, по которым их можно отличать (игроки/трененры/команды)</td></tr>\r\n<tr><td>MATCH (player:PLAYER) RETURN <b>player.name, player.age</b></td>                  <td>- выведет табличку с указанными атрибутами нодов (таблица с именем и возврастом игрока)</td></tr>\r\n<tr><td>MATCH (player:PLAYER) RETURN player.name <b>AS fullname</b></td>                  <td>- так можно задавать alias`ы к выводимым полям</td></tr>\r\n<tr><td>MATCH (p:PLAYER) <b>WHERE p.name = \"LeBron James\"</b> RETURN p</td>               <td>- искать ноды с конкретными значениями атрибутов</td></tr>\r\n<tr><td>MATCH (p:PLAYER) <b>WHERE ID(p) = 0</b> RETURN p</td>                             <td>- <b>ИСКЛЮЧЕНИЕ</b>. Поиск по ID работает так и только так</td></tr>\r\n<tr><td>MATCH (p:PLAYER) WHERE p.name <> \"LeBron James\" RETURN p</td>                     <td>- все ноды, у кого имя НЕ \"LeBron James\"</td></tr>\r\n<tr><td>MATCH (p:PLAYER <b>{name: \"LeBron James\", age: 36}</b>) RETURN p</td>             <td>- то же что и выше без WHERE, можно указывать много параметров для фильтра</td></tr>\r\n<tr><td>MATCH (<b>lebron</b> {name: \"LeBron James\"}) RETURN lebron</td>                   <td>- <u>лейбл указывать необязательно</u>, можно искать тупо по аттрибутам</td></tr>\r\n<tr><td>MATCH (p:PLAYER) <b>WHERE p.height >=2</b> RETURN p</td>                                 <td>- пример с больше или равно</td></tr>\r\n<tr><td>MATCH (p:PLAYER) <b>WHERE (p.weight / (p.height * p.height)) > 25</b> RETURN p</td><td>- пример с арифметикой внутри фильтра</td></tr>\r\n<tr><td>MATCH (p:PLAYER) <b>WHERE p.height >=2 AND p.age < 33</b> RETURN p</td>           <td>- пример с несколькими условиями</td></tr>\r\n<tr><td>MATCH (p:PLAYER) WHERE p.height >=2 <b>OR</b> p.age < 33 RETURN p</td>            <td>- пример с ИЛИ</td></tr>\r\n<tr><td>MATCH (p:PLAYER) <b>WHERE NOT</b> p.height >2 RETURN p</td>                       <td>- пример с логическим НЕ</td></tr>\r\n<tr><td>MATCH (n) RETURN n <b>SKIP 2 LIMIT 2</b></td>                                     <td>- пропустить первые два нода и показать только 2 следующих (т.е. 3й и 4й)</td></tr>\r\n<tr><td>MATCH (p:PLAYER) RETURN p <b>ORDER BY p.height DESC</b></td>                      <td>- упорядочить по убыванию</td></tr>\r\n<tr><td>MATCH <b>(p:PLAYER), (c:COACH)</b> RETURN p, c</td>                               <td>- вывод нодов двух типов</td></tr>\r\n    \r\n</table>\r\n\r\n---\r\n\r\n### Многоэтапные запросы, агрегации и запросы по relationships:\r\n\r\n\r\n<table>\r\n    <tr><td>MATCH <b>(p:PLAYER) -[:PLAYS_FOR]-> (t:TEAM)</b><br>\r\nWHERE t.name = \"LA Lakers\" RETURN <b>p, t</b></td>                                            <td>- так делаются запросы по relationships. Relationship всегда односторонний, ему тоже можно назначить переменную (-[plays:PLAYS_FOR]->)<br>\r\n  запрос вернёт всех игроков, которые играют за команду	\"LA Lakers\" и нод самой команды	</td></tr>\r\n<tr><td></td></tr>\r\n       \r\n\r\n<tr>\r\n    <td>MATCH (t:TEAM) <b><-[plays:PLAYS_FOR]-</b> (p:PLAYER)</td>                        <td>- то же самое, просто указано в другом направлении</td><tr>\r\n<tr><td></td></tr>\r\n<tr><td>MATCH (p:PLAYER) -[<b>contract</b>:PLAYS_FOR]-> (:TEAM)<br>\r\n<b>WHERE contract.salary</b> >= 28000000 RETURN p</td>                                    <td>- relationships тоже имеют аттрибуты, по которым тоже можно фильтровать ноды<br>\r\n- выведет игроков, которые получают в год больше 28млн. Зарплата указана не в ноде, а в relationship</td></tr>\r\n<tr><td></td></tr>\r\n    \r\n    <tr><td><b>MATCH</b> (p:PLAYER {name: \"LeBron James\"}) -[:TEAMMATES]-> (p2:PLAYER)<br>\r\n<b>MATCH</b> (p2) -[contract:PLAYS_FOR]-> (t:TEAM)<br>\r\n<b>WHERE</b> contract.salary >= 20000000<br>\r\nRETURN p2, t</td>                                                                         <td>- можно делать несколько этапов поиска. Первым этапом нашли всех, кто играет в одной команде с LeBron<br>\r\n- тут уже можно не указывать лейбл для p2<br>\r\n- тут уже фильтруем зарплаты игроков<br>\r\n- задача была найти всех teammates для игрока LeBron James с зарплатой больше 20млн</td></tr>\r\n<tr><td></td></tr>\r\n<tr><td>MATCH (p:PLAYER) -[against:PLAYED_AGAINST]-> (team:TEAM)<br>\r\nRETURN p.name, <b>COUNT</b> (against)</td>                                                <td>- небольшой запрос аггрегации<br>\r\nтут считаем кол-во relationships типа PLAYED_AGAINST для каждого игрока</td></tr>\r\n<tr><td></td></tr>\r\n<tr><td>или RETURN p.name, <b>AVG</b> (against.points)	AS ppg</td>                               <td>- среднее кол-во очков за игру</td></tr>    \r\n    \r\n</table>\r\n\r\n---\r\n\r\n### Удаление, создание, обновление\r\n\r\n!!!Нод не удалится, если у него есть какие-то relationships. Сначала нужно удалить их. Это делается одним единственным словом <b>DETACH</b>\r\n\r\n\r\n<table>\r\n    <tr><td>MATCH (p {name: \"Ja Morant\"}) <b>DETACH DELETE</b> p</td>                     <td>- удалить relationships (DETACH) и удалить нод</td></tr>\r\n    <tr><td>MATCH (p: PLAYER {name: \"Joel\"}) -[<b>rel</b>:PLAYS_FOR]-> (:TEAM)<br>\r\n<b>DELETE rel</b></td>                                                                    <td>- удалить конкретный relationship</td></tr>\r\n<tr>\r\n    <td>MATCH (n) DETACH DELETE n</td>                                                    <td>- <u>удалить всё и вся</u></td></tr>\r\n    \r\n</table>\r\n<br>\r\n\r\n\r\n<table>\r\n    <tr><td><b>CREATE</b> (:PLAYER:COACH:MANAGER {name: \"LeBron James\", age: 32})</td>    <td>- CREATE создаёт ноды, нодам можно давать много лейблов за раз</td></tr>\r\n<tr><td>CREATE (p:PLAYER {name: \"bla\", age: 31}) RETURN p</td>                            <td>- создать и сразу же вернуть нод</td></tr>\r\n<tr><td>CREATE (:PLAYER) -[:PLAYS_FOR {salary: 20}]-> (:TEAM {name: \"Lakers\"})</td>       <td>- создаст пустую ноду игрока, ноду команды с именем Lakers и relation между ними с зарплатой</td></tr>\r\n<tr><td></td></tr>\r\n<tr><td>MATCH (p:PLAYER {name: \"A\"}), (t:TEAM {name: \"X\"})<br>\r\nCREATE (p) -[:PLAYS_FOR {salary: 30})-> (t)</td><td>- создаём relationship между двумя нодами, сначала ищем их<br>\r\nпотом с помощью CREATE создаём relationship</td></tr>\r\n    \r\n</table>\r\n<br>\r\n\r\n\r\n<table>\r\n    <tr><td>MATCH (p:PLAYER) WHERE ID(p) = 3<br>\r\n<b>SET p.name = \"Anthony\", p.age = 31, p:TEST</b><br>\r\nRETURN p</td><td>- изменение и добавление аттрибутов для ноды + добавление ещё одного лейбла</td></tr>\r\n<tr><td></td></tr>\r\n<tr><td>MATCH (p:PLAYER {name: \"bla\"}) -[<b>c</b>:PLAYS_FOR]-> (t:TEAM)<br>\r\n<b>SET c.salary</b> = 50<br>\r\nRETURN p, t</td><td>- - находим и изменяем relationship</td></tr>\r\n<tr><td></td></tr>\r\n<tr><td>MATCH (lebron {name: \"LeBron James\"})<br>\r\n<b>REMOVE</b> lebron.age, lebron:TEST<br>\r\nRETURN lebron</td><td>- находим нод и удаляем его аттрибут<br>\r\n- можно удалять как аттрибуты так и отдельные лейблы (остальные останутся)</td></tr>    \r\n</table>','2024-08-27','DATABASES/neo4j',13,4),(139,'FrontEnd','Тестим ИИ','testim-ii','<h1>/// Страницы, которые доступны только админу/уполномоченным. Например детали и статус всех заказов. Закрываются специальным декоратором.</h1>\r\n\r\n<p>Делаются в views любого нужного application, просто в html подтягивается не base.html, а admin/base_site.html и css - так эта страница будет выглядеть похожей на админ-сайт</p>\r\n\r\n<h2>vviews для просмотра деталей заказа в приложении order:</h2>\r\n\r\n<pre>from django.contrib.admin.views.decorators import staff_member_required\r\nfrom django.shortcuts import get_object_or_404\r\nfrom .models import Order\r\n\r\n@staff_member_required																- декоратор, который пустить только уполномоченных пользователей\r\ndef admin_order_detail(request, order_id):\r\n	order = get_object_or_404(Order, id=order_id)\r\n	return render(request, \'admin/orders/order/detail.html\',						- в templates будет новая ветка файлов для admin\r\n		{\'order\': order})</pre>\r\n\r\n<h2>urls.py для таких views:</h2>\r\n\r\n<pre>path(\'admin/order/<int:order_id>/\', views.admin_order_detail,\r\n	name=\'admin_order_detail\'),</pre>\r\n\r\n<h1>/// создаём в templates ветку папок для admin-темплэйтов, схожую с обычной веткой для orders:</h1>\r\n\r\n<p>templates/admin/orders/order/detail.html</p>\r\n<p>обычная: templates/orders/order/</p>\r\n\r\n<h2>/// кусочек detail.html:</h2>\r\n\r\n<pre>{% extends \"admin/base_site.html\" %}												- костяк не base.html, а админский\r\n{% load static %}\r\n{% block extrastyle %}																- загружаем статику css для админа\r\n	<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"css/admin.css\" %}\" />\r\n{% endblock %}\r\n{% block title %}\r\n	Order {{ order.id }} {{ block.super }}											- {{ block.super }}, это \"| Django site admin\"\r\n{% endblock %}\r\n{% block breadcrumbs %}																- в костяке админа есть много дополнительных блоков, которые можно использовать\r\n	<div class=\"breadcrumbs\">															Доп. блоки можно выучить тут: https://github.com/django/django/tree/2.0/django/contrib/admin/templates/admin\r\n	...</div>\r\n{% endblock %}</pre>\r\n\r\n<h1>/// встроим ссылку на эту страницу в качестве поля в admin-модели (admin.py)</h1>\r\n\r\n<p>class OrderAdmin(admin.ModelAdmin):\r\nlist_display = [\'id\',\r\n	\'first_name\',\r\n	# ...\r\n	\'updated\',\r\n	order_detail]																	- order_detail - функция, которая \"врежет\" html-ссылку в форму, отображающую заказы order</p>\r\n\r\n<h2>/// до нужной admin-модели определяем функцию order_detail в admin.py:</h2>\r\n\r\n<pre>from django.urls import reverse\r\nfrom django.utils.safestring import mark_safe\r\n\r\ndef order_detail(obj):\r\n	return mark_safe(\'<a href=\"{}\">View</a>\'.format(\r\n	reverse(\'orders:admin_order_detail\', args=[obj.id])))</pre>','2025-01-02','FRONTEND/тестим ии',21,4),(140,'Python','UV - пакетный менеджер','uv-paketnyi-menedzher','UV - новый, современный и супер быстрый менеджер пакетов. Считается, что он станет новым стандартом и заменит собой pip, pipenv, poetry и пр.<br>\r\n\r\n<b>Сайт с документацией:</b> https://docs.astral.sh/uv/\r\n\r\n\r\n\r\n<table>\r\n<tr><td>pip install uv</td>                    <td>- установка (могуть быть и др. варианты, см. документацию</td></tr>\r\n<tr><td></td></tr>\r\n<tr><td>uv <b>init</b> project_name</td>                <td>- в текущей папке создаст ещё одну папку проекта с файлами (в т.ч. .gitignore, readme, pyproject.toml...)</td></tr>\r\n<tr><td>uv <b>run</b> main.py</td>                    <td>- запустит автоматически созданный файлик main.py, предварительно запустив вирт. окружение и установив всё зависимости из pyproject.toml</td></tr>\r\n<tr><td>uv <b>add</b> pandas fastapi</td>                <td>- установит pandas и добавит его в зависимости</td></tr>\r\n<tr><td>uv <b>pip install</b> ...</td>                <td>- то же самое</td></tr>\r\n<tr><td>uv <b>remove</b> pandas</td>                    <td>- удалить зависимость</td></tr>\r\n<tr><td>uv <b>sync</b></td>                            <td>- синхронизировать зависимости между текущим venv и тем, что есть в pyproject.toml</td></tr>\r\n<tr><td>uv <b>tree</b></td>                            <td>- выведет дерево зависимостей</td></tr>\r\n<tr><td>uv <b>venv</b></td>                            <td>- создать вирт. окружение </td></tr>\r\n<tr><td>uv python <b>list</b></td>                            <td>- посмотреть какие версии питона есть и какие можно скачать </td></tr>\r\n<tr><td>uv python <b>find 3.8</b></td>                            <td>- поискать путь до нужной версии питона на пк </td></tr>\r\n<tr><td>uv python install (uninstall) 3.12.0</td>            <td>- установить конкретную версию питона</td></tr>\r\n<tr><td>uv venv --python 3.13.0</td>            <td>- задать на каком питоне будет работать наш venv</td></tr>\r\n\r\n      \r\n\r\n\r\n \r\n</table>','2025-03-18','PYTHON/uv - пакетный менеджер',7,4),(141,'Artificial Intelligence','Aider','aider','### Aider - ИИ-агент в терминале, способный писать код и создавать файлы\r\n\r\nДокументацию можно глянуть тут: https://aider.chat/\r\n\r\nУстановка:\r\n- uv add aider-chat\r\n- pip install aider-install, а затем aider-install\r\n\r\n<i>!!!Для работы понадобятся ключи от ИИ-провайдеров, например OPENROUTER_API_KEY. Можно сложить их в .env - сам достанет</i>\r\n\r\n### Полезные команды:\r\n\r\n<table>\r\n    <tr><td>aider <b>--list-models</b> .</td>            <td>- перечислит все возможные модели</td></tr>\r\n    <tr><td>aider --list-models openrouter .</td>        <td>- модели конкретного провайдера</td></tr>\r\n    <tr><td>/add filename</td>                            <td>- добавить файл в контекст</td></tr>\r\n    <tr><td>/map</td>                                    <td>- покажет что aider знает про наш проект</td></tr>\r\n    <tr><td>/map-refresh</td>                            <td>- обновить знания про проект (по дефолту автоматически обновляет)</td></tr>\r\n    <tr><td>/tokens</td>                                <td>- сколько токенов потратил</td></tr>\r\n    <tr><td>/reset</td>                                    <td>- обнулить aider (удалит весь контекст) - если начинает тупить </td></tr>\r\n    <tr><td>/paste</td>                                <td>- можно сделать скрин экрана, сохранить его в буфере обмена и дать эту команду. Тогда aider получит этот рисунок и на его основе можно что-то сделать</td></tr>\r\n    \r\n</table>\r\n\r\n---\r\n\r\n### Настройки\r\n\r\nНаходятся в файле <i>.aider.conf.yml</i>.<br>\r\nИх очень много, но обычно тут указывают какие модели для чего использовать, какие файлы прочитать и пр.<br>\r\nНиже пример, который буду потихоньку дополнять:\r\n\r\n\r\n\r\n> <pre>\r\nmodel: openrouter/anthropic/claude-3.7-sonnet\r\nmap-tokens: 1024                                            - стандартное окно контекста (влияет на стоимость)\r\nauto-commits: false                                         - по дефолту true - автоматически в гит всё коммитит                            \r\ndark-mode: true\r\nauto-lint: true\r\nread: [CONVENTIONS.md]                                      - какие файлы прочитать перед работой (документация, указания и пр.)\r\nyes-always: true                                            - автоматически соглашаться, когда запрашивает разрешения в командной строке (на создание файлов, запуск команд и пр.)\r\n> </pre>\r\n\r\n---\r\n\r\n### Aider Convention Scraper\r\n\r\nЕсть возможность обновить/дополнить знания агента какой-то документацией: \r\n> `aider-convention-scraper some_url_with_docs`.\r\n\r\n---\r\n\r\n### CONVENTIONS.md\r\n\r\nТут можно расписать о чём проект, какие технологии используются, как писать код и прочие инструкции для ИИ. Т.е. подсказка для aider, чтобы он лучше понимал, что мы от него хотим.<br>\r\nОчень полезно и реально работает. Вот пример (потом напишу лучше из интернета):\r\n\r\n\r\n<pre>\r\n### Goal\r\n\r\nThis project is for writing a telegram bot on python using aiogram farmework.\r\n\r\n### Files\r\n\r\nDo not create .env file as it is already in repo.\r\nAll bot code should be situated in a single file named bot.py.\r\nDon`t forget to add all dependencies to requirements.txt file and install them before running a bot.\r\nAlso create a file run_bot.py to run the bot in a separate process.\r\n\r\n### Credentials\r\n\r\nTelegram bot token is in TELEGRAM_TOKEN environment variable. Use it to run the bot.\r\n</pre>','2025-03-18','ARTIFICIAL INTELLIGENCE/aider',43,4),(142,'Artificial Intelligence','Обычная crew','obychnaia-crew','### Установка и настройка\r\n\r\n`pip install crewai, \'crewai[tools]\'`<br>                                       - tools - это набор инструментов, доступных агентам (спарсить что-то, с файлами поработать, в интернет сходить и пр.)\r\n`pip install langchain ollama`                                                  - если планируем использовать локальные llm\r\n\r\nДаём команду в терминале:\r\n> `crewai create crew some-random-name`<br>\r\n                                         \r\nЭто создаст нам команду, в терминале будет спрашивать много всякой всячины по настройкам (какой ИИ, ключи, модель и пр.). В итоге получим новую папку с файлами в текущем проекте\r\n\r\n---\r\n\r\n### src/crew.py - содержит код для инстанционирования нашей команды. \r\n\r\nОпирается на файлы конфиги agents.yaml, tasks.yaml. В нём уже по дефолту 2 агента и 2 таска.<br>\r\nЕго можно и нужно редактировать для более тонкой настройки и добавления агентов в команду.<br>\r\n<i>!!! Если используем какие-то внешние модели, нужны их ключи.</i> Дописываем код, чтобы загрузить их в этот файл (например load_dotenv())\r\n\r\n\r\n\r\n> <pre>\r\nfrom crewai import Agent, Crew, Process, Task, <b>LLM</b>                              - доимпортить LLM, чтобы использовать другие ИИ-модельки\r\nfrom <b>crewai_tools</b> import SerperDevTool, ScrapeWebsiteTool, FileWriterTool       - доп. инструменты, <i>!не забудь доустановить pip install \'crewai[tools]\'</i>\r\n<br>\r\n@CrewBase\r\nclass MyLocalCrew():\r\n	\"\"\"MyLocalCrew crew\"\"\"\r\n	agents_config = \'config/agents.yaml\'                                           - тут дефолтные конфиги, их можно переписать\r\n	tasks_config = \'config/tasks.yaml\'\r\n	ollama_llm = <b>LLM</b>(                                                              - настройки для нашей ИИ-модели (можно достать из .env)\r\n		model=\'ollama/llama3.1\',\r\n		base_url=\'http://localhost:11434\'\r\n		)\r\n<br>\r\n	@agent\r\n	def researcher(self) -> Agent:\r\n		return Agent(\r\n			config=self.agents_config[\'researcher\'],\r\n			verbose=True,                                                                - чтобы выводило в терминал мыслительный процесс. Полезно для дебага и настройки.\r\n			<b>llm=self.ollama_llm</b>,                                                         - дописываем, если нужна своя llm\r\n            <b>tools=[SerperDevTool()]</b>                                             - так указываем, что конкретный агент может пользоваться инструментом (не забудь в конфиге агента написать, что он может - так лучше поймёт)\r\n		)\r\n<br>\r\n	@task\r\n	def reporting_task(self) -> Task:\r\n		return Task(\r\n			config=self.tasks_config[\'reporting_task\'],\r\n			<b>output_file=\'report.md\'</b>                                                      - можно указать, чтоб результат работы в новый файл складывал\r\n		)\r\n> </pre>\r\n\r\n---\r\n\r\n### src/main.py  - главный файл, запускает команду.\r\n\r\n\r\n\r\n> <pre>\r\nimport sys\r\nimport warnings\r\n<br>\r\nfrom crew import MyLocalCrew                                                    - тут могут быть нюансы в зависимости от того, где стартовый файл проекта\r\n<br>\r\nwarnings.filterwarnings(\"ignore\", category=SyntaxWarning, module=\"pysbd\")\r\n<br>\r\ndef run():\r\n    <b>inputs</b> = {                                                                  - эти инпуты заполнят переменные в yaml-файлах настройки. Это входные данные для ИИ.\r\n        \'topic\': \'AI LLMs\'\r\n    }\r\n    MyLocalCrew().crew().<b>kickoff(inputs=inputs)</b>                                 - вот так запускается команда, но всё обёрнуто в run-функцию для удобства						\r\n<br>\r\ndef run():                                                                      - вариант множественного запуска. Если нужно каждый элемент массива прогнать через агента.\r\n    <b>inputs_array</b> = [                                                            - просто вместо обычного инпута делаем массив словарей\r\n        {\r\n            \'topic\': \'AI agents\',\r\n            \'date\': datetime.now().strftime(\'%Y-%m-%d_%H-%M-%S\')\r\n        },\r\n        {\r\n            \'topic\': \'openai\',\r\n            \'date\': datetime.now().strftime(\'%Y-%m-%d_%H-%M-%S\')\r\n        },\r\n        {\r\n            \'topic\': \'hugging face\',\r\n            \'date\': datetime.now().strftime(\'%Y-%m-%d_%H-%M-%S\')\r\n        },\r\n    ]\r\n    MyLocalCrew().crew().<b>kickoff_for_each</b>(inputs=<b>inputs_array</b>)                  - заменяем функцию kickoff на kickoff_for_each\r\n<br>\r\n<b>run()</b>                                                                           - это нужно дописать, если хотим запускать прямо из этого файла\r\n> </pre>','2025-03-18','ARTIFICIAL INTELLIGENCE/crew ai/обычная crew',44,3),(143,'DevOps','Шпаргалка по популярным сервисам','shpargalka-po-populiarnym-servisam','VPC - приватный клауд, тут всё про networking<br>\r\nIAM - права, юзеры, доступы<br>\r\nEC2 - инстансы<br>\r\nS3  - хранилка<br>\r\nCloudFormation - разворачивать инфраструктуру кодом<br>\r\nCloudWatch		- логи по AWS<br>\r\nParameter Store - хранилка паролей, логинов и других пар-ров<br>\r\nEBS	- подключаемые к инстансам диски<br>\r\nRDS - базы данных<br>\r\nECR - встроенный докер<br>\r\nECS - встроенный docker swarm<br>\r\nEKS - Elastic Kubernetes Service\r\nElastiCache - встроенный redis','2025-03-27','DEVOPS/aws/шпаргалка по популярным сервисам',46,3),(144,'DevOps','main.tf - главный файл с ресурсами (AWS)','maintf-glavnyi-fail-s-resursami-aws','> <pre>\r\n<b>provider</b> \"aws\" {                                            - в верху основного файла обязательно указать с каким провайдером работаем! Докачает нужные плагины.\r\n    region = \"us-east-1\"\r\n}\r\n<br>\r\n<b>locals</b> {                                                    - локальные переменные. Объявляются и работают только в рамках этого файла\r\n  all_tags = \"<b>${var.environment}</b>-${var.owner}\"              - вот так можно встроить переменную в строковое значение\r\n  instance-name = \"<b>${terraform.workspace}</b>-instance\"         - вот так получаем какие-то глобальные системные значения. В этом случае имя workspace\r\n}\r\n<br>\r\n<b>resource</b> \"aws_vpc\" \"ruslan_vpc\" {                           - разные сущности тут называются ресурсами, далее идёт тип ресурса (для каждого провайдера свои) и имя (переменная, к кот. будем обращаться в файле)\r\n  cidr_block = \"10.0.0.0/16\"                                - указываем параметры\r\n  tags = {\r\n    Name = <b>local.all_tags</b>                                   - так обращаемся к локальным переменным, которые задали выше\r\n  }\r\n}\r\n<br>\r\nresource <b>\"random_password\"</b> \"postgres_pass_value\"{           - специальный ресурс для генерации рандомного пароля. <i>!Потребует доустановить плагин для terraform!</i>\r\n  length           = 16                                     - длиня пароля\r\n  special          = true                                   - нужно ли использовать спец. символы\r\n  override_special = \"_!%^\"                                 - какие символы (не)использовать\r\n}\r\n<br>\r\nresource <b>\"aws_ssm_parameter\"</b> \"pass\" {                       - ресурс AWS Parameter Store, где можно безопасно хранить креды (внутри самого AWS)\r\n  name        = \"postgress-password\"\r\n  <b>type        = \"SecureString\"</b>                              - скрытая строка, её просто так не подсмотришь\r\n  value       = <b>random_password.postgres_pass_value.result</b>  - так получаем и сохраняем значение скрытого пароля\r\n}\r\n<br>\r\nresource \"aws_ssm_parameter\" \"username\" {                   - отдельно храним username в незашифрованном виде\r\n  name        = \"postgress-username\"\r\n  type        = \"String\"\r\n  value       = \"foo\"\r\n}\r\n<br>\r\nresource <b>\"aws_subnet\"</b> \"ruslan_subnet\" {                     - подсети\r\n  vpc_id     = <b>aws_vpc.ruslan_vpc.id</b>                        - так ссылаемся на другие ресурсы, <u>описанные в этом файле</u>. Тип_ресурса.его_имя.параметр\r\n  <b>cidr_block</b> = \"10.0.1.0/24\"                                - для сабнета обязательно указать vpc и cidr_block\r\n<br>\r\n  <b>tags </b>= {                                                  - не стесняйся задавать тэги, потом по ним удобно искать нужные ресурсы\r\n    Name = \"ruslan_subnet\"\r\n  }\r\n}\r\n<br>\r\nresource <b>\"aws_security_group\"</b> \"ruslan_SG\" {                 - сначала создаётся <i>security group</i>, потом отдельно её правила\r\n  vpc_id = aws_vpc.ruslan_vpc.id\r\n  name = \"ruslan_SG\"\r\n  tags = {\r\n    Name = \"ruslan_SG\"\r\n  }\r\n}\r\n<br>\r\nresource <b>\"aws_vpc_security_group_ingress_rule\"</b> \"abc\" {      - это правило <b>на вход</b>. Есть ещё <b>egress</b> - на выход, но его используют редко.\r\n  <b>security_group_id</b> = aws_security_group.ruslan_SG.id       - привязка правила к SG\r\n  from_port = 22                                            - диапазоны портов\r\n  to_port = 22\r\n  ip_protocol = \"tcp\"                                       \r\n  <b>cidr_ipv4</b> = \"0.0.0.0/0\"                                   - диапазон ip-адресов, с которых разрешён доступ. В данном случае для всех\r\n  description = \"allowing ssh\"\r\n}\r\n<br>\r\nresource <b>\"aws_instance\"</b> \"ruslan_via_terraform\" {            - <b>EC2</b> инстанс\r\n  <b>ami</b> = \"ami-084568db4383264d4\"                             - тип image (определяет что это за ОС и её версия). Часто обновляется, смотри в EC2 AWS\r\n  <b>instance_type</b> = \"t3.micro\"                                - CPU/RAM\r\n  <b>key_name</b> = \"devops\"                                       - креды и ключи от AWS\r\n  subnet_id = aws_subnet.ruslan_subnet.id\r\n  <b>vpc_security_group_ids</b> = [aws_security_group.ruslan_SG.id]- политики назначаются <u>списком</u>\r\n  <b>associate_public_ip_address</b> = true                        - выдавать ли публичный ip-адрес\r\n  <b>root_block_device</b> {                                       - это настройки жёсткого диска\r\n    volume_type = \"gp3\"\r\n    volume_size = 12\r\n  }\r\n<br>\r\n  tags = {\r\n    Name = \"ruslan_via_terraform\"\r\n  }\r\n}\r\n<br>\r\nresource <b>\"aws_db_instance\"</b> \"ruslan-db\" {                    - создание базы данных (сервис RDS)\r\n  <b>identifier</b>           = var.db_identifier                  - имя базы в облаке, <u>значение берём из отдельного файла с переменными</u> <i>(см. другую шпаргалку)</i>\r\n  allocated_storage    = var.storage\r\n  db_name              = var.db_name\r\n  engine               = var.engine\r\n  engine_version       = var.engine_version\r\n  instance_class       = var.instance_class\r\n  username             = aws_ssm_parameter.username.value   - логин/пароль, созданные выше\r\n  password             = aws_ssm_parameter.pass.value\r\n  skip_final_snapshot  = true                               - ускорит созданые базы, т.к. не будет делать снэпшот при создании\r\n  apply_immediately    = true                               - применит изменения сразу (по дефолту некоторые изменения идут с задержкой - применяются в maintanence window)\r\n}\r\n> </pre>','2025-03-27','DEVOPS/terraform/main.tf - главный файл с ресурсами (aws)',47,3),(145,'DevOps','Data & output','data-output','## DATA - знает всё о твоей инфраструктуре\r\n\r\nИспользуется, когда нам нужно переиспользовать уже созданные ресурсы. Например у нас в аккаунте AWS уже крутится какая-то инфраструктура и очень хорошо настроены security groups. Но это всё было описано в каких-то других файлах конфигурации.<br>\r\nВместо того, чтобы писать всё по новой, можно через <i>data</i> вычитать информацию об этих SG непосредственно с AWS и потом использовать её в новом проекте.\r\n\r\n> <pre>\r\nprovider \"aws\" {\r\n    region = \"us-east-1\"\r\n}\r\n<br>\r\n<b>data</b> \"aws_security_group\" \"existing_SGs\" {                  - обычно настраивается в самом начале файла. Правила те же: data тип_ресурса имя_переменной_в_этом_файле\r\n    <b>filter</b> {                                                - фильтры, которые помогут найти только то, что нам нужно\r\n        <b>name</b> = \"description\"                                - параметр, по которому будем искать SG (в нашем случае description)\r\n        values = [\"launch-wizard-1 <b>*</b>\"]                      - по итогу ищем все SG`s, у которых description начинается с launch-wizard-1 \r\n    }\r\n}\r\n<br>\r\n<b>data</b> \"aws_instance\" \"specific_EC2\" {                        - data может быть не одна, сюда можно докидывать сколько хочешь параметров\r\n  ...\r\n<br>\r\nresource \"aws_instance\" \"ruslan_via_terraform\" {\r\n  ami = \"ami-084568db4383264d4\"\r\n  ...\r\n  vpc_security_group_ids = [<b>data.existing_SGs.id</b>]           - вот так ссылаемся на параметры из <b>data</b>\r\n  associate_public_ip_address = true\r\n  ...\r\n}\r\n> </pre>\r\n\r\n---\r\n\r\n## Output - вывод информации и результатов работы\r\n\r\nПри создании инфраструктуры, многие параметры назначаются динамически и уже после создания каких-то ресурсов. Например, id`шники EC2.\r\nЕсли для чего-то нужно узнать такие данные - используют <i>output</i>, он позволяет вывести запрашиваемую информацию в терминал (и скорее всего ещё много куда).<br>\r\n<i>/!\\ Также используется в модулях, чтоб другие ресурсы могли использовать эту информацию у себя.</i>\r\n\r\n\r\n\r\n> <pre>\r\nprovider \"aws\" {\r\n    region = \"us-east-1\"\r\n}\r\n<br>\r\ndata \"aws_security_group\" \"existing_SGs\" {\r\n    filter {\r\n        name = \"description\"\r\n        values = [\"launch-wizard-1 *\"]\r\n    }\r\n}\r\n<br>\r\n<b>output</b> \"SG_id\" {                                            - по завершении работы распечатает в терминале переменную SG_id и её значение\r\n  value = data.aws_security_group.existing_SGs.id\r\n}\r\n> </pre>\r\n\r\n### Output в модулях (файл outputs.tf)\r\n\r\n<b>main.tf модуля:</b>                                      - в каком-то модуле создаём какой-то ресурс\r\n\r\n> <pre>\r\nresource \"aws_vpc\" \"eks_vpc\" {\r\n    cidr_block = var.eks_vpc_cidr_block\r\n    tags = {\r\n        Name = var.global_tag\r\n    }\r\n}\r\n> </pre>\r\n\r\n<b>outputs.tf:</b>                                          - в файле outputs.tf этого же модуля регистрируем вывод, чтоб можно было обратиться к этой информации из родительского модуля\r\n\r\n> <pre>\r\noutput <b>\"eks_vpc\"</b> {                                          - будем обращаться по этому имени\r\n  value = aws_vpc.eks_vpc                                   - тип ресурса и его имя из main.tf модуля\r\n  description = \"The VPC created for EKS cluster\"\r\n}\r\n> </pre>\r\n\r\n<b>main.tf основного файла</b>                              - используем информацию в родительском модуле\r\n\r\n> <pre>\r\nmodule \"eks\" {\r\n    source  = \"terraform-aws-modules/eks/aws\"\r\n    version = \"19.15.3\"\r\n    cluster_name = var.eks_cluster_name\r\n    cluster_version = \"1.32\"\r\n    <b>vpc_id = module.eks_network.eks_vpc.id</b>                  - синтаксис: <i>module.module_name.declared_output.attribute</i>\r\n> </pre>','2025-03-27','DEVOPS/terraform/data & output',47,3),(146,'DevOps','variables','variables','Переменные можно и нужно хранить в отдельных файлах. Это позволит переиспользовать код, поменяв всего лишь файлик с переменными.<br>\r\nПолучить доступ к переменным можно автоматически в основном файле через <b><i>var.variable_name</i></b>.\r\n\r\n### variables.tf - основной файл с переменными\r\n\r\n> <pre>\r\n<b>variable</b> \"db_identifier\" {                                  - ресурс и его имя\r\n    type = string                                           - тип\r\n    default = \"ruslan-db\"                                   - значение\r\n}\r\n<br>\r\nvariable \"storage\" {\r\n    type = <b>number</b>                                           - для чисел\r\n    default = 20\r\n}\r\n<br>\r\nvariable \"cidr_block\" {                                     - <b>переменная без значения</b>. Запросит значение при запуске основного файла, либо можно указать откуда брать значение (см. ниже)\r\n  type = string\r\n}\r\n> </pre>\r\n\r\n### .tfvars - переменные для workspaces\r\n\r\nИногда в основном <i>variables.tf</i> переменные задаются без конкретного значения (как в последнем примере). А сами значения хранятся в файлах <b>.tfvars</b> - разный файл для каждого workspace.\r\n\r\n> <pre>\r\ncidr_block = \"10.0.0.0/16\"                                  - т.е. как в .env почти\r\ninstance_class = \"db.t3.micro\"\r\nstorage = 20\r\n> </pre>\r\n\r\n<i>!!!В таком случае при запуске terraform нужно указывать путь к такому файлу:</i> <br>\r\n\r\n> <b>`terraform apply -var-file ./qa.tfvars`</b><br>\r\n> <b>`terraform destroy -var-file ./qa.tfvars`</b>','2025-03-27','DEVOPS/terraform/variables',47,3),(147,'DevOps','Команды, документация и пр.','komandy-dokumentatsiia-i-pr','Документацию можно глянуть вот тут: [Доки для AWS](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group).<br>\r\n!!! Для полноценной работы нужен VPN.<br>\r\n!!! Если используешь для AWS - установи и настрой (авторизуйся) сначала <b>aws cli</b>\r\n\r\n### Буквально пару команд:\r\n\r\n> <pre>\r\nterraform <b>init</b>                                              - посмотрит какой провайдер используется и скачает для него плагины\r\nterrafprm <b>plan</b>                                              - покажет, что планируется сделать. Полезно для быстрой предварительной проверки на ошибки\r\nterraform <b>destroy</b>                                           - удалит всю описанную инфраструктуру\r\n<br>\r\nterraform <b>workspace list</b>                                    - покажет все workspace (старая история, сейчас только на старых проектах исп-ся)\r\nterraform workspace <b>select</b> name                             - переключиться на конкретный workspace\r\n> </pre>','2025-03-27','DEVOPS/terraform/команды, документация и пр.',47,3),(148,'DevOps','backend','backend','### Backend - для отслеживания текущей конфиги и статуса. \r\n\r\n<b>backend</b> - это про файлик с расширением <i>.tfstate</i>, в котором хранится то, что по факту уже применено в инфраструктуре. Каждый раз, когда запускаем <i>terraform apply</i>, terraform сверяется с этим файликом и определяет, что делать нужно, а что и так уже готово. Т.е. тут актуальный <i>state</i> инфраструктуры.<br>\r\nХранить такой файл рекомендуется не локально, а где-то в <u>общедоступном месте</u>, чтобы была возможность совместной работы нескольких инженеров.<br>\r\nДля AWS таким местом обычно выступает специальный S3 bucket.<br>\r\nBackend обычно настраивается в начале main-файла:\r\n\r\n\r\n\r\n> <pre>\r\n<b>terraform {\r\n  backend \"s3\" {</b>                                            - нужно сделать terraform init, чтоб подкачался плагин\r\n    bucket = \"mybucket\"                                     - имя бакета\r\n    key    = \"prod.tfstate\"                                 - это имя state-файла\r\n    region = \"us-east-1\"\r\n    #dynamodb_table = \"table_name\"                          - старый способ защиты от одновременного использования terraform двумя девопсами\r\n    <b>use_lockfile</b> = true                                     - новый, более простой способ\r\n  }\r\n}\r\n> </pre>','2025-03-31','DEVOPS/terraform/backend',47,3),(149,'DevOps','modules','modules','## Modules - чтобы не изобретать велосипед заново\r\n\r\n<b>modules</b> придумали, чтобы не писать один и тот же код конфигурации заново. Можно написать свой шаблон один раз, а потом переиспользвоать его в разных проектах, просто подставляя нужные данные. <br>\r\nМожно писать как свои модули, так и брать готовые с интернета. Например вот [тут](https://registry.terraform.io/namespaces/terraform-aws-modules) лежат официальные модули для AWS от terraform, но можно и с гитхаба или других источников качать.\r\n\r\n### Свои модули\r\n\r\nВот [неплохая инструкция](https://developer.hashicorp.com/terraform/tutorials/modules/module-create) как создавать свои модули\r\n\r\n- Делаем папку <i>modules</i>\r\n- Делаем подпапки для модулей, например <i>ec2</i>, <i>s3</i> и пр.\r\n- В подпапках создаём стандартные файлики типа <i>main.tf, variables.tf</i>\r\n- Пишем в них обычный для terraform код (только без провайдера сверху)\r\n- Подключаем модуль к основному <i>main.tf</i>-файлу:\r\n\r\n\r\n> <pre>\r\nprovider \"aws\" {\r\n    region = \"us-east-1\"\r\n}\r\n<br>\r\n<b>module</b> \"ec2\" {                                              - отдельное слово для модулей и имя его переменной в главном файле\r\n  <b>source</b> = \"./modules/ec2\"                                  - нужно обязательно указать путь до этого модуля\r\n  <b>instance_type</b> = \"t2.micro\"                                - так заполняются значения переменных для модуля (внутри модуля есть variables.tf с прописанными переменными)\r\n}\r\n> </pre>\r\n\r\n### Модули из интернета\r\n\r\n<i>!Понадобится сделать <b>terraform init</b>, чтобы модуль скачался локально.</i>\r\n\r\n> <pre>\r\nprovider \"aws\" {\r\n    region = \"us-east-1\"\r\n}\r\n<br>\r\nmodule \"string\" {\r\n  <b>source  = \"terraform-aws-modules/ssm-parameter/aws\"</b>       - вот по этому пути terraform найдёт модуль в интернете\r\n<br>\r\n  name  = \"ruslan_insecure_string\"                          - а это просто переменные, которые нужно заполнить\r\n  value = var.insecure_string_value\r\n}\r\n<br>\r\nmodule \"vpc\" {                                              - ещё один пример для vpc\r\n  source = \"terraform-aws-modules/vpc/aws\"\r\n  name = var.vpc_name\r\n  cidr = var.cidr_block\r\n  azs             = [\"us-east-1a\"]\r\n  private_subnets = [var.private_subnet]\r\n  public_subnets  = [var.public_subnet]\r\n  tags = {\r\n    Name = \"ruslan-modules\"\r\n  }\r\n}\r\n> </pre>','2025-03-31','DEVOPS/terraform/modules',47,3),(150,'DevOps','База','baza','## Установка и документация\r\n\r\nДокументация у ansible хорошая, можно глянуть [тут](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html).<br>\r\nВот [тут про модули](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html) (т.е. команды, которые можно давать).<br>\r\nСекьюрные данные хранят отдельно с помощью вот этих сервисов: <i>ansible vault</i> или <i>vault hashicorp</i>.\r\n\r\n<i>! Для работы ansible нужен уже установленный python!</i>\r\n\r\n> <pre>\r\n$ sudo apt update\r\n$ sudo apt install software-properties-common\r\n$ sudo add-apt-repository --yes --update ppa:ansible/ansible\r\n$ sudo apt install ansible\r\n> </pre>\r\n\r\n---\r\n\r\n## Inventory or hosts file\r\n\r\nОсновной файл, который хранит инфу о хостах, как они группируются и как до них достучаться.<br>\r\nСтруктура такая:<br>\r\n<b>alias</b> - алиас сервера<br>\r\n<b>ansible_host</b> - интернет адрес хоста<br>\r\n<b>ansible_user</b> - юзер, под которым будет коннект на сервер по ssh<br>\r\n<b>ansible_ssh_private_key_file</b> - путь до ssh-ключа \r\n\r\n\r\n<pre>\r\n<b>[dev_servers]</b>                                                                                                                     - группа серверов (можно будет запускать скрипты только для определённых групп хостов)\r\n<b>alias_name</b> <b>ansible_host</b>=some.public.ip <b>ansible_user</b>=ubuntu <b>ansible_ssh_private_key_file</b>=path/to/pem/file\r\n...\r\n[prod servers]\r\ndb_server ansible_host=some.public.ip ansible_user=ubuntu ansible_ssh_private_key_file=path/to/pem/file\r\n</pre>\r\n\r\n## ansible.cfg - для дефолтных настроек для всех скриптов ansible\r\n\r\n<pre>\r\n[defaults]\r\n<b>host_key_checking</b> = false                                   - настройка проверки ключей	\r\n<b>inventory</b> = ./hosts                                         - прямое указание на inventory-файл. Тогда в командах можно его не указывать (ansible all -m ping)\r\n</pre>\r\n\r\n---\r\n\r\n## Ad hoc commands - единичные команды из-под терминала\r\n\r\nКоманды называются <i>модулями</i> (сокращённо -m command_name)\r\n\r\n> <pre>\r\nansible <b>-i hosts</b> <u>all</u> <i>-m ping</i> -vvv                           - так происходит проверка, что ансибл может достучаться до серверов (команда ping)\r\n                                                            - -i hosts указывает на файл с конфигой серверов (hosts or inventory)\r\n                                                            - all говорит, что нужно применить ко всем серверам в конфиге\r\n                                                            - -vvv - verbose, много логов, полезно для траблшутинга\r\nansible all -m <b>setup</b>                                        - куча инфы про серверы, например узнать тип ОС (для установки софта) (ansible_os_family)\r\n<br>\r\nansible -i hosts <b>dev_servers</b> -m ping                        - применить не ко всем серверам, а к определённой группе [dev_servers]\r\nansible dev_servers <b>-m shell</b> <i>-a \"touch lesson16.txt\"</i>        - так давать bash-команды (-m для имени команды, -а для параметров)\r\nansible all <b>-m ap</b>t -a \"name=nginx state=present\" <b>--become</b>   - установить что-то (nginx) (--become или -b - это sudo) (state отвечает за действие, т.е. установить/удалить и пр.)\r\nansible dev_servers <b>ansible.builtin.copy</b> \\                  - скопировать файл с одной машины на другую \r\n      -a \"<i>src</i>=file_name <i>dest</i>=destination\"\r\nansible-inventory --list                                    - наглядно покажет инфу по серверам и к каким группам они принадлежат\r\nansible-inventory --graph\r\n> </pre>','2025-04-02','DEVOPS/ansible/база',48,3),(151,'DevOps','playbook','playbook','## playbook.yml - скрипты с командами для настройки серверов\r\n\r\nТаких файлов может быть много. В них лежат скрипты, в которых описаны таски - набор команд для конфигурирования серверов.<br>\r\nЗапускаются специальной командой: \r\n> `ansible-playbook playbook.yml`<br>\r\n> `ansible-playbook playbook.yml --check / ansible-playbook playbook.yml --diff` - так запускается <i>dry-run</i> (можно быстро проверить на какие-нибудь ошибки)<br>\r\n> `ansible-playbook playbook.yml -e some_var=var_value` - так запускается с передачей переменных из терминала\r\n\r\n#### Самый базовый пример:\r\n\r\n> <pre>\r\nСначала идут глобальные настройки\r\n- <b>name:</b> Some Task Name                                      - имя для читабельности. Тут описывают что хотят сделать\r\n  <b>hosts:</b> all/some_group                                     - к каким серверам применить\r\n  <b>become</b>: yes                                               - root привилегии\r\n<br>\r\n  <b>tasks:</b>                                                    - тут уже описываются таски/отдельные шаги скрипта\r\n    - name: Ping all servers\r\n      ping:\r\n> </pre>\r\n\r\n#### Микс разных примеров:\r\n\r\n> <pre>\r\n- name: Install nginx\r\n  hosts: dev\r\n  become: yes\r\n<br>\r\n  tasks:\r\n    - name: Install nginx                                   - <b>установка софта</b>\r\n      ansible.builtin.<b>apt</b>:                                  - apt для установки\r\n	    name: nginx                                         - что устанавливаем \r\n	    <b>state</b>: present                                      - present для установки, absent для удаления\r\n	    become: yes                                         - если нужно sudo только для конкретной команды\r\n<br>\r\n    - name: Start nginx and enable                          - <b>настройка сервисов</b>\r\n      <b>service</b>: name=nginx <b>state</b>=started <b>enabled</b>=yes         - service для управления сервисами.\r\n<br>\r\n    - name: create folder                                   - <b>работа с файлами (создание/удаление/права и пр.)</b>\r\n      <b>file</b>:                                                 - команда для работы с файлами\r\n        <b>path: $HOME</b>/test                                    - путь до файла (можно вставлять переменные)\r\n        <b>state: directory</b>                                    - так через file можно <b>создать директорию</b>\r\n<br>\r\n    - name: change permissions                              - <b>изменение прав директории/файла</b>		\r\n	  file:\r\n	    path: \"/home/<b>{{ ansible_user }}</b>/test\"               - попасть в домашнюю директорию юзера, под которым коннектится ansible\r\n		state: directory\r\n		<b>owner</b>: root                                         - командами ниже меняем владельцев и права\r\n		<b>group</b>: root\r\n		<b>mode</b>: 755\r\n<br>\r\n	- name: run container                                   - <b>запуск docker-контейнера</b>\r\n	  <b>docker_container</b>:\r\n	    name: postgres                                      - название для нас\r\n		image: postgres                                     - имя контейнера в dockerhub/локально\r\n		<b>env</b>:                                                - так можно задать кучу доп. параметров\r\n		  POSTGRES_PASSWORD: \"qwerty123\"\r\n<br>\r\n    - name: create a user\r\n      <b>ansible.builtin.user</b>:                                 - <b>для работы с пользователями</b> (создание, удаление, назначение прав, групп, паролей и пр.)\r\n        name: ansible_user\r\n        create_home: yes\r\n        comment: some user comment\r\n        uid: 1077\r\n        group: admin\r\n<br>\r\n    - name: copy a file\r\n      <b>ansible.builtin.copy:</b>                                 - <b>для копирования файлов и директорий</b>\r\n        src: ./file_to_copy.txt\r\n        dest: /home/{{ ansible_user }}/copied_file.txt\r\n<br>\r\n    - name: install docker\r\n      apt:\r\n        name: <b>\"{{item}}\"</b>                                    - переменная для цикла\r\n        state: latest\r\n        update_cache: yes\r\n      <b>loop</b>:                                                 - <b>пример как сделать что-то по циклу</b>\r\n        - docker-ce\r\n        - docker-ce-cli\r\n        - containerd.io\r\n<br>\r\n    - name: execute script                                  - <b>так можно выполнять shell-скрипты</b>\r\n      <b>script:</b> some_script.sh\r\n      <b>ignore_errors: true</b>                                   - продолжить выполнять таски, если этот таск зафэйлится\r\n<br>\r\n    - name: local task                                      - <b>так можно указать, что этот таск должен выполняться на localhost</b>\r\n      <b>local_action</b>:\r\n        <b>module</b>: amazon.aws.ec2_instance                     - в этом случае так указываем модуль и его параметры\r\n        region: us-east-1\r\n        state: restarted\r\n        instance_ids:\r\n          - i-06abd454dbb8a57d5\r\n      register: ec2\r\n<br>\r\n    - name: Check if the instance is reachable using ping\r\n      ping:\r\n      <b>delegate_to: host_or_hostgroup</b>                        - <b>так можно делегировать задачу другому хосту/группе хостов         </b>               \r\n      register: ping_result\r\n> </pre>','2025-04-02','DEVOPS/ansible/playbook',48,3),(152,'DevOps','Работа с Docker','rabota-s-docker','### Установка и настройка\r\n\r\n> <pre>\r\n- name: manage docker\r\n  hosts: all\r\n  become: yes\r\n<br>\r\n  tasks:\r\n    - name: install dependencies                                                \r\n      apt:\r\n        name: <b>\"{{item}}</b>\"                                                        - переменная для циклов\r\n        state: present\r\n        update_cache: yes\r\n      <b>loop:</b>                                                                     - циклом устанавливаем зависимости\r\n        - apt-transport-https\r\n        - ca-certificates\r\n        - curl\r\n        - gnupg-agent\r\n        - software-properties-common\r\n<br>\r\n    - name: add GPG key\r\n      <b>apt_key</b>:                                                                  - настройки ключей, чтобы ubuntu знал, где искать софт\r\n        url: https://download.docker.com/linux/ubuntu/gpg\r\n        state: present\r\n<br>\r\n    - name: add docker repository to apt\r\n      <b>apt_repository</b>:                                                           - тоже настройки для последующей установки\r\n        repo: deb https://download.docker.com/linux/ubuntu bionic stable\r\n        state: present\r\n<br>\r\n    - name: install docker\r\n      apt:                                                                      - теперь, когда знаем где искать софт, устанавливаем докер и доп. штуки\r\n        name: \"{{item}}\"\r\n        state: latest\r\n        update_cache: yes\r\n      loop:\r\n        - docker-ce\r\n        - docker-ce-cli\r\n        - containerd.io\r\n<br>\r\n    - name: add a user to docker group\r\n      <b>ansible.builtin.user</b>:                                                     - добавляем какого-то юзера в группу docker, чтоб от его имени запускать контейнеры\r\n        name: ansible_user\r\n        groups: docker\r\n        append: yes\r\n> </pre>','2025-04-03','DEVOPS/ansible/playbook examples/работа с docker',49,3),(153,'DevOps','Подгружаем таски из другого playbook','podgruzhaem-taski-iz-drugogo-playbook','### Отдельный .yml-файл с тасками, которые будем импортировать в playbook\r\n\r\n> <pre>\r\n<i>Никаких глобальных настроек в начале файла и объявлений тасков</i>\r\n- name: check if file exists\r\n  stat:\r\n    path: <b>\"{{ file_path }}\"</b>                                 - эту переменную получим из основного файла\r\n  <b>register</b>: stat_result                                     - место куда можно <u>складывать результаты работы модулей</u> и потом обращаться к ним\r\n- name: confirm file exists\r\n  <b>debug</b>:\r\n    <b>msg:</b> \"File exists!\"                                     - вывод в терминал сообщений\r\n  <b>when</b>: stat_result.stat.exists                             - <b>debug/when</b>, чтобы что-то отработало при каком-то условии\r\n- name: file not found\r\n  debug:\r\n    msg: \"File not found!\"\r\n  when: <b>stat_result.stat.exists</b> == False                    - обращаемся к результатам работы других модулей\r\n> </pre>\r\n\r\n---\r\n\r\n### Основной playbook\r\n\r\n> <pre>\r\n- name: Copy and delete file\r\n  hosts: all\r\n<br>\r\n  tasks:\r\n    - name: copy a file\r\n      ansible.builtin.copy:                                 - просто копируем файл с одной машины на другую\r\n        src: ./file_to_copy.txt\r\n        dest: /home/{{ ansible_user }}/copied_file.txt\r\n<br>\r\n    - name: check if file exists 1\r\n      <b>include_tasks: check_file.yml</b>                         - вот так подгружаем таск из вспомогательного файла\r\n      <b>vars:</b>                                                 - ниже будем передавать переменные в таски из доп. файла\r\n        file_path: \"/home/{{ ansible_user }}/copied_file.txt\"\r\n<br>\r\n    - name: delete file\r\n      <b>ansible.builtin.file</b>:\r\n        path: /home/{{ ansible_user }}/copied_file.txt\r\n        <b>state: absent</b>                                       - удаление файла\r\n<br>\r\n    - name: check if file exists 2\r\n      include_tasks: check_file.yml\r\n      vars:\r\n        file_path: \"/home/{{ ansible_user }}/copied_file.txt\"\r\n> </pre>','2025-04-03','DEVOPS/ansible/playbook examples/подгружаем таски из другого playbook',49,3),(155,'DevOps','when & debug','when-debug','<b>when</b> - для исполнения тасков при выполнении какого-то условия. <br>\r\n<b>debug</b> - для вывода в терминал какой-то информации.\r\n\r\n\r\n> <pre>\r\n  tasks:\r\n    - name: print password\r\n      debug:                                                - через дебаг можно вывести что-то в терминал\r\n        <b>var:</b> password                                       - так можно вывести <u>только значение переменной</u><br>	\r\n    - debug:\r\n        <b>msg:</b> \"my password is {{ password }}\"                - через msg можно вывести какой-то текст. Можно туда и переменную вставить<br>\r\n    - name: Install apache for redhat                       - установка софта в зависимости от ОС\r\n      <b>yum:</b> name=httpd state=latest                          - модуль для установки софта для redhat-систем\r\n      <b>when:</b> ansible_os_family == \"RedHat\"                   - таск выполнится только если условие соблюдается <br> \r\n    - name: Install apache for debian\r\n      apt: name=apache2 state=latest\r\n      when: <b>ansible_os_family</b> == \"Debian\"                   - переменная, в которой хранится тип ОС хоста (она уже известна и назначена ansible автоматически)\r\n<br>\r\n    - name: install nginx\r\n      apt:\r\n        name: nginx\r\n        state: present\r\n      <b>when:</b>                                                 - сделать что-то в зависимости от значения своей переменной\r\n        <b>var: my_var_1==\"hello_world\"</b>\r\n> </pre>','2025-04-04','DEVOPS/ansible/when & debug',48,3),(156,'DevOps','Переменные','peremennye','### Переменные обычно хранят в отдельном файле\r\n\r\n<b>group_vars</b> - директория, где лежат .yml файлы с переменными. Содержание похоже на .env:\r\n\r\n> <pre>\r\ntext1: some_value\r\ntext2: some_value\r\npassword: 12345\r\n> </pre>\r\n\r\n### Импортируем в playbook:\r\n\r\n> <pre>\r\n- name: Playbook\r\n  hosts: all\r\n  become: yes\r\n  <b>vars_files:</b>                                               - из какого файла брать переменные\r\n    - <i>group_vars/dev.yml</i>\r\n<br>\r\n  <b>vars:</b>                                                     - тут можно обозначить переменные, но обычно они в отдельном файле\r\n    text1: some_value\r\n    text2: some_value\r\n    password: 12345\r\n<br>\r\n  tasks:\r\n    - debug:\r\n        msg: \"my password is <b>{{ password }}</b>\"                - пользуемся переменными                 	\r\n    - <b>set_fact</b>:                                             - вот так можно задать переменную динамически в исполняемых тасках\r\n	    all_text: \"{{ text1 }} {{ text2 }}\"\r\n    - debug:\r\n	    <b>var: all_text</b>                                       - как-то используем эту переменную <br>\r\n    - name: check if file exists\r\n      stat:\r\n        path: \"{{ file_path }}\"\r\n      <b>register</b>: stat_result                                 - переменная куда можно <u>складывать результаты работы модулей</u> и потом обращаться к ним\r\n    - name: confirm file exists\r\n      debug:\r\n        msg: \"File exists!\"\r\n      when: <b>stat_result.stat.exists</b>                         - вот так обращаемся к результату\r\n> </pre>','2025-04-04','DEVOPS/ansible/переменные',48,3),(157,'DevOps','Создаём AWS EC2 и настраиваем на нём docker','sozdaiom-aws-ec2-i-nastraivaem-na-niom-docker','<i>/i\\</i>Если работаем на уже созданной AWS EC2, лучше всего накатить на неё права full access для работы с EC2 - так не нужно будет выдавать и настраивать для playbook новые aws_access_key и aws_secret_key.\r\n\r\n\r\n> <pre>\r\n\\-\\-\\-\r\n- name: Create EC2 instance and install Docker with Nginx\r\n  hosts: <b>localhost</b>                                          - для создания нового ЕС2 работаем на локальной машине\r\n  <b>gather_facts: no</b>                                          - пока ничего не создано, поэтому смысла собирать факты нет\r\n  vars:                                                     - типичные для создания ЕС2 параметры\r\n    aws_region: \"us-east-1\"\r\n    instance_type: \"t2.micro\"\r\n    ami_id: \"ami-084568db4383264d4\"\r\n    key_name: \"devops\"\r\n    security_group: \"sg-043fe1ab924e65e0f\"\r\n    instance_name: \"nginx-instance\"\r\n<br>\r\n  tasks:\r\n    - name: EC2\r\n      <b>amazon.aws.ec2_instance</b>:                              - этот модуль уже предустановлен\r\n        region: {{ aws_region }}\r\n        name: {{ instance_name }}\r\n        key_name: {{ key_name }}\r\n        <b>state</b>: \"running\"                                    - настройки для того, чтоб переходить к следующему таску только когда инстанс будет в определённом статусе\r\n        <b>wait</b>: true                                            но у меня не заработало\r\n        instance_type: {{ instance_type }}\r\n        vpc_subnet_id: subnet-08091e34ba8747d07\r\n        security_group: {{ security_group }}\r\n        network_interfaces:\r\n          - assign_public_ip: true\r\n        image_id: {{ ami_id }}\r\n        tags:\r\n          Environment: Ansible_tests\r\n      <b>register: ec2</b>                                         - запоминаем результат работы таска (нам понадобится ip, чтоб подключаться к новому ЕС2)\r\n<br>\r\n    - name: Add new instance to host group\r\n      <b>add_host</b>:                                             - динамически создаём группу хостов для другого таска (чтобы работать с созданным ЕС2)\r\n        <b>hostname: \"{{ item.public_ip_address }}\"</b>            - через цикл выцепляем публичный ip-адрес\r\n        <b>groupname</b>: launched                                 - имя новой группы\r\n      <b>loop: \"{{ ec2.instances }}\"</b>                           - обращаемся к результату работы предыдущего таска через цикл\r\n<br>\r\n- <b>name</b>: Install Docker and run Nginx                        - <b>в одном playbook может быть несколько таск-групп</b>\r\n  <b>hosts: launched</b>                                           - тут уже работаем с новой группой хостов\r\n  become: yes\r\n  vars:\r\n       <b>ansible_ssh_private_key_file: devops.pem</b>             - нужно указать путь до ssh-ключа\r\n  tasks:                                                    - далее идёт процедура установки и запуска докер с добавлением юзера в группу docker\r\n    - name: Update apt cache\r\n      apt:\r\n        update_cache: yes\r\n<br>\r\n    - name: Install Docker\r\n      apt:\r\n        name: docker.io\r\n        state: present\r\n<br>\r\n    - name: add a user to docker group\r\n      ansible.builtin.user:\r\n        name: ubuntu\r\n        groups: docker\r\n        append: yes\r\n<br>\r\n    - name: Start Docker service\r\n      service:\r\n        name: docker\r\n        state: started\r\n> </pre>','2025-04-08','DEVOPS/ansible/playbook examples/создаём aws ec2 и настраиваем на нём docker',49,3),(158,'DevOps','Рестарт EC2 и установка софта','restart-ec2-i-ustanovka-softa','### Рестартим EC2-инстанс, ждём пока он заработает и устанавливаем на него tomcat с помощью роли\r\n\r\n\r\n> <pre>\r\n\\-\\-\\-\r\n- name: Restart EC2 instance and check availability\r\n  hosts: <b>localhost</b>                                                              - рестарт делает localhost, а не перегружаемый инстанс\r\n  <b>gather_facts: no</b>                                                              - ничего не собираем, т.к. будем явно указывать id инстанса\r\n  become: yes\r\n  vars:\r\n    instance_id: \"i-06abd454dbb8a57d5\"\r\n    region: \"us-east-1\"\r\n    <b>ansible_ssh_private_key_file</b>: devops.pem                                    - нужна, чтобы по ssh подключаться\r\n<br>\r\n  tasks:\r\n    - name: Restart EC2 instance\r\n      <b>amazon.aws.ec2_instance:</b>                                                  - встроенная библиотека для работы с aws instance\r\n        instance_ids: \r\n          - \"{{ instance_id }}\"\r\n        <b>state: restarted</b>                                                        - так указываем, что нужен рестарт\r\n        region: \"{{ region }}\"                                                  - без региона не разрешит\r\n      <b>register: ec2_restart</b>                                                     - сохраняем результат работы, т.к. у инстанса будет новый ip и его как-то нужно получить\r\n<br>\r\n    - name: Wait for the instance to be in running state\r\n      <b>amazon.aws.ec2_instance_info</b>:                                             - модуль для получения инфы по aws инстанс (понадобится новый ip)\r\n        region: \"{{ region }}\"\r\n        <b>filters:</b>                                                                - фильтр, чтоб смотреть только по нужным ЕС2\r\n          \"instance-id\": \"{{ instance_id }}\"\r\n      register: ec2_instance_info                                               \r\n      <b>until</b>: ec2_instance_info.instances[0].state.name == \'running\'             - вот так ждём пока статус не будет running\r\n      retries: 5                                                                - настройки сколько ждать\r\n      delay: 10\r\n<br>\r\n    - name: Wait for the instance to be reachable\r\n      <b>wait_for</b>:                                                                 - вот тут ждём, когда ssh заработает\r\n        <b>host: \"{{ ec2_instance_info.instances[0].public_ip_address }}\"</b>\r\n        port: 22\r\n        delay: 10\r\n        timeout: 300\r\n        <b>state: started</b>\r\n<br>\r\n    - name: Check if the instance is reachable using ping\r\n      <b>ping:</b>                                                                     - просто проверяем доступность\r\n      <b>delegate_to:</b> \"{{ ec2_instance_info.instances[0].public_ip_address }}\"     - этот таск должен работать на стороне EC2\r\n      register: ping_result\r\n    - name: Display ping result\r\n      debug:\r\n        var: ping_result\r\n<br>\r\n    - name: Add new instance to host group\r\n      <b>add_host:</b>                                                                 - формируем новую группу хостов. По ней удобно будет делать следующий таск\r\n        hostname: \"{{ ec2_instance_info.instances[0].public_ip_address }}\"\r\n        groupname: <b>rebooted</b>\r\n<br>\r\n- name: install tomcat\r\n  hosts: <b>rebooted</b>\r\n  become: yes\r\n  vars:\r\n    ansible_ssh_private_key_file: devops.pem\r\n  <b>roles:</b>                                                                        - устанавливаем софт с помощью загруженной заранее роли\r\n    - robertdebock.tomcat\r\n> </pre>','2025-04-11','DEVOPS/ansible/playbook examples/рестарт ec2 и установка софта',49,3),(159,'DevOps','Roles','roles','## Roles - это подгружаемые модули (шаблоны)\r\n\r\nМожно один раз написать такую роль (или в интернете скачать) и переиспользовать её в разных проектах.<br>\r\n<b>galaxy.ansible.com</b> - этакий гитхаб для ролей.<br>\r\n\r\n#### Как настраивать и устанавливать:\r\n\r\n - Создаём папку <b>roles</b>\r\n - Если создаём свою роль: переходим в эту папку в терминале и даём команду <b>ansible-galaxy init <i>role_name</i></b> - это создаст папку <i>role_name</i> и в ней кучу подпапок и файлов (инфраструктура)\r\n - Если используем чужую из хаба: <b>ansible-galaxy role install <i>role-name</i> <u>--roles-path /path/to/roles/folder</u></b>\r\n\r\n\r\n#### Как пользоваться в playbook:\r\n\r\n> <pre>\r\n- name: Using role\r\n  hosts: all\r\n  become: yes\r\n  <b>roles:</b>                                                    - так сначала выполнятся роли, потом наши таски (можно и без тасок вовсе)\r\n    - role_name\r\n<br>\r\n  tasks:\r\n    ...\r\n> </pre>','2025-04-11','DEVOPS/ansible/roles',48,3),(160,'DevOps','Команды из терминала','komandy-iz-terminala','Обычно вся настройка делается через <i>манифесты</i>, но тут список полезных команд, которыми можно что-то быстро сделать в терминале.\r\n\r\n\r\n\r\n> <pre>\r\n aws eks update-kubeconfig --name kluster_name    - перед подключение нужно обновить конфиг\r\n <br>\r\n kubectl get nodes								  - увидеть сервера в кластере\r\n kubectl get pods --all-namespaces				  - смотреть все поды\r\n kubectl get namespaces							  - смотреть namespaces\r\n kubectl get deployments						  - что развёрнуто\r\n kubectl get all\r\n kubectl run nginx --image=nginx:latest --port=80	- так запускать поды\r\n kubectl delete pods nginx							- удалить поду\r\n kubectl describe pods nginx						- много инфы про под\r\n kubectl exec nginx ls								- запустить команду в поде\r\n kubectl exec -it nginx shell\r\n kubectl logs nginx\r\n kubectl port-forward nginx 3000:80					- пробросить порт снаружи:внутри\r\n<br>\r\nkubectl create deploy nginx --image nginx --dry-run=client -o yaml > .\\charts\\nginx\\template\\deployment.yml    - cделать файл-манифест одной командой\r\n> </pre>','2025-04-11','DEVOPS/kubernetes/команды из терминала',51,3),(161,'DevOps','Разворачиваем eks cluster','razvorachivaem-eks-cluster','### Пример преподавателя курсов по быстрому развёртыванию EKS-кластера\r\n\r\nПеред настройкой самого кластера, нужно настроить сетевую часть. Делаем отдельным модулем <b>vpc.tf</b>:\r\n\r\n> <pre>\r\nmodule \"vpc\" {\r\n  source  = \"terraform-aws-modules/vpc/aws\"\r\n  version = \"5.1.1\"<br>\r\n  name = \"devops-eks-tf-vpc\"<br>\r\n  cidr = \"10.0.0.0/16\"\r\n  azs  = slice(data.aws_availability_zones.available.names, 0, 2)<br>\r\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\r\n  public_subnets  = [\"10.0.4.0/24\", \"10.0.5.0/24\"]<br>\r\n  enable_nat_gateway   = true\r\n  single_nat_gateway   = true\r\n  enable_dns_hostnames = true<br>\r\n  public_subnet_tags = {\r\n    \"kubernetes.io/cluster/${local.cluster_name}\" = \"shared\"\r\n    \"kubernetes.io/role/elb\"                      = 1\r\n  }<br>\r\n  private_subnet_tags = {\r\n    \"kubernetes.io/cluster/${local.cluster_name}\" = \"shared\"\r\n    \"kubernetes.io/role/internal-elb\"             = 1\r\n  }\r\n}\r\n> </pre>\r\n\r\n---\r\n\r\n### main.tf\r\n\r\n\r\n> <pre>\r\nprovider \"aws\" {\r\n  region = <b>var.region</b>                                       - опишем в переменной\r\n}\r\n<br>\r\ndata \"aws_availability_zones\" \"available\" {}\r\n<br>\r\nlocals {\r\n  cluster_name = \"ruslan-cluster\"\r\n}\r\n<br>\r\nmodule \"eks\" {\r\n  <b>source  = \"terraform-aws-modules/eks/aws\"</b>                 - специальный модуль для работы с eks (нужно будет сделать terraform init!)\r\n  version = \"19.15.3\"                                       - смотри в доках свежую\r\n<br>\r\n  <b>cluster_name</b> = local.cluster_name\r\n  <b>cluster_version</b> = \"1.30\"\r\n<br>\r\n  <b>vpc_id = module.vpc.vpc_id\r\n  subnet_ids = module.vpc.private_subnets</b>                   - нужно указать vpc и подсети\r\n  <b>cluster_endpoint_public_access</b> = true                     - наверное чтоб достучаться до кластера\r\n<br>\r\n  eks_managed_node_group_defaults = {\r\n    ami_type = \"AL2_x86_64\"\r\n  }\r\n<br>\r\n  eks_managed_node_groups = {                               - настройки кластера\r\n    one = {                                                 - лучше всего в каждом кластере иметь одну нод-группу\r\n      name = \"ruslan-node-group\"\r\n      instance_types = [\"t3.small\"]\r\n      min_size     = 2\r\n      max_size     = 2\r\n      desired_size = 2\r\n    }\r\n  }\r\n}\r\n> </pre>','2025-04-11','DEVOPS/terraform/полезные примеры/разворачиваем eks cluster',50,3),(162,'DevOps','StatefulSet mongo with storage','statefulset-mongo-with-storage','### StatefulSet - для statefull-приложений, например баз данных\r\n\r\n- Запрашиваем StorageClass\r\n\r\n\r\n> <pre>\r\nkind: <b>StorageClass</b>                                          - абстракция, которая работает с хранилищем\r\napiVersion: storage.k8s.io/v1\r\nmetadata:\r\n  <b>name: manual</b>                                              - имя этого storage class, по которому будем к нему обращаться\r\n<b>provisioner: kubernetes.io/<u>no-provisioner</u></b>                   - без автопровижионинга, сами будем всем управлять вручную\r\nvolumeBindingMode: <b>WaitForFirstConsumer</b>                     - ничего по факту не создастся, пока реально не появится ресурс-потребитель (т.е. пока не запустим монго-image с volume)\r\n> </pre>\r\n\r\n- Запрашиваем дисковое пространство у этого StorageClass\r\n\r\n> <pre>\r\napiVersion: v1\r\nkind: <b>PersistentVolume</b>\r\nmetadata:\r\n  <b>name: ruslan-volume</b>                                       - название нашего тома\r\nspec:\r\n  <b>storageClassName: manual</b>                                  - у какого storage class запрашиваем\r\n  <b>capacity:\r\n    storage: 10Gi</b>                                           - тут лучше ставить с запасом и учитывать, что нам скорее всего понадобится несколько volume для реплик\r\n  <b>accessModes</b>:                                              - нашёл для баз данных такой режим\r\n  - ReadWriteOnce\r\n  <b>hostPath:</b>                                                 - путь до volume на instance\r\n    path: /mr/zk\r\n> </pre>\r\n\r\n- Запрашиваем выделить volume в созданном PersistentVolume\r\n\r\n\r\n> <pre>\r\napiVersion: v1\r\nkind: <b>PersistentVolumeClaim</b>\r\nmetadata:\r\n  name: <b>task-pv-claim</b>                                       - это название нам понадобится в манифесте для монго\r\nspec:\r\n  <b>storageClassName: manual</b>                                  - указываем всё тот же storage class\r\n  accessModes:\r\n    - <b>ReadWriteOnce</b>\r\n  resources:\r\n    requests:\r\n      <b>storage: 3Gi</b>\r\n> </pre>\r\n\r\n- Сам mongo-manifest, с прикрученным диском\r\n\r\n\r\n> <pre>\r\napiVersion: apps/v1\r\n<b>kind: StatefulSet</b>                                           - лучше всего подходит для баз данных\r\nmetadata:\r\n  name: mongo\r\nspec:\r\n  serviceName: mongo\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: mongo\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: mongo\r\n    spec:\r\n      <b>volumes:</b>                                              - тут фактически создаём volume, ссылаясь на наш claim\r\n      - name: <i>mongo-data</i>\r\n        <b>persistentVolumeClaim</b>:\r\n          <b>claimName: task-pv-claim</b>\r\n      <b>containers:</b>                                           - тут уже наш image описываем\r\n      - name: mongo\r\n        <b>image: mongo:latest</b>                                 - скачает из dockerhub этот image\r\n        ports:\r\n        - containerPort: 27017\r\n        <b>volumeMounts:</b>                                       - какой volume куда прикрутить\r\n        - name: <i>mongo-data</i>\r\n          mountPath: /data/db\r\n        <b>env:</b>                                                - так можно передавать переменные среды\r\n        - name: MONGO_INITDB_ROOT_USERNAME\r\n          value: \"root\"\r\n        - name: MONGO_INITDB_ROOT_PASSWORD\r\n          value: \"password\"\r\n> </pre>','2025-04-14','DEVOPS/kubernetes/manifest examples/statefulset mongo with storage',52,3),(163,'Artificial Intelligence','CursorAI setup & tips','cursorai-setup-tips','## Правила (Rules)\r\n\r\n<b><i>Cursor settings -> Rules</i></b><br>\r\n<b>User rules</b> - глобальные правила для всего IDE<br>\r\n<b>Project rules</b> - набор правил для конкретного проекта. Тут можно делать сразу несколько файлов с правилами, описывать стэк, архитектуру, структуру папок и пр. Будут лежать в проекте в папке <i>.cursor/rules</i>.\r\n> Правила необязательно писать самому. Есть несколько ресурсов, где довольно толково составлены промпты на любой вкус и цвет.<br>\r\n> https://cursor.directory/rules/python<br>\r\n> https://dotcursorrules.com/rules<br>\r\n> https://github.com/PatrickJS/awesome-cursorrules/tree/main/rules<br>\r\n> https://github.com/supabase/supabase/tree/master/examples/prompts (базы данных)<br>\r\n> правила можно писать для конкретных файлов/типов файлов\r\n\r\n## MCP\r\n\r\n<b><i>Cursor settings -> MCP</i></b><br>\r\nНаходим какую-нибудь конфигу (на том же cursor.directory) или на гитхабе:\r\n\r\n> <pre>\r\n{\r\n  \"mcpServers\": {\r\n    \"docker-mcp\": {\r\n      \"command\": \"uvx\",\r\n      \"args\": [\r\n        \"docker-mcp\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n> </pre>\r\n\r\nи просто добавляем.\r\n\r\n## Документация\r\n\r\n<b><i>Cursor settings -> Features -> Docs</i></b><br>\r\n\r\nОчень много документации уже предзагружено. Ccылаться на неё можно в самом диалоге с ИИ как то так: `@pygame`, или заранее указать явно, что мы ищем в документации: `@docs`<br>\r\nЧтобы добавить то, чего ещё нет, копируем ссылку на документацию, идём по пути выше, нажимаем на кнопку и вставляем ссылку выше. Какие странички проиндексировало можно увидеть нажав на иконку книжки - выпадет список индексированных страниц. Иногда все сразу не подхватывает и приходится вводить каждую страницу вручную.\r\n\r\n## Git и генерация коммитов\r\n\r\nВ диалоговом окне даём команду `@git` - попросит авторизоваться в ваш репозиторий и сможет смотреть данные оттуда. Можно указать в каком коммите возник баг и попросить его исправить.<br>\r\n<b>Генерация commit message</b> - чтобы не придумывать описание к коммиту. Слева сверху жамкаем на иконку гита (там как ветвление бранчей) -> Generate Commit Message\r\n\r\n\r\n## Общие рекомендации по настройкам\r\n\r\n- В секции <b>Features -> Chat</b> включить галочку <i>Auto-apply to files outside context...</i>\r\n- В секции <b>Features -> Chat</b> включить галочку <i>Iterate on lints</i>','2025-04-16','ARTIFICIAL INTELLIGENCE/cursorai setup & tips',43,4),(164,'Artificial Intelligence','Prompting','prompting','- \"Чем меньше кода - тем лучше\"\r\n- \"Действуй как senior-разработчик\"\r\n- \"Не останавливайся, пока не реализуешь эту функцию до конца\"\r\n- \"Начни с написания 3х параграфов рассуждений, анализирующих в чём может быть ошибка, не делай поспешных выводов\"\r\n- \"Отвечай кратко\"\r\n- \"Не удаляй комментарии\" (полезно при рефакторинге)\r\n- \"Перед тем как продолжить, дай мне краткое описание текущего состояния\" (полезно при открытии нового диалога с ИИ)\r\n- \"Перед тем как ответить, напиши два подробных параграфа: один за каждое из этих решений, не делай поспешных выводов, затем скажи, какое из них лучше и почему\"\r\n- \"Начни параграф рассуждений с большой неуверенностью и постепенно набирай уверенность по мере размышлений над задачей\"\r\n- \"Разбей задачу на необходимые шаги, включай только нужные шаги\"\r\n- \"Если бы ты был старшим разработчиком, работающим над этим проектом, какой контекст тебе был бы нужено, чтобы решить эту ошибку? Дай мен пошаговые инструкции, как я могу предоставить тебе этот контекст\"\r\n- \"Я хочу сделать то-то. Разбей это на подзадачи и запиши в файлик TASKS.md\" / \"Составь PRD для этой задачи\" (составляем план, которому ИИ будет следовать дальше)\r\n- \"сначала напиши тесты, потом код, потом прогони тесты и обновляй код, пока тесты не пройдут\"','2025-04-16','ARTIFICIAL INTELLIGENCE/prompting',43,4),(165,'DevOps','Доступ к приложению из интернет','dostup-k-prilozheniiu-iz-internet','Для того, чтобы к нашему приложению в кластере можно было достучаться извне, нужно создать такие сущности как <b>Service</b> и <b>Ingress</b>.\r\n\r\n### Deployment нашего приложения:\r\n\r\n> <pre>\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: my-fastapi\r\n  labels:\r\n    app: my-fastapi\r\nspec:\r\n  replicas: 2\r\n  selector:\r\n    matchLabels:\r\n      app: my-fastapi\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: my-fastapi\r\n    spec:\r\n      containers:\r\n      - name: my-fastapi\r\n        image: rivallar/hw20:latest\r\n        ports:\r\n            - containerPort: 8088\r\n> </pre>\r\n\r\n### Service - позволяет прокинуть ноды наружу\r\n\r\nБывает разных типов для разных видов задач (например сделать ноды доступными только внутри кластера или для всего интернет, отбалансировать нагрузку и пр.). Почитать можно [тут](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types). <br>\r\nДля наших целей подходит Internal Service, т.к. о всём остальном позаботится Ingress.<br>\r\n\r\n> <pre>\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: ruslan-internal-service\r\nspec:\r\n  <b>selector:\r\n    app: my-fastapi</b>                                         - указываем на deployment выше\r\n  ports:\r\n  - protocol: TCP\r\n    <b>port: 80\r\n    targetPort: 8088</b>                                        - в нашем случае достаточно просто прокинуть порты (для других примеров могут понадобится доп. настройки)\r\n> </pre>\r\n<br>\r\n\r\n### Ingress & Ingress Controller\r\n\r\nЭти сущности нужны для работы с http/https трафиком. Ingress Controller - это по сути встроенный NGINX, а Ingress - правила маршрутизации префиксов.<br>\r\n<i>Ingress Controller нужно устанавливать отдельно!</i><br>\r\nДля NGINX это выглядит вот так: `kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.1/deploy/static/provider/cloud/deploy.yaml`.<br>\r\n\r\n> <pre>\r\napiVersion: networking.k8s.io/v1\r\n<b>kind: Ingress</b>\r\nmetadata:\r\n  name: ruslan-ingress\r\n  annotations:\r\n    nginx.ingress.kubernetes.io/rewrite-target: /\r\nspec:\r\n  <b>ingressClassName: nginx</b>                                   - это имя нашего Ingress Controller\r\n  rules:                                                    - набор правил куда что рутить\r\n  - <b>http</b>:                                                   - разные правила для разных типов протокола\r\n      paths:\r\n      <b>- path: /\r\n        pathType: Prefix</b>                                    - тут могут быть разные префиксы для разных бэкендов\r\n        backend:\r\n          service:\r\n            <b>name: ruslan-internal-service</b>                   - вот так передаём запросы на наш вышесозданный Service\r\n            port:\r\n              number: 80\r\n  <b>- host</b>: \"*.foo.com\"                                       - маршрутизация по уже готовым DNS-записям.\r\n    http:\r\n      ...\r\n> </pre>','2025-04-17','DEVOPS/kubernetes/manifest examples/доступ к приложению из интернет',52,3),(166,'DevOps','Helm-charts','helm-charts','# Helm-charts - готовые модули, аналог terraform modules или ansible roles\r\n\r\n<i>/!\\ Для работы с чартами нужно доустановить специальную утилиту <b>helm</b>.</i>\r\n\r\n## Архитектура папок\r\n\r\n- Создаётся отдельная папка charts, в которой будут лежать подпапки с именами наших чартов\r\n- Внутри подпапки с чартом <i>charts/my_new_chart</i> лежат файлы: <b>Chart.yml</b>, <b>values.yml</b>, подпапка <b>templates</b>.\r\n\r\n### Chart.yml - файл с метаданными о чарте\r\n\r\n> <pre>\r\napiVersion: v1\r\nname: nginx                                                 - имя чарта\r\nversion: 0.1.0                                              - всякие версии\r\nappVersion: 1.0\r\ndescription: bla-bla                                        - описание зачем он нужен\r\n> </pre>\r\n\r\n### values.yml - файл с переменными\r\n\r\nЧто-то вроде .env файла, из которого чарт будет брать параметры. Параметры записаны вот в таком формате:\r\n\r\n> <pre>\r\nreplicaCount: 3\r\nsomeOtherVar: bla\r\n> </pre>\r\n\r\nВ манифестах к переменным обращаются вот так: `{{ .Values.replicaCount }}`<br>\r\nФайл может называться как угодно. Но если его название не values.yml, нужно явно указать путь к файлу при запуске чарта:<br>\r\n`helm upgrade nginx . --values other_then_values_name.yml`\r\n\r\n### Папка templates - тут лежат манифесты\r\n\r\nВ этой папке хранятся все манифесты для этого чарта. Т.е. это коллекция манифестов, которую можно установить одной командой.\r\n\r\n## Как пользоваться\r\n\r\nЗаходим в папку чарта и даём команды:\r\n\r\n> <pre>\r\n<b>helm install</b> my_chart .                                     - даётся <u>только первый раз</u>. Точка в конце значит, что все нужные файлы находятся в этой директории\r\n<b>helm upgrade</b> my_chart .                                     - последующие изменения даются командой upgrade   \r\n<b>helm uninstall</b> my_chart                                     - удаление                                     \r\n> </pre>','2025-04-21','DEVOPS/kubernetes/helm-charts',51,3),(167,'DevOps','Liveness & Readiness & Startup probes','liveness-readiness-startup-probes','<i>В качестве best-practice для сервисов всегда рекомендуется настраивать пробы, которые не пустят трафик, пока инстанс сервиса не будет готов его принять.<br>\r\nКак правило это просто api-endpoints на стороне сервиса, которые проверяют, всё ли в порядке.</i> <br>\r\nНастройки бывают разные, почитать можно [тут](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)\r\n\r\n> <pre>\r\napiVersion: v1\r\nkind: Pod\r\nmetadata:\r\n  labels:\r\n    test: liveness\r\n  name: liveness-http\r\nspec:\r\n  containers:\r\n  - name: liveness\r\n    image: registry.k8s.io/e2e-test-images/agnhost:2.40\r\n    <b>args:</b>                                                   - без понятия зачем это и нужно ли\r\n    - liveness\r\n    <b>livenessProbe:</b>                                          - вот так задаётся проба\r\n      <b>httpGet</b>:                                              - проверяем http запросом, в ответ ждём любой неошибочный код\r\n       <b> path: /healthz</b>                                      - у сервиса должен быть настроен такой маршрут\r\n        port: 8080\r\n        httpHeaders:\r\n        - name: Custom-Header\r\n          value: Awesome\r\n      <b>initialDelaySeconds</b>: 3                                - при старте контейнера подождать перед проверкой (чтоб всё прогрузилось)\r\n      <b>periodSeconds</b>: 3                                      - пинговать каждые 3 секунды\r\n> </pre>\r\n\r\nПример, когда проверка осуществляется bash-командами:\r\n\r\n> <pre>\r\napiVersion: v1\r\nkind: Pod\r\nmetadata:\r\n  labels:\r\n    test: liveness\r\n  name: liveness-exec\r\nspec:\r\n  containers:\r\n  - name: liveness\r\n    image: registry.k8s.io/busybox:1.27.2\r\n    args:\r\n    - /bin/sh\r\n    - -c\r\n    - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600\r\n    livenessProbe:\r\n      exec:\r\n        command:\r\n        - cat\r\n        - /tmp/healthy\r\n      initialDelaySeconds: 5\r\n      periodSeconds: 5\r\n> </pre>\r\n\r\n#### Readiness и Startup probes имеют тот же синтаксис, только предназначены для защиты при запуске контейнера.\r\n\r\n> <pre>\r\napiVersion: v1\r\nkind: Pod\r\nmetadata:\r\n  name: goproxy\r\n  labels:\r\n    app: goproxy\r\nspec:\r\n  containers:\r\n  - name: goproxy\r\n    image: registry.k8s.io/goproxy:0.1\r\n    ports:\r\n    - containerPort: 8080\r\n    <b>readinessProbe</b>:                                         - <b>readinessProbe</b> \r\n      <b>tcpSocket</b>:                                            - проверка по доступности tcp-сокета\r\n        port: 8080\r\n      initialDelaySeconds: 15\r\n      periodSeconds: 10\r\n    livenessProbe:\r\n      tcpSocket:\r\n        port: 8080\r\n      initialDelaySeconds: 15\r\n      periodSeconds: 10\r\n> </pre>\r\n\r\n\r\n<b>startup probe</b> - полезно, если контейнер <u>запускается очень долго</u>\r\n\r\n> <pre>\r\nports:\r\n- name: liveness-port\r\n  containerPort: 8080\r\nlivenessProbe:\r\n  httpGet:\r\n    path: /healthz\r\n    port: liveness-port\r\n  failureThreshold: 1\r\n  periodSeconds: 10\r\n<b>startupProbe</b>:                                               - <b>startup probe</b> - полезно, если контейнер <u>запускается очень долго</u>\r\n  <b>httpGet</b>:\r\n    path: /healthz\r\n    port: liveness-port\r\n  <b>failureThreshold: 30\r\n  periodSeconds: 10</b>                                         - будет ждать вплоть до 30 * 10 секунд пока контейнер запустится\r\n> </pre>','2025-04-21','DEVOPS/kubernetes/liveness & readiness & startup probes',51,3),(168,'DevOps','Configmap & Secrets','configmap-secrets','<b>Secrets</b> - для хранения приватной информации (ключи, пароли и пр.)<br>\r\n<b>Configmap</b> - для разных переменных среды<br>\r\nНиже - самые простые настройки, подробнее читай [тут](https://kubernetes.io/docs/concepts/configuration/configmap/)\r\n\r\n### secret.yml\r\n\r\n> <pre>\r\napiVersion: v1\r\n<b>kind: Secret</b>\r\nmetadata:\r\n  name: my-secret\r\n<b>type: Opaque</b>                                                - видимо, чтоб не показывать нигде в явном виде\r\n<b>data:</b>                                                       - дальше непосредственно идут переменные\r\n  username: <b>dXNlcm5hbWU=</b>                                    - !!! значения нужно предварительно самостоятельно перекодировать в <b>base64</b>\r\n  password: cGFzc3dvcmQ=\r\n> </pre>\r\n\r\n### configmap.yml or cm.yml\r\n\r\n> <pre>\r\napiVersion: v1\r\n<b>kind: ConfigMap</b>\r\nmetadata:\r\n  name: game-demo\r\n<b>data:</b>                                                       - всё то же самое, только другой kind и не нужно кодировать\r\n  player_initial_lives: \"3\"\r\n  ui_properties_file_name: \"user-interface.properties\"\r\n> </pre>\r\n\r\n### Как использовать в манифестах:\r\n\r\n\r\n> <pre>\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: my-fastapi\r\n  labels:\r\n    app: my-fastapi\r\nspec:\r\n  replicas: 2\r\n  selector:\r\n    matchLabels:\r\n      app: my-fastapi\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: my-fastapi\r\n    spec:\r\n      containers:\r\n      - name: my-fastapi\r\n        image: rivallar/hw20:latest\r\n        ports:\r\n            - containerPort: 8088\r\n        <b>env:</b>                                                - в разделе переменных среды\r\n        - <b>name: USERNAME</b>                                    - как будет зваться переменная в контейнере\r\n          <b>valueFrom:\r\n            secretKeyRef:</b>                                   - значение будем брать из секретных файлов\r\n              <b>name: my-secret</b>                               - ссылка на конкретный файл (их может быть несколько). Имя из метадаты файла с секретом\r\n              <b>key: username</b>                                 - достаём значение по ключу\r\n        - name: PASSWORD\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: my-secret\r\n              key: password\r\n        - name: INITIAL_LIVES\r\n          <b>valueFrom:\r\n            configMapKeyRef:</b>                                - то же самое для configmap\r\n              name: game-demo\r\n              key: player_initial_lives\r\n> </pre>','2025-04-21','DEVOPS/kubernetes/configmap & secrets',51,3),(169,'DevOps','Autoscaling','autoscaling','Для работы автоскейлинга нужно сначала установить сторонний metric-server, создать специальный ресурс HorizontalPodAutoscaler и выставить лимиты внутри deployment.<br>\r\nСтраничка с [документацией](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/)<br>\r\n\r\n\r\n- Установить metric-server можно вот так: `kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml`\r\n\r\n- kube_autoscaler.yml:\r\n\r\n\r\n> <pre>\r\napiVersion: autoscaling/v2\r\n<b>kind: HorizontalPodAutoscaler</b>\r\nmetadata:\r\n  name: redis-autoscaler\r\nspec:\r\n  <b>scaleTargetRef:</b>                                           - задаём к чему будем применять этот скейлер\r\n    apiVersion: apps/v1\r\n    kind: Deployment\r\n    <b>name: redis-deployment</b>                                  - имя нашего deployment\r\n  <b>minReplicas</b>: 1                                            \r\n  <b>maxReplicas</b>: 4\r\n  <b>metrics</b>:                                                  - по каким параметрам будем мониторить нагрузку\r\n  - type: Resource\r\n    resource:\r\n      <b>name: memory</b>                                          - в нашем случае RAM (ещё часто CPU)\r\n      target:\r\n        <b>type: AverageValue</b>                                  - среднее значение\r\n        averageValue: 2Mi\r\n> </pre>\r\n\r\n- Выставляем лимиты в самом deployment\r\n\r\n> <pre>\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  <b>name: redis-deployment</b>                                    - это имя мы указывали в автоскейлере\r\n  labels:\r\n    app: redis\r\nspec:\r\n  replicas: 2\r\n  selector:\r\n    matchLabels:\r\n      app: redis\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: redis\r\n    spec:\r\n      containers:\r\n      - name: redis\r\n        image: redis:latest\r\n        ports:\r\n        - containerPort: 6379\r\n        <b>resources:</b>                                          - раздел resourses для ограничений ресурсов, потребляемых контейнером (чтоб не положил всю ноду)\r\n          <b>requests</b>:                                         - сколько должно быть гарантированно ресурсов, чтоб минимально контейнер работал\r\n            memory: \"2Mi\"\r\n            cpu: \"2m\"\r\n          <b>limits:</b>                                           - сколько можно ему максимально выделить\r\n            memory: \"4Mi\"\r\n            cpu: \"4m\"\r\n> </pre>','2025-04-21','DEVOPS/kubernetes/autoscaling',51,3),(170,'DevOps','ArgoCD','argocd','<b>ArgoCD</b> - CD-инструмент, который устанавливается непосредственно в кластер kubernetes, мониторит git-репозиторий и подтягивает с него изменения<br>\r\nДокументация [getting started](https://argo-cd.readthedocs.io/en/stable/getting_started/)\r\n\r\n#### Установка и настройка:\r\n\r\n> <pre>\r\nkubectl create namespace argocd\r\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\r\n> </pre>\r\n\r\nЖдём пока заведутся все поды: `kubectl get pod -n argocd`\r\n\r\nПодключаемся к UI и авторизуемся:\r\n\r\n- Смотрим все поды командой `kubectl get pod -n argocd` и ищем вот такой: <b>argocd-server</b>\r\n- Пробрасываем порты, чтоб к нему можно было достучаться локально: `kubectl port-forward -n argocd svc/argocd-server 8080:443`\r\n- Заходим по адресу и логинимся. Логин - <b>admin</b>, пароль нужно вычитать в секретах кластера: `kubectl get secret argocd-initial-admin-secret -n argocd -o yaml`\r\n\r\nНастраиваем yml-file для argocd <i>(обычно называется application.yml)</i>:\r\n\r\n> <pre>\r\napiVersion: <b>argoproj.io/v1alpha1</b>                                                - проверяй версию, может поменяться\r\nkind: Application\r\nmetadata:\r\n  name: ruslan-project-argo                                                     - название произвольное\r\n  <b>namespace: argocd</b>                                                             - тот же что и выше создавали\r\nspec:\r\n  project: default\r\n<br>\r\n  source:                                                                       - откуда брать код (гит-репозиторий)                                                   \r\n    repoURL: https://github.com/ruslan-rusanovich/CD_part.git\r\n    targetRevision: HEAD                                                        - брать из самого свежего коммита\r\n    <b>path: kubernetes_deployments</b>                                                - папка в репозитории, где хранятся манифесты\r\n  <b>destination:</b>                                                                  - таким образом указываем на кластер, где argocd установлен\r\n    server: https://kubernetes.default.svc\r\n    namespace: default\r\n<br>\r\n  syncPolicy:\r\n    automated:\r\n      selfHeal: true                                                            - эта настройка не разрешит менять что-то из-под терминала. Всё только через гит-репозиторий\r\n      prune: true                                                               - эта настройка для автоматического удаления, если в репозитории файлик удалится\r\n> </pre>\r\n\r\nВот тут [документация](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/) по нему.','2025-04-22','DEVOPS/argocd',45,4),(171,'DevOps','Дипломный для IBA (Github Actions)','diplomnyi-dlia-iba-github-actions','Собирает docker image и пушит его в docker hub репозиторий, а также передаёт имя и тэг свежей версии образа в другой репозиторий.\r\n\r\n> <pre>\r\nname: CI Pipeline\r\n<br>\r\n<b>on:</b>                                                                             - сработает только при пуше в ветку main\r\n  <b>push:</b>\r\n    branches:\r\n      - main\r\n<br>\r\npermissions:                                                                    - так даются права гитхаб-токену, но мы его не используем\r\n  contents: write\r\n  packages: write\r\n<br>\r\n<b>jobs:</b>\r\n  <b>build-and-push:</b>                                                               - имя джобы (у нас одна, по хорошему можно разбить на несколько)\r\n    <b>runs-on: ubuntu-latest</b>                                                      - на какой машине делаем\r\n<br>\r\n    <b>steps:</b>\r\n      - name: Checkout repository                                               - используем уже встроенные действия для входа в репозиторий и настройки работы с докер\r\n        uses: <b>actions/checkout@v2</b>\r\n<br>\r\n      - name: Set up Docker Buildx\r\n        uses: <b>docker/setup-buildx-action@v1</b>\r\n<br>\r\n      - name: Log in to Docker Hub\r\n        uses: <b>docker/login-action@v1</b>\r\n        <b>with:</b>                                                                   - этому action нужны доп. параметры: логин и пароль\r\n          username: <b>${{ secrets.DOCKER_USERNAME }}</b>                              - параметры храним в <i>GitHub secrets</i>\r\n          password: ${{ secrets.DOCKER_PASSWORD }}\r\n<br>\r\n      - name: Build Docker image\r\n        <b>run: |</b>                                                                  - объявляем, что дальше будет блок комманд\r\n          IMAGE_NAME=\"rivallar/hw20\"\r\n          VERSION=<b>$(date +\'%Y%m%d%H%M%S\')</b>                                       - версия как динамическая переменная datetime\r\n          docker build -t <b>$IMAGE_NAME</b>:$VERSION .                                - вот так обращаемся к заранее обозначенным переменным\r\n          echo <b>\"VERSION=$VERSION\" >> $GITHUB_ENV</b>                                - \"запоминаем\" важные данные в качестве переменных среды на время работы pipeline\r\n          echo \"IMAGE_NAME=$IMAGE_NAME\" >> $GITHUB_ENV\r\n<br>\r\n      - name: Push Docker image to Docker Hub\r\n        run: |\r\n          <b>docker push</b> $IMAGE_NAME:$VERSION\r\n<br>\r\n      - <b>name: Checkout CD repository</b>                                            - <b>заходим в другой репозиторий</b> (временно копируем его)\r\n        uses: actions/checkout@v2\r\n        with:\r\n          <b>repository: ruslan-rusanovich/CD_part</b>                                 - раз это не текущий репозиторий - нужно указать путь\r\n          <b>token: ${{ secrets.CD_PAT }}</b>                                          - нужен Personal Access Token, чтобы коммитить в чужой репозиторий\r\n          <b>path: cd-repo</b>                                                         - сохраняем <i>путь</i> до чужого репозитория\r\n<br>\r\n      - name: Update Kubernetes manifest\r\n        run: |\r\n          <b>cd cd-repo</b>                                                            - заходим в <i>копию</i> репозитория, в котороый логинились выше\r\n          <b>sed -i</b> \"s|$IMAGE_NAME:.*|$IMAGE_NAME:$VERSION|\" path/to/file          - командой sed меняем его содержимое. В нашем случае <b>меняем версию image</b>.\r\n<br>\r\n      - name: Commit and push changes\r\n        env:\r\n          <b>GITHUB_TOKEN</b>: ${{ secrets.CD_PAT }}                                   - подменяем GITHUB_TOKEN на наш PAT, т.к. GITHUB_TOKEN только между бранчами одной repo работает\r\n        run: |\r\n          cd cd-repo                                                            - снова указываем, что работаем не в исходном репозитории\r\n          <b>git config</b> --global user.name \'github-actions[bot]\'                   - настраиваем гит для коммита. Данные стандартные для бота github-actions\r\n          git config --global user.email \'github-actions[bot]@users.noreply.github.com\'\r\n          git remote set-url origin https://<b>x-access-token:${GITHUB_TOKEN}</b>@github.com/ruslan-rusanovich/CD_part.git\r\n          git add path/to/file                                                  - отсюда обычный коммит, как из под терминала\r\n          git commit -m \"Update image tag to $VERSION\"\r\n          git push\r\n> </pre>','2025-04-24','DEVOPS/ci-cd pipelines/дипломный для iba (github actions)',53,3),(172,'Artificial Intelligence','Golden Rules','golden-rules','# **Full AI Coding Assistant Workflow**\r\n\r\nThis guide outlines a repeatable, structured process for working with AI coding assistants to build production-quality software. We\'ll use the example of building a Supabase MCP server with Python, but the same process applies to any AI coding workflow.\r\n\r\n---\r\n\r\n## **1\\. Golden Rules**\r\n\r\nThese are the high-level principles that guide how to work with AI tools efficiently and effectively. We’ll be implementing these through global rules and our prompting throughout the process:\r\n\r\n* **Use markdown files to manage the project** (`README.md,PLANNING.md`, `TASK.md`).\r\n\r\n* **Keep files under 500 lines.** Split into modules when needed.\r\n\r\n* **Start fresh conversations often.** Long threads degrade response quality.\r\n\r\n* **Don’t overload the model.** One task per message is ideal.\r\n\r\n* **Test early, test often.** Every new function should have unit tests.\r\n\r\n* **Be specific in your requests.** The more context, the better. Examples help a lot.\r\n\r\n* **Write docs and comments as you go.** Don’t delay documentation.\r\n\r\n* **Implement environment variables yourself.** Don’t trust the LLM with API keys.  \r\n  [Don’t be this guy.](https://www.reddit.com/media?url=https%3A%2F%2Fi.redd.it%2Fxi9k1v2blxpe1.jpeg)\r\n\r\n---\r\n\r\n## **2\\. Planning & Task Management**\r\n\r\nBefore writing any code, it’s important to have a conversation with the LLM to plan the initial scope and tasks for the project. Scope goes into `PLANNING.md`, and specific tasks go into `TASK.md`. These should be updated by the AI coding assistant as the project progresses.\r\n\r\n### **`PLANNING.md`**\r\n\r\n* Purpose: High-level vision, architecture, constraints, tech stack, tools, etc.  \r\n* Prompt to AI: *“Use the structure and decisions outlined in PLANNING.md.”*  \r\n* Have the LLM reference this file at the beginning of any new conversation.\r\n\r\n### **`TASK.md`**\r\n\r\n* Purpose: Tracks current tasks, backlog, and sub-tasks.  \r\n* Includes: Bullet list of active work, milestones, and anything discovered mid-process.  \r\n* Prompt to AI: *“Update TASK.md to mark XYZ as done and add ABC as a new task.”*  \r\n* Can prompt the LLM to automatically update and create tasks as well (through global rules).\r\n\r\n---\r\n\r\n\r\n## **3\\. Global Rules (For AI IDEs)**\r\n\r\nGlobal (or project level) rules are the best way to enforce the use of the golden rules for your AI coding assistants. \r\n\r\nGlobal rules apply to all projects. Project rules apply to your current workspace. All AI IDEs support both.\r\n\r\n**Cursor Rules:** [https://docs.cursor.com/context/rules-for-ai](https://docs.cursor.com/context/rules-for-ai)\r\n\r\n**Windsurf Rules:** [https://docs.codeium.com/windsurf/memories\\#windsurfrules](https://docs.codeium.com/windsurf/memories#windsurfrules)\r\n\r\n**Cline Rules:** [https://docs.cline.bot/improving-your-prompting-skills/prompting](https://docs.cline.bot/improving-your-prompting-skills/prompting)\r\n\r\n**Roo Code Rules:** Works the same way as Cline\r\n\r\nUse the below example (for our Supabase MCP server) as a starting point to add global rules to your AI IDE system prompt to enforce consistency:\r\n\r\n````\r\n### Project Awareness & Context\r\n- **Always read `PLANNING.md`** at the start of a new conversation to understand the project\'s architecture, goals, style, and constraints.\r\n- **Check `TASK.md`** before starting a new task. If the task isn’t listed, add it with a brief description and today\'s date.\r\n- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.\r\n\r\n### Code Structure & Modularity\r\n- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.\r\n- **Organize code into clearly separated modules**, grouped by feature or responsibility.\r\n- **Use clear, consistent imports** (prefer relative imports within packages).\r\n\r\n###  Testing & Reliability\r\n- **Always create Pytest unit tests for new features** (functions, classes, routes, etc).\r\n- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.\r\n- **Tests should live in a `/tests` folder** mirroring the main app structure.\r\n  - Include at least:\r\n    - 1 test for expected use\r\n    - 1 edge case\r\n    - 1 failure case\r\n\r\n###  Task Completion\r\n- **Mark completed tasks in `TASK.md`** immediately after finishing them.\r\n- Add new sub-tasks or TODOs discovered during development to `TASK.md` under a “Discovered During Work” section.\r\n\r\n###  Style & Conventions\r\n- **Use Python** as the primary language.\r\n- **Follow PEP8**, use type hints, and format with `black`.\r\n- **Use `pydantic` for data validation**.\r\n- Use `FastAPI` for APIs and `SQLAlchemy` or `SQLModel` for ORM if applicable.\r\n- Write **docstrings for every function** using the Google style:\r\n<pre>\r\n  ```python\r\n  def example():\r\n      \"\"\"\r\n      Brief summary.\r\n      Args:\r\n          param1 (type): Description.\r\n      Returns:\r\n          type: Description.\r\n      \"\"\"\r\n  ```\r\n</pre>\r\n\r\n###  Documentation & Explainability\r\n- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.\r\n- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.\r\n- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.\r\n\r\n###  AI Behavior Rules\r\n- **Never assume missing context. Ask questions if uncertain.**\r\n- **Never hallucinate libraries or functions** – only use known, verified Python packages.\r\n- **Always confirm file paths and module names** exist before referencing them in code or tests.\r\n- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASK.md`.\r\n\r\n````\r\n\r\n---\r\n\r\n## \r\n\r\n## **4\\. Configuring MCP**\r\n\r\nMCP enables your AI assistant to interact with services to do things like:\r\n\r\n* Use the file system (read/write, refactor, multi-file edits)  \r\n  * [Get this server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem)\r\n\r\n* Search the web (great for pulling documentation) with Brave  \r\n  * [Get this server](https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search)\r\n\r\n* Use Git (branching, diffing, committing)  \r\n  * [Get this server](https://github.com/modelcontextprotocol/servers/tree/main/src/git)\r\n\r\n* Access memory and other tools  \r\n  * For example, [connecting Qdrant](https://github.com/qdrant/mcp-server-qdrant/)\r\n\r\n**Want more MCP servers?**\r\n\r\n[View a large list of MCP servers with installation instructions here.](https://github.com/modelcontextprotocol/servers)\r\n\r\n**How to Configure MCP**\r\n\r\n**Cursor MCP:** [https://docs.cursor.com/context/model-context-protocol](https://docs.cursor.com/context/model-context-protocol)\r\n\r\n**Windsurf MCP:** [https://docs.codeium.com/windsurf/mcp](https://docs.codeium.com/windsurf/mcp)\r\n\r\n**Cline MCP:** [https://docs.cline.bot/mcp-servers/mcp](https://docs.cline.bot/mcp-servers/mcp)\r\n\r\n**Roo Code MCP:** [https://docs.roocode.com/features/mcp/using-mcp-in-roo](https://docs.roocode.com/features/mcp/using-mcp-in-roo)\r\n\r\nExample prompt made possible with the Git MCP server:\r\n\r\n```\r\nOkay great, I like the current state of the application. Please make a git commit to save the current state.\r\n```\r\n\r\n---\r\n\r\n**5\\. Initial Prompt to Start the Project**\r\n\r\nThe first prompt to begin a project is the most important. Even with a comprehensive overview in `PLANNING.md`, clear tasks in `TASK.md`, and good global rules, it’s still important to give a lot of details to describe exactly what you want the LLM to create for you and documentation for it to reference.\r\n\r\nThis can mean a lot of different things depending on your project, but the best piece of advice here is to give similar **examples** of what you want to build. The best prompts in apps like bolt.new, v0, Archon, etc. all give examples \\- you should too. Other documentation is also usually necessary, especially if building with specific tools, frameworks, or APIs.\r\n\r\nThere are three ways to provide examples and documentation:\r\n\r\n1. **Use the built in documentation feature with many AI IDEs.** For example, if I type “@mcp” in Windsurf and hit tab, I’ve now told Windsurf to search the MCP documentation to aid in its coding.  \r\n2. **Have the LLM use an MCP server like Brave** to find documentation on the internet. For example: “Search the web to find other Python MCP server implementations.”  \r\n3. **Manually provide examples/documentation snippets** in your prompt.\r\n\r\nExample prompt to create our initial Supabase MCP server with Python:\r\n\r\n```\r\nUse @docs:model-context-protocol-docs and @docs:supabase-docs to create an MCP server written in Python (using FastMCP) to interact with a Supabase database. The server should use the Stdio transport and have the following tools:\r\n\r\n- Read rows in a table\r\n- Create a record (or multiple) in a table\r\n- Update a record (or multiple) in a table\r\n- Delete a record (or multiple) in a table\r\n\r\nBe sure to give comprehensive descriptions for each tool so the MCP server can effectively communicate to the LLM when and how to use each capability.\r\nThe environment variables for this MCP server need to be the Supabase project URL and service role key.Read this GitHub README to understand best how to create MCP servers with Python:https://github.com/modelcontextprotocol/python-sdk/tree/main\r\n\r\nAfter creating the MCP server with FastMCP, update README.md and TASK.md since you now have the initial implementation for the server.\r\n```\r\n\r\nRemember to restart conversations once they get long. You’ll know when it’s time when the LLM starts to frustrate you to no end.\r\n\r\n---\r\n\r\n## **6\\. Modular Prompting Process after Initial Prompt**\r\n\r\nFor any follow up fixes or changes to the project, you generally want to give just a single task at a time unless the tasks are **very** simple. It’s tempting to throw a lot at the LLM at one time, but it always yields more consistent results the more focused its changes are. \r\n\r\n**Good example:**\r\n\r\n* “Now update the list records function to add a parameter for filtering the records.”\r\n\r\n**Bad example:**\r\n\r\n* “Update list records to add filtering. Then I’m getting an error for the create row function that says API key not found. Plus I need to add better documentation to the main function and in README.md for how to use this server.”\r\n\r\nThe most important point for consistent output is to have the LLM focus on updating a single file whenever possible.\r\n\r\nRemember to always have the LLM update `README.md,PLANNING.md`, and `TASK.md` after making any changes\\!\r\n\r\n---\r\n\r\n## \r\n\r\n## **7\\. Test After Every Feature**\r\n\r\nEither tell the LLM through the global rules to write unit tests after each feature it implements, or do it yourself as a follow up. Catching bugs early prevents compounding problems so this is VERY important\\!\r\n\r\nUnit tests can be annoying and LLMs aren’t perfect writing them either, but try your best to have the AI coding assistant test everything it implements. You can always ask it to bypass writing the tests for a feature in the worst case scenario where it gets hung up on something in the tests and you just want to move on.\r\n\r\n**Best practices for testing (the LLM should know this but just in case):**\r\n\r\n- Create the tests in a tests/ directory  \r\n- Always “mock” calls to services like the DB and LLM so you aren’t interacting with anything “for real”.  \r\n- For each function, test at least one successful scenario, one intentional failure (to ensure proper error handling), and one edge case.\r\n\r\n---\r\n\r\n## **8\\. Docker Deployment (Supabase MCP Example)**\r\n\r\nThis step is more optional and is decently opinionated, but I still want to share what I generally do\\! When I’m ready to deploy the project to host in the cloud and/or share with others, I usually “containerize” the project with Docker or a similar service like Podman.\r\n\r\nLLMs are VERY good at working with Docker, so it’s the most consistent way to package up a project that I have found. Plus almost every cloud service for deploying apps (Render, Railway, Coolify, DigitalOcean, Cloudflare, Netlify, etc.) supports hosting Docker containers. I host ALL AI agents, API endpoints, and MCP servers as Docker containers.\r\n\r\nExample prompt to get this from the LLM:\r\n\r\n```\r\nWrite a Dockerfile for this MCP server using requirements.txt. Give me the commands to build the container after.\r\n```','2025-05-01','ARTIFICIAL INTELLIGENCE/golden rules',43,4);
/*!40000 ALTER TABLE `pages_page` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages_theme`
--

DROP TABLE IF EXISTS `pages_theme`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `pages_theme` (
  `generalcontent_ptr_id` bigint(20) NOT NULL,
  `discipline_parent` varchar(250) NOT NULL,
  `title` varchar(250) NOT NULL,
  `slug` varchar(250) NOT NULL,
  `description` longtext NOT NULL,
  `object_id` int(10) unsigned DEFAULT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`generalcontent_ptr_id`),
  KEY `pages_theme_content_type_id_71db7b7b_fk_django_content_type_id` (`content_type_id`),
  KEY `pages_theme_slug_6a781c04` (`slug`),
  CONSTRAINT `pages_theme_content_type_id_71db7b7b_fk_django_content_type_id` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `pages_theme_generalcontent_ptr_i_72d75164_fk_pages_gen` FOREIGN KEY (`generalcontent_ptr_id`) REFERENCES `pages_generalcontent` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages_theme`
--

LOCK TABLES `pages_theme` WRITE;
/*!40000 ALTER TABLE `pages_theme` DISABLE KEYS */;
INSERT INTO `pages_theme` VALUES (5,'Django','Интеграция сторонних приложений','integratsiia-storonnikh-prilozhenii','Статьи о том, как в django добавить функционал небольших сторонних приложений, чтобы расширить возможности сайта.',4,4),(6,'Django','Templates','templates','Информация по django template language',4,4),(9,'Miscellaneous','Markdown','markdown','Облегчённый язык разметки, созданный с целью обозначения форматирования в простом тексте, с максимальным сохранением его читаемости человеком, и пригодный для машинного преобразования в языки для продвинутых публикаций (HTML, Rich Text и других).',8,4),(10,'Python','Типы данных','','Стандартные типы данных python и их методы',7,4),(11,'Python','Работа с директориями, файлами и путями к ним','','Информация по модулям os, pathlib, shutil, glob и пр.',7,4),(14,'Databases','SQL language','sql-language','Синтаксис и фишки чистого SQL',13,4),(15,'Django','ORM и базы данных','orm','Раздел содержит всё, что нужно для работы с базами данных в django',4,4),(16,'Django','Формы','','Всё, что касается форм в Django',4,4),(17,'Django','Admin-site','admin-site','Всё для настройки admin-сайта',4,4),(19,'Django','Тесты','','Тема о том, как тестировать Django-проекты',4,4),(20,'Django','Postgres','postgres','Всё по настройкам и эксплуатации postgres в django',15,3),(22,'Django','Models','models','Все фишки и приёмы, встречаемые в models.py',15,3),(23,'Django','Authentification & Registration','authentification-registration','Система аутентификации и регистрации',4,4),(24,'Django','Разные крутые фишки','raznye-krutye-fishki','Тут собраны how-to-do странички с всевозможными крутыми приёмами.',4,4),(25,'Django','VIEWS','views','Раздел о том, как использовать встроенные и делать собственные views',4,4),(26,'FrontEnd','Javascript','javascript','Статейки по javascript, jquery и пр.',21,4),(27,'Python','Полезные модули','poleznye-moduli','Информация о популярных модулях, зачем они нужны и как их использовать',7,4),(28,'Python','ООП','oop','Парадигма программирования, в которой есть классы, которые представляют объекты. Классы наследуют один от одного\r\n\r\nПринципы:\r\n\r\n- Инкапсуляция (внутри класса есть всё, что необходимо для работы с ним: атрибуты и методы. Из этого одна часть - интерфейс, т.е. инструменты, доступные пользователю, другая часть - скрытая, механизм, который работает \"под капотом\")\r\n- Полиморфизм (у разных объектов есть методы с одинаковым названием (утиная типизация), например, сложение. Но результаты разные, т.к. эти методы в результате наследования переписываются)\r\n- Наследование (классы наследуют один от одного, наследник получает весь функционал родителя и может привносить что-то своё)\r\n- Абстракция (в классе есть только необходимые для кода аттрибуты и характеристики, т.е. то, что нам важно здесь и сейчас)',7,4),(29,'Python','Боты','boty','Примеры чат-ботов для разных мессенджеров',7,4),(30,'Databases','REDIS','redis','Используется для ведения небольших, но часто меняющихся данных - в основном счётчиков для показа лайков/дизлайков, счётчиков просмотра страницы, систем рекоммендаций.\r\nХранит данные в оперативной памяти в качестве словарей',13,4),(31,'Python','PyTest','pytest','Полезный модный фреймворк для написания тестов к коду Python. Можно использовать с чистым python, можно использовать доп. обёртки для разных фреймворков, например django.',27,3),(32,'Django','Celery','celery','Используется для асинхронного выполнения ресурсоёмких/долгих задач. Задача делегируется Celery и его брокеру, а клиент дальше может пользоваться сервисом, не ожидая окончания выполнения задачи.',4,4),(34,'Django','Queries','queries','Информация про полезные приёмы при формировании запросов в БД',15,3),(36,'Python','Selenium','selenium','Фреймворк для автоматизации usability тестов web-приложений.',27,3),(37,'Python','POM','pom','Page Object Manager - прогрессивный подход, который подразумевает разбиение кода на несколько файлов: файл-драйвера, файл тестов, файл локаторов и файл методов для страницы.',36,3),(38,'FastAPI','Работа с базами данных','rabota-s-bazami-dannykh','Подключаемся и работаем как с SQL так и с no-SQL БД',35,4),(39,'FastAPI','Безопасность','bezopasnost','Разные примеры аутентификации и авторизации.',35,4),(40,'FastAPI','JWT & OAuth2','jwt-oauth2','Вручную создадим механизм генерации токенов и покажем, как использовать их для аутентификации.',39,3),(41,'Databases','SQLAlchemy','sqlalchemy','Универсальный интерфейс для работы с любыми БД. Состоит из 2х частей: Core - адаптированный под конкретную БД sql-language и ORM (object relation mapper).',13,4),(42,'FastAPI','Интеграция с graphQL','integratsiia-s-graphql','Есть несколько библиотек, чтобы подружить FastAPI с технологией graphQL.<br>\r\ngraphQL позволяет получать от бэкенда ровно ту информацию, что нужно фронтенду. Т.е. делается один единственный запрос. В ответе нет лишних данных.',35,4),(44,'Artificial Intelligence','Crew AI','crew-ai','Модный agentic framework для работы с ИИ.\r\nДокументация: https://docs.crewai.com/introduction',43,4),(46,'DevOps','AWS','aws','Самый популярный облачный провайдер',45,4),(47,'DevOps','Terraform','terraform','Популярный инструмент для разворачивания инфраструктуры кодом.',45,4),(48,'DevOps','Ansible','ansible','Инструмент из серии Configuration Management Tool - для автоматической настройки серверов.',45,4),(49,'DevOps','playbook examples','playbook-examples','Примеры разных полезных сценариев для playbooks',48,3),(50,'DevOps','Полезные примеры','poleznye-primery','Разные кейсы конфигураций',47,3),(51,'DevOps','Kubernetes','kubernetes','Всё по kubernetes\r\nПара полезных статей и доки:\r\n- [17 вопросов на собес](https://habr.com/ru/companies/mws/articles/719198/)\r\n- [Deployment vs StatefulSet vs DaemoSet](https://medium.com/stakater/k8s-deployments-vs-statefulsets-vs-daemonsets-60582f0c62d4)\r\n- [Диаграмки](https://shipit.dev/posts/kubernetes-overview-diagrams.html)\r\n- [Документация](https://kubernetes.io/docs/concepts/services-networking/service/)',45,4),(52,'DevOps','manifest examples','manifest-examples','Manifest - .yml файл с конфигурацией какие ресурсы запрашивать и что разворачивать',51,3),(53,'DevOps','CI-CD pipelines','ci-cd-pipelines','Сборник с примерами пайплайнов для разных инструментов',45,4);
/*!40000 ALTER TABLE `pages_theme` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-05-09 13:54:20
